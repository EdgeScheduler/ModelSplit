def @main(%data: Tensor[(1, 3, 224, 224), float32], %vgg0_conv0_weight: Tensor[(64, 3, 3, 3), float32], %vgg0_conv0_bias: Tensor[(64), float32], %vgg0_conv1_weight: Tensor[(64, 64, 3, 3), float32], %vgg0_conv1_bias: Tensor[(64), float32], %vgg0_conv2_weight: Tensor[(128, 64, 3, 3), float32], %vgg0_conv2_bias: Tensor[(128), float32], %vgg0_conv3_weight: Tensor[(128, 128, 3, 3), float32], %vgg0_conv3_bias: Tensor[(128), float32], %vgg0_conv4_weight: Tensor[(256, 128, 3, 3), float32], %vgg0_conv4_bias: Tensor[(256), float32], %vgg0_conv5_weight: Tensor[(256, 256, 3, 3), float32], %vgg0_conv5_bias: Tensor[(256), float32], %vgg0_conv6_weight: Tensor[(256, 256, 3, 3), float32], %vgg0_conv6_bias: Tensor[(256), float32], %vgg0_conv7_weight: Tensor[(256, 256, 3, 3), float32], %vgg0_conv7_bias: Tensor[(256), float32], %vgg0_conv8_weight: Tensor[(512, 256, 3, 3), float32], %vgg0_conv8_bias: Tensor[(512), float32], %vgg0_conv9_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv9_bias: Tensor[(512), float32], %vgg0_conv10_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv10_bias: Tensor[(512), float32], %vgg0_conv11_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv11_bias: Tensor[(512), float32], %vgg0_conv12_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv12_bias: Tensor[(512), float32], %vgg0_conv13_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv13_bias: Tensor[(512), float32], %vgg0_conv14_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv14_bias: Tensor[(512), float32], %vgg0_conv15_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv15_bias: Tensor[(512), float32], %vgg0_dense0_weight: Tensor[(4096, 25088), float32], %vgg0_dense0_bias: Tensor[(4096), float32], %vgg0_dense1_weight: Tensor[(4096, 4096), float32], %vgg0_dense1_bias: Tensor[(4096), float32], %vgg0_dense2_weight: Tensor[(1000, 4096), float32], %vgg0_dense2_bias: Tensor[(1000), float32]) {
  %0 = nn.conv2d(%data, %vgg0_conv0_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 224, 224), float32] */;
  %1 = nn.bias_add(%0, %vgg0_conv0_bias) /* ty=Tensor[(1, 64, 224, 224), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(1, 64, 224, 224), float32] */;
  %3 = nn.conv2d(%2, %vgg0_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 224, 224), float32] */;
  %4 = nn.bias_add(%3, %vgg0_conv1_bias) /* ty=Tensor[(1, 64, 224, 224), float32] */;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 64, 224, 224), float32] */;
  %6 = nn.max_pool2d(%5, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %7 = nn.conv2d(%6, %vgg0_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 112, 112), float32] */;
  %8 = nn.bias_add(%7, %vgg0_conv2_bias) /* ty=Tensor[(1, 128, 112, 112), float32] */;
  %9 = nn.relu(%8) /* ty=Tensor[(1, 128, 112, 112), float32] */;
  %10 = nn.conv2d(%9, %vgg0_conv3_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 112, 112), float32] */;
  %11 = nn.bias_add(%10, %vgg0_conv3_bias) /* ty=Tensor[(1, 128, 112, 112), float32] */;
  %12 = nn.relu(%11) /* ty=Tensor[(1, 128, 112, 112), float32] */;
  %13 = nn.max_pool2d(%12, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 128, 56, 56), float32] */;
  %14 = nn.conv2d(%13, %vgg0_conv4_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %15 = nn.bias_add(%14, %vgg0_conv4_bias) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %16 = nn.relu(%15) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %17 = nn.conv2d(%16, %vgg0_conv5_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %18 = nn.bias_add(%17, %vgg0_conv5_bias) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %19 = nn.relu(%18) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %20 = nn.conv2d(%19, %vgg0_conv6_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %21 = nn.bias_add(%20, %vgg0_conv6_bias) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %22 = nn.relu(%21) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %23 = nn.conv2d(%22, %vgg0_conv7_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %24 = nn.bias_add(%23, %vgg0_conv7_bias) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %25 = nn.relu(%24) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %26 = nn.max_pool2d(%25, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 256, 28, 28), float32] */;
  %27 = nn.conv2d(%26, %vgg0_conv8_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %28 = nn.bias_add(%27, %vgg0_conv8_bias) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %29 = nn.relu(%28) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %30 = nn.conv2d(%29, %vgg0_conv9_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %31 = nn.bias_add(%30, %vgg0_conv9_bias) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %32 = nn.relu(%31) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %33 = nn.conv2d(%32, %vgg0_conv10_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %34 = nn.bias_add(%33, %vgg0_conv10_bias) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %35 = nn.relu(%34) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %36 = nn.conv2d(%35, %vgg0_conv11_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %37 = nn.bias_add(%36, %vgg0_conv11_bias) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %38 = nn.relu(%37) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %39 = nn.max_pool2d(%38, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %40 = nn.conv2d(%39, %vgg0_conv12_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %41 = nn.bias_add(%40, %vgg0_conv12_bias) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %42 = nn.relu(%41) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %43 = nn.conv2d(%42, %vgg0_conv13_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %44 = nn.bias_add(%43, %vgg0_conv13_bias) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %45 = nn.relu(%44) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %46 = nn.conv2d(%45, %vgg0_conv14_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %47 = nn.bias_add(%46, %vgg0_conv14_bias) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %48 = nn.relu(%47) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %49 = nn.conv2d(%48, %vgg0_conv15_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %50 = nn.bias_add(%49, %vgg0_conv15_bias) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %51 = nn.relu(%50) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %52 = nn.max_pool2d(%51, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %53 = nn.batch_flatten(%52) /* ty=Tensor[(1, 25088), float32] */;
  %54 = nn.batch_flatten(%53) /* ty=Tensor[(1, 25088), float32] */;
  %55 = nn.dense(%54, %vgg0_dense0_weight, units=4096) /* ty=Tensor[(1, 4096), float32] */;
  %56 = multiply(1f /* ty=float32 */, %vgg0_dense0_bias) /* ty=Tensor[(4096), float32] */;
  %57 = add(%55, %56) /* ty=Tensor[(1, 4096), float32] */;
  %58 = nn.relu(%57) /* ty=Tensor[(1, 4096), float32] */;
  %59 = nn.dropout(%58) /* ty=(Tensor[(1, 4096), float32], Tensor[(1, 4096), float32]) */;
  %60 = %59.0;
  %61 = nn.batch_flatten(%60) /* ty=Tensor[(1, 4096), float32] */;
  %62 = nn.batch_flatten(%61) /* ty=Tensor[(1, 4096), float32] */;
  %63 = nn.dense(%62, %vgg0_dense1_weight, units=4096) /* ty=Tensor[(1, 4096), float32] */;
  %64 = multiply(1f /* ty=float32 */, %vgg0_dense1_bias) /* ty=Tensor[(4096), float32] */;
  %65 = add(%63, %64) /* ty=Tensor[(1, 4096), float32] */;
  %66 = nn.relu(%65) /* ty=Tensor[(1, 4096), float32] */;
  %67 = nn.dropout(%66) /* ty=(Tensor[(1, 4096), float32], Tensor[(1, 4096), float32]) */;
  %68 = %67.0;
  %69 = nn.batch_flatten(%68) /* ty=Tensor[(1, 4096), float32] */;
  %70 = nn.batch_flatten(%69) /* ty=Tensor[(1, 4096), float32] */;
  %71 = nn.dense(%70, %vgg0_dense2_weight, units=1000) /* ty=Tensor[(1, 1000), float32] */;
  %72 = multiply(1f /* ty=float32 */, %vgg0_dense2_bias) /* ty=Tensor[(1000), float32] */;
  add(%71, %72) /* ty=Tensor[(1, 1000), float32] */
}