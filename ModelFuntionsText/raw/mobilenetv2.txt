def @main(%input: Tensor[(1, 3, 224, 224), float32], %v475: Tensor[(32, 3, 3, 3), float32], %v476: Tensor[(32), float32], %v478: Tensor[(32, 1, 3, 3), float32], %v479: Tensor[(32), float32], %v481: Tensor[(16, 32, 1, 1), float32], %v482: Tensor[(16), float32], %v484: Tensor[(96, 16, 1, 1), float32], %v485: Tensor[(96), float32], %v487: Tensor[(96, 1, 3, 3), float32], %v488: Tensor[(96), float32], %v490: Tensor[(24, 96, 1, 1), float32], %v491: Tensor[(24), float32], %v493: Tensor[(144, 24, 1, 1), float32], %v494: Tensor[(144), float32], %v496: Tensor[(144, 1, 3, 3), float32], %v497: Tensor[(144), float32], %v499: Tensor[(24, 144, 1, 1), float32], %v500: Tensor[(24), float32], %v502: Tensor[(144, 24, 1, 1), float32], %v503: Tensor[(144), float32], %v505: Tensor[(144, 1, 3, 3), float32], %v506: Tensor[(144), float32], %v508: Tensor[(32, 144, 1, 1), float32], %v509: Tensor[(32), float32], %v511: Tensor[(192, 32, 1, 1), float32], %v512: Tensor[(192), float32], %v514: Tensor[(192, 1, 3, 3), float32], %v515: Tensor[(192), float32], %v517: Tensor[(32, 192, 1, 1), float32], %v518: Tensor[(32), float32], %v520: Tensor[(192, 32, 1, 1), float32], %v521: Tensor[(192), float32], %v523: Tensor[(192, 1, 3, 3), float32], %v524: Tensor[(192), float32], %v526: Tensor[(32, 192, 1, 1), float32], %v527: Tensor[(32), float32], %v529: Tensor[(192, 32, 1, 1), float32], %v530: Tensor[(192), float32], %v532: Tensor[(192, 1, 3, 3), float32], %v533: Tensor[(192), float32], %v535: Tensor[(64, 192, 1, 1), float32], %v536: Tensor[(64), float32], %v538: Tensor[(384, 64, 1, 1), float32], %v539: Tensor[(384), float32], %v541: Tensor[(384, 1, 3, 3), float32], %v542: Tensor[(384), float32], %v544: Tensor[(64, 384, 1, 1), float32], %v545: Tensor[(64), float32], %v547: Tensor[(384, 64, 1, 1), float32], %v548: Tensor[(384), float32], %v550: Tensor[(384, 1, 3, 3), float32], %v551: Tensor[(384), float32], %v553: Tensor[(64, 384, 1, 1), float32], %v554: Tensor[(64), float32], %v556: Tensor[(384, 64, 1, 1), float32], %v557: Tensor[(384), float32], %v559: Tensor[(384, 1, 3, 3), float32], %v560: Tensor[(384), float32], %v562: Tensor[(64, 384, 1, 1), float32], %v563: Tensor[(64), float32], %v565: Tensor[(384, 64, 1, 1), float32], %v566: Tensor[(384), float32], %v568: Tensor[(384, 1, 3, 3), float32], %v569: Tensor[(384), float32], %v571: Tensor[(96, 384, 1, 1), float32], %v572: Tensor[(96), float32], %v574: Tensor[(576, 96, 1, 1), float32], %v575: Tensor[(576), float32], %v577: Tensor[(576, 1, 3, 3), float32], %v578: Tensor[(576), float32], %v580: Tensor[(96, 576, 1, 1), float32], %v581: Tensor[(96), float32], %v583: Tensor[(576, 96, 1, 1), float32], %v584: Tensor[(576), float32], %v586: Tensor[(576, 1, 3, 3), float32], %v587: Tensor[(576), float32], %v589: Tensor[(96, 576, 1, 1), float32], %v590: Tensor[(96), float32], %v592: Tensor[(576, 96, 1, 1), float32], %v593: Tensor[(576), float32], %v595: Tensor[(576, 1, 3, 3), float32], %v596: Tensor[(576), float32], %v598: Tensor[(160, 576, 1, 1), float32], %v599: Tensor[(160), float32], %v601: Tensor[(960, 160, 1, 1), float32], %v602: Tensor[(960), float32], %v604: Tensor[(960, 1, 3, 3), float32], %v605: Tensor[(960), float32], %v607: Tensor[(160, 960, 1, 1), float32], %v608: Tensor[(160), float32], %v610: Tensor[(960, 160, 1, 1), float32], %v611: Tensor[(960), float32], %v613: Tensor[(960, 1, 3, 3), float32], %v614: Tensor[(960), float32], %v616: Tensor[(160, 960, 1, 1), float32], %v617: Tensor[(160), float32], %v619: Tensor[(960, 160, 1, 1), float32], %v620: Tensor[(960), float32], %v622: Tensor[(960, 1, 3, 3), float32], %v623: Tensor[(960), float32], %v625: Tensor[(320, 960, 1, 1), float32], %v626: Tensor[(320), float32], %v628: Tensor[(1280, 320, 1, 1), float32], %v629: Tensor[(1280), float32], %v630: Tensor[(1), int64], %classifier.1.bias: Tensor[(1000), float32], %classifier.1.weight: Tensor[(1000, 1280), float32]) {
  %0 = nn.conv2d(%input, %v475, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]);
  %1 = nn.bias_add(%0, %v476);
  %2 = clip(%1, a_min=0f, a_max=6f);
  %3 = nn.conv2d(%2, %v478, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]);
  %4 = nn.bias_add(%3, %v479);
  %5 = clip(%4, a_min=0f, a_max=6f);
  %6 = nn.conv2d(%5, %v481, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]);
  %7 = nn.bias_add(%6, %v482);
  %8 = nn.conv2d(%7, %v484, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %9 = nn.bias_add(%8, %v485);
  %10 = clip(%9, a_min=0f, a_max=6f);
  %11 = nn.conv2d(%10, %v487, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]);
  %12 = nn.bias_add(%11, %v488);
  %13 = clip(%12, a_min=0f, a_max=6f);
  %14 = nn.conv2d(%13, %v490, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]);
  %15 = nn.bias_add(%14, %v491);
  %16 = nn.conv2d(%15, %v493, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]);
  %17 = nn.bias_add(%16, %v494);
  %18 = clip(%17, a_min=0f, a_max=6f);
  %19 = nn.conv2d(%18, %v496, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]);
  %20 = nn.bias_add(%19, %v497);
  %21 = clip(%20, a_min=0f, a_max=6f);
  %22 = nn.conv2d(%21, %v499, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]);
  %23 = nn.bias_add(%22, %v500);
  %24 = add(%15, %23);
  %25 = nn.conv2d(%24, %v502, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]);
  %26 = nn.bias_add(%25, %v503);
  %27 = clip(%26, a_min=0f, a_max=6f);
  %28 = nn.conv2d(%27, %v505, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]);
  %29 = nn.bias_add(%28, %v506);
  %30 = clip(%29, a_min=0f, a_max=6f);
  %31 = nn.conv2d(%30, %v508, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]);
  %32 = nn.bias_add(%31, %v509);
  %33 = nn.conv2d(%32, %v511, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %34 = nn.bias_add(%33, %v512);
  %35 = clip(%34, a_min=0f, a_max=6f);
  %36 = nn.conv2d(%35, %v514, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]);
  %37 = nn.bias_add(%36, %v515);
  %38 = clip(%37, a_min=0f, a_max=6f);
  %39 = nn.conv2d(%38, %v517, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]);
  %40 = nn.bias_add(%39, %v518);
  %41 = add(%32, %40);
  %42 = nn.conv2d(%41, %v520, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %43 = nn.bias_add(%42, %v521);
  %44 = clip(%43, a_min=0f, a_max=6f);
  %45 = nn.conv2d(%44, %v523, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]);
  %46 = nn.bias_add(%45, %v524);
  %47 = clip(%46, a_min=0f, a_max=6f);
  %48 = nn.conv2d(%47, %v526, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]);
  %49 = nn.bias_add(%48, %v527);
  %50 = add(%41, %49);
  %51 = nn.conv2d(%50, %v529, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]);
  %52 = nn.bias_add(%51, %v530);
  %53 = clip(%52, a_min=0f, a_max=6f);
  %54 = nn.conv2d(%53, %v532, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]);
  %55 = nn.bias_add(%54, %v533);
  %56 = clip(%55, a_min=0f, a_max=6f);
  %57 = nn.conv2d(%56, %v535, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %58 = nn.bias_add(%57, %v536);
  %59 = nn.conv2d(%58, %v538, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %60 = nn.bias_add(%59, %v539);
  %61 = clip(%60, a_min=0f, a_max=6f);
  %62 = nn.conv2d(%61, %v541, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %63 = nn.bias_add(%62, %v542);
  %64 = clip(%63, a_min=0f, a_max=6f);
  %65 = nn.conv2d(%64, %v544, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %66 = nn.bias_add(%65, %v545);
  %67 = add(%58, %66);
  %68 = nn.conv2d(%67, %v547, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %69 = nn.bias_add(%68, %v548);
  %70 = clip(%69, a_min=0f, a_max=6f);
  %71 = nn.conv2d(%70, %v550, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %72 = nn.bias_add(%71, %v551);
  %73 = clip(%72, a_min=0f, a_max=6f);
  %74 = nn.conv2d(%73, %v553, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %75 = nn.bias_add(%74, %v554);
  %76 = add(%67, %75);
  %77 = nn.conv2d(%76, %v556, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %78 = nn.bias_add(%77, %v557);
  %79 = clip(%78, a_min=0f, a_max=6f);
  %80 = nn.conv2d(%79, %v559, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %81 = nn.bias_add(%80, %v560);
  %82 = clip(%81, a_min=0f, a_max=6f);
  %83 = nn.conv2d(%82, %v562, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]);
  %84 = nn.bias_add(%83, %v563);
  %85 = add(%76, %84);
  %86 = nn.conv2d(%85, %v565, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]);
  %87 = nn.bias_add(%86, %v566);
  %88 = clip(%87, a_min=0f, a_max=6f);
  %89 = nn.conv2d(%88, %v568, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]);
  %90 = nn.bias_add(%89, %v569);
  %91 = clip(%90, a_min=0f, a_max=6f);
  %92 = nn.conv2d(%91, %v571, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %93 = nn.bias_add(%92, %v572);
  %94 = nn.conv2d(%93, %v574, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]);
  %95 = nn.bias_add(%94, %v575);
  %96 = clip(%95, a_min=0f, a_max=6f);
  %97 = nn.conv2d(%96, %v577, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]);
  %98 = nn.bias_add(%97, %v578);
  %99 = clip(%98, a_min=0f, a_max=6f);
  %100 = nn.conv2d(%99, %v580, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %101 = nn.bias_add(%100, %v581);
  %102 = add(%93, %101);
  %103 = nn.conv2d(%102, %v583, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]);
  %104 = nn.bias_add(%103, %v584);
  %105 = clip(%104, a_min=0f, a_max=6f);
  %106 = nn.conv2d(%105, %v586, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]);
  %107 = nn.bias_add(%106, %v587);
  %108 = clip(%107, a_min=0f, a_max=6f);
  %109 = nn.conv2d(%108, %v589, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]);
  %110 = nn.bias_add(%109, %v590);
  %111 = add(%102, %110);
  %112 = nn.conv2d(%111, %v592, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]);
  %113 = nn.bias_add(%112, %v593);
  %114 = clip(%113, a_min=0f, a_max=6f);
  %115 = nn.conv2d(%114, %v595, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]);
  %116 = nn.bias_add(%115, %v596);
  %117 = clip(%116, a_min=0f, a_max=6f);
  %118 = nn.conv2d(%117, %v598, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]);
  %119 = nn.bias_add(%118, %v599);
  %120 = nn.conv2d(%119, %v601, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]);
  %121 = nn.bias_add(%120, %v602);
  %122 = clip(%121, a_min=0f, a_max=6f);
  %123 = nn.conv2d(%122, %v604, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]);
  %124 = nn.bias_add(%123, %v605);
  %125 = clip(%124, a_min=0f, a_max=6f);
  %126 = nn.conv2d(%125, %v607, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]);
  %127 = nn.bias_add(%126, %v608);
  %128 = add(%119, %127);
  %129 = nn.conv2d(%128, %v610, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]);
  %130 = nn.bias_add(%129, %v611);
  %131 = clip(%130, a_min=0f, a_max=6f);
  %132 = nn.conv2d(%131, %v613, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]);
  %133 = nn.bias_add(%132, %v614);
  %134 = clip(%133, a_min=0f, a_max=6f);
  %135 = nn.conv2d(%134, %v616, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]);
  %136 = nn.bias_add(%135, %v617);
  %137 = add(%128, %136);
  %138 = nn.conv2d(%137, %v619, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]);
  %139 = nn.bias_add(%138, %v620);
  %140 = clip(%139, a_min=0f, a_max=6f);
  %141 = nn.conv2d(%140, %v622, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]);
  %142 = nn.bias_add(%141, %v623);
  %143 = clip(%142, a_min=0f, a_max=6f);
  %144 = nn.conv2d(%143, %v625, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]);
  %145 = nn.bias_add(%144, %v626);
  %146 = nn.conv2d(%145, %v628, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]);
  %147 = nn.bias_add(%146, %v629);
  %148 = clip(%147, a_min=0f, a_max=6f);
  %149 = (meta[relay.Constant][0], %v630);
  %150 = nn.global_avg_pool2d(%148);
  %151 = concatenate(%149);
  %152 = dyn.reshape(%150, %151, newshape=[]);
  %153 = nn.batch_flatten(%152);
  %154 = nn.dense(%153, %classifier.1.weight, units=1000);
  %155 = multiply(1f, %classifier.1.bias);
  add(%154, %155)
}