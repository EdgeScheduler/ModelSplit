def @main(%inception_3a/5x5_reduce_w_0: Tensor[(16, 192, 1, 1), float32], %inception_3b/3x3_reduce_b_0: Tensor[(128), float32], %inception_3a/3x3_reduce_b_0: Tensor[(96), float32], %inception_3b/5x5_reduce_b_0: Tensor[(32), float32], %inception_3a/1x1_b_0: Tensor[(64), float32], %inception_3a/pool_proj_w_0: Tensor[(32, 192, 1, 1), float32], %inception_3a/5x5_reduce_b_0: Tensor[(16), float32], %inception_3a/5x5_b_0: Tensor[(32), float32], %inception_3b/3x3_b_0: Tensor[(192), float32], %inception_3b/3x3_reduce_w_0: Tensor[(128, 256, 1, 1), float32], %inception_3b/1x1_b_0: Tensor[(128), float32], %inception_3a/3x3_w_0: Tensor[(128, 96, 3, 3), float32], %inception_3b/5x5_b_0: Tensor[(96), float32], %inception_3a/3x3_b_0: Tensor[(128), float32], %inception_3b/pool_proj_b_0: Tensor[(64), float32], %call_11: Tensor[(1, 192, 56, 56), float32], %inception_3b/3x3_w_0: Tensor[(192, 128, 3, 3), float32], %inception_3a/3x3_reduce_w_0: Tensor[(96, 192, 1, 1), float32], %inception_3a/pool_proj_b_0: Tensor[(32), float32], %inception_3b/pool_proj_w_0: Tensor[(64, 256, 1, 1), float32], %inception_3b/5x5_w_0: Tensor[(96, 32, 5, 5), float32], %inception_3a/1x1_w_0: Tensor[(64, 192, 1, 1), float32], %inception_3b/5x5_reduce_w_0: Tensor[(32, 256, 1, 1), float32], %inception_3b/1x1_w_0: Tensor[(128, 256, 1, 1), float32], %inception_3a/5x5_w_0: Tensor[(32, 16, 5, 5), float32] {
  %12 = nn.max_pool2d(%11, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 2, 2]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %13 = nn.conv2d(%12, %inception_3a/1x1_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %14 = nn.bias_add(%13, %inception_3a/1x1_b_0) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %15 = nn.conv2d(%12, %inception_3a/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %16 = nn.bias_add(%15, %inception_3a/3x3_reduce_b_0) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %18 = nn.conv2d(%17, %inception_3a/3x3_w_0, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %19 = nn.bias_add(%18, %inception_3a/3x3_b_0) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %20 = nn.conv2d(%12, %inception_3a/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 28, 28), float32] */;
  %21 = nn.bias_add(%20, %inception_3a/5x5_reduce_b_0) /* ty=Tensor[(1, 16, 28, 28), float32] */;
  %22 = nn.relu(%21) /* ty=Tensor[(1, 16, 28, 28), float32] */;
  %23 = nn.conv2d(%22, %inception_3a/5x5_w_0, padding=[2, 2, 2, 2], channels=32, kernel_size=[5, 5]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %24 = nn.bias_add(%23, %inception_3a/5x5_b_0) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %25 = nn.max_pool2d(%12, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %26 = nn.conv2d(%25, %inception_3a/pool_proj_w_0, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %27 = nn.bias_add(%26, %inception_3a/pool_proj_b_0) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %28 = nn.relu(%14) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %29 = nn.relu(%19) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %30 = nn.relu(%24) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %31 = nn.relu(%27) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %32 = (%28, %29, %30, %31);
  %33 = concatenate(%32, axis=1) /* ty=Tensor[(1, 256, 28, 28), float32] */;
  %34 = nn.conv2d(%33, %inception_3b/1x1_w_0, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %35 = nn.bias_add(%34, %inception_3b/1x1_b_0) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %36 = nn.conv2d(%33, %inception_3b/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %37 = nn.bias_add(%36, %inception_3b/3x3_reduce_b_0) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %38 = nn.relu(%37) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %39 = nn.conv2d(%38, %inception_3b/3x3_w_0, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %40 = nn.bias_add(%39, %inception_3b/3x3_b_0) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %41 = nn.conv2d(%33, %inception_3b/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %42 = nn.bias_add(%41, %inception_3b/5x5_reduce_b_0) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %43 = nn.relu(%42) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %44 = nn.conv2d(%43, %inception_3b/5x5_w_0, padding=[2, 2, 2, 2], channels=96, kernel_size=[5, 5]) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %45 = nn.bias_add(%44, %inception_3b/5x5_b_0) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %46 = nn.max_pool2d(%33, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 256, 28, 28), float32] */;
  %47 = nn.conv2d(%46, %inception_3b/pool_proj_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %48 = nn.bias_add(%47, %inception_3b/pool_proj_b_0) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %49 = nn.relu(%35) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %50 = nn.relu(%40) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %51 = nn.relu(%45) /* ty=Tensor[(1, 96, 28, 28), float32] */;
  %52 = nn.relu(%48) /* ty=Tensor[(1, 64, 28, 28), float32] */;
  %53 = (%49, %50, %51, %52);
  concatenate(%53, axis=1) /* ty=Tensor[(1, 480, 28, 28), float32] */;
}