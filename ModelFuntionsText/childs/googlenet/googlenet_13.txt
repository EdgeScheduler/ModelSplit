def @main(%inception_5a/5x5_b_0: Tensor[(128), float32], %inception_5a/5x5_w_0: Tensor[(128, 32, 5, 5), float32], %inception_5b/3x3_reduce_b_0: Tensor[(192), float32], %inception_5b/1x1_w_0: Tensor[(384, 832, 1, 1), float32], %inception_5a/1x1_b_0: Tensor[(256), float32], %inception_5a/pool_proj_w_0: Tensor[(128, 832, 1, 1), float32], %inception_5a/3x3_reduce_b_0: Tensor[(160), float32], %inception_5b/pool_proj_w_0: Tensor[(128, 832, 1, 1), float32], %inception_5b/1x1_b_0: Tensor[(384), float32], %inception_5b/3x3_reduce_w_0: Tensor[(192, 832, 1, 1), float32], %inception_5a/pool_proj_b_0: Tensor[(128), float32], %inception_5a/5x5_reduce_b_0: Tensor[(32), float32], %inception_5b/3x3_w_0: Tensor[(384, 192, 3, 3), float32], %inception_5a/5x5_reduce_w_0: Tensor[(32, 832, 1, 1), float32], %inception_5b/3x3_b_0: Tensor[(384), float32], %inception_5a/3x3_b_0: Tensor[(320), float32], %inception_5b/5x5_reduce_w_0: Tensor[(48, 832, 1, 1), float32], %inception_5a/3x3_reduce_w_0: Tensor[(160, 832, 1, 1), float32], %call_160: Tensor[(1, 832, 14, 14), float32], %inception_5b/5x5_w_0: Tensor[(128, 48, 5, 5), float32], %inception_5b/5x5_b_0: Tensor[(128), float32], %inception_5a/3x3_w_0: Tensor[(320, 160, 3, 3), float32], %inception_5a/1x1_w_0: Tensor[(256, 832, 1, 1), float32], %inception_5b/5x5_reduce_b_0: Tensor[(48), float32], %inception_5b/pool_proj_b_0: Tensor[(128), float32] {
  %161 = nn.max_pool2d(%160, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 2, 2]) /* ty=Tensor[(1, 832, 7, 7), float32] */;
  %162 = nn.conv2d(%161, %inception_5a/1x1_w_0, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 7, 7), float32] */;
  %163 = nn.bias_add(%162, %inception_5a/1x1_b_0) /* ty=Tensor[(1, 256, 7, 7), float32] */;
  %164 = nn.conv2d(%161, %inception_5a/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %165 = nn.bias_add(%164, %inception_5a/3x3_reduce_b_0) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %166 = nn.relu(%165) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %167 = nn.conv2d(%166, %inception_5a/3x3_w_0, padding=[1, 1, 1, 1], channels=320, kernel_size=[3, 3]) /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %168 = nn.bias_add(%167, %inception_5a/3x3_b_0) /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %169 = nn.conv2d(%161, %inception_5a/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %170 = nn.bias_add(%169, %inception_5a/5x5_reduce_b_0) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %171 = nn.relu(%170) /* ty=Tensor[(1, 32, 7, 7), float32] */;
  %172 = nn.conv2d(%171, %inception_5a/5x5_w_0, padding=[2, 2, 2, 2], channels=128, kernel_size=[5, 5]) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %173 = nn.bias_add(%172, %inception_5a/5x5_b_0) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %174 = nn.max_pool2d(%161, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 832, 7, 7), float32] */;
  %175 = nn.conv2d(%174, %inception_5a/pool_proj_w_0, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %176 = nn.bias_add(%175, %inception_5a/pool_proj_b_0) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %177 = nn.relu(%163) /* ty=Tensor[(1, 256, 7, 7), float32] */;
  %178 = nn.relu(%168) /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %179 = nn.relu(%173) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %180 = nn.relu(%176) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %181 = (%177, %178, %179, %180);
  %182 = concatenate(%181, axis=1) /* ty=Tensor[(1, 832, 7, 7), float32] */;
  %183 = nn.conv2d(%182, %inception_5b/1x1_w_0, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %184 = nn.bias_add(%183, %inception_5b/1x1_b_0) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %185 = nn.conv2d(%182, %inception_5b/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %186 = nn.bias_add(%185, %inception_5b/3x3_reduce_b_0) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %187 = nn.relu(%186) /* ty=Tensor[(1, 192, 7, 7), float32] */;
  %188 = nn.conv2d(%187, %inception_5b/3x3_w_0, padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %189 = nn.bias_add(%188, %inception_5b/3x3_b_0) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %190 = nn.conv2d(%182, %inception_5b/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 7, 7), float32] */;
  %191 = nn.bias_add(%190, %inception_5b/5x5_reduce_b_0) /* ty=Tensor[(1, 48, 7, 7), float32] */;
  %192 = nn.relu(%191) /* ty=Tensor[(1, 48, 7, 7), float32] */;
  %193 = nn.conv2d(%192, %inception_5b/5x5_w_0, padding=[2, 2, 2, 2], channels=128, kernel_size=[5, 5]) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %194 = nn.bias_add(%193, %inception_5b/5x5_b_0) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %195 = nn.max_pool2d(%182, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 832, 7, 7), float32] */;
  %196 = nn.conv2d(%195, %inception_5b/pool_proj_w_0, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %197 = nn.bias_add(%196, %inception_5b/pool_proj_b_0) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %198 = nn.relu(%184) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %199 = nn.relu(%189) /* ty=Tensor[(1, 384, 7, 7), float32] */;
  %200 = nn.relu(%194) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %201 = nn.relu(%197) /* ty=Tensor[(1, 128, 7, 7), float32] */;
  %202 = (%198, %199, %200, %201);
  concatenate(%202, axis=1) /* ty=Tensor[(1, 1024, 7, 7), float32] */;
}