def @main(%onnx::Conv_667: Tensor[(112), float32], %onnx::Conv_729: Tensor[(48, 832, 1, 1), float32], %onnx::Conv_684: Tensor[(256, 528, 1, 1), float32], %onnx::Conv_735: Tensor[(128, 832, 1, 1), float32], %onnx::Conv_580: Tensor[(96), float32], %onnx::Conv_624: Tensor[(48, 16, 3, 3), float32], %onnx::Conv_678: Tensor[(64, 32, 3, 3), float32], %onnx::Conv_699: Tensor[(128, 528, 1, 1), float32], %onnx::Conv_652: Tensor[(128), float32], %onnx::Conv_646: Tensor[(64), float32], %onnx::Conv_598: Tensor[(128), float32], %onnx::Conv_613: Tensor[(192), float32], %onnx::Conv_663: Tensor[(64, 512, 1, 1), float32], %onnx::Conv_709: Tensor[(320), float32], %onnx::Conv_640: Tensor[(24), float32], %onnx::Conv_708: Tensor[(320, 160, 3, 3), float32], %onnx::Conv_696: Tensor[(128, 32, 3, 3), float32], %onnx::Conv_601: Tensor[(192), float32], %onnx::Conv_609: Tensor[(64, 256, 1, 1), float32], %onnx::Conv_705: Tensor[(160, 832, 1, 1), float32], %onnx::Conv_585: Tensor[(16, 192, 1, 1), float32], %onnx::Conv_568: Tensor[(64), float32], %onnx::Conv_591: Tensor[(32, 192, 1, 1), float32], %onnx::Conv_736: Tensor[(128), float32]) -> Tensor[(15, 1000), float32], %onnx::Conv_715: Tensor[(128), float32], %onnx::Conv_657: Tensor[(24, 512, 1, 1), float32], %onnx::Conv_733: Tensor[(128), float32], %onnx::Conv_723: Tensor[(192, 832, 1, 1), float32], %onnx::Conv_697: Tensor[(128), float32], %onnx::Conv_628: Tensor[(64), float32], %onnx::Conv_694: Tensor[(32), float32], %onnx::Conv_655: Tensor[(256), float32], %onnx::Conv_604: Tensor[(32), float32], %call_66: Tensor[(15, 480, 28, 28), float32], %onnx::Conv_721: Tensor[(384), float32], %onnx::Conv_594: Tensor[(128, 256, 1, 1), float32], %onnx::Conv_595: Tensor[(128), float32], %onnx::Conv_675: Tensor[(32, 512, 1, 1), float32], %onnx::Conv_592: Tensor[(32), float32], %onnx::Conv_651: Tensor[(128, 512, 1, 1), float32], %onnx::Conv_583: Tensor[(128), float32], %onnx::Conv_612: Tensor[(192, 480, 1, 1), float32], %onnx::Conv_588: Tensor[(32, 16, 3, 3), float32], %onnx::Conv_606: Tensor[(96, 32, 3, 3), float32], %onnx::Conv_679: Tensor[(64), float32], %onnx::Conv_724: Tensor[(192), float32], %onnx::Conv_654: Tensor[(256, 128, 3, 3), float32], %onnx::Conv_615: Tensor[(96, 480, 1, 1), float32], %onnx::Conv_630: Tensor[(160, 512, 1, 1), float32], %onnx::Conv_574: Tensor[(192), float32], %onnx::Conv_645: Tensor[(64, 512, 1, 1), float32], %onnx::Conv_616: Tensor[(96), float32], %onnx::Conv_633: Tensor[(112, 512, 1, 1), float32], %onnx::Conv_649: Tensor[(128), float32], %onnx::Conv_661: Tensor[(64), float32], %onnx::Conv_681: Tensor[(64, 512, 1, 1), float32], %onnx::Conv_600: Tensor[(192, 128, 3, 3), float32], %onnx::Conv_687: Tensor[(160, 528, 1, 1), float32], %onnx::Conv_622: Tensor[(16), float32], %onnx::Conv_627: Tensor[(64, 480, 1, 1), float32], %onnx::Conv_711: Tensor[(32, 832, 1, 1), float32], %onnx::Conv_714: Tensor[(128, 32, 3, 3), float32], %onnx::Conv_570: Tensor[(64, 64, 1, 1), float32], %onnx::Conv_618: Tensor[(208, 96, 3, 3), float32], %onnx::Conv_720: Tensor[(384, 832, 1, 1), float32], %onnx::Conv_658: Tensor[(24), float32], %onnx::Conv_621: Tensor[(16, 480, 1, 1), float32], %onnx::Conv_726: Tensor[(384, 192, 3, 3), float32], %onnx::Conv_685: Tensor[(256), float32], %onnx::Conv_693: Tensor[(32, 528, 1, 1), float32], %onnx::Conv_636: Tensor[(224, 112, 3, 3), float32], %onnx::Conv_700: Tensor[(128), float32], %onnx::Conv_669: Tensor[(144, 512, 1, 1), float32], %onnx::Conv_703: Tensor[(256), float32], %onnx::Conv_571: Tensor[(64), float32], %onnx::Conv_712: Tensor[(32), float32], %onnx::Conv_576: Tensor[(64, 192, 1, 1), float32], %onnx::Conv_642: Tensor[(64, 24, 3, 3), float32], %onnx::Conv_577: Tensor[(64), float32], %onnx::Conv_702: Tensor[(256, 832, 1, 1), float32], %onnx::Conv_666: Tensor[(112, 512, 1, 1), float32], %onnx::Conv_579: Tensor[(96, 192, 1, 1), float32], %onnx::Conv_639: Tensor[(24, 512, 1, 1), float32], %onnx::Conv_670: Tensor[(144), float32], %onnx::Conv_567: Tensor[(64, 3, 7, 7), float32], %onnx::Conv_691: Tensor[(320), float32], %onnx::Conv_673: Tensor[(288), float32], %onnx::Conv_573: Tensor[(192, 64, 3, 3), float32], %onnx::Conv_664: Tensor[(64), float32], %onnx::Conv_688: Tensor[(160), float32], %onnx::Conv_582: Tensor[(128, 96, 3, 3), float32], %onnx::Conv_717: Tensor[(128, 832, 1, 1), float32], %onnx::Conv_690: Tensor[(320, 160, 3, 3), float32], %onnx::Conv_619: Tensor[(208), float32], %onnx::Conv_637: Tensor[(224), float32], %onnx::Conv_589: Tensor[(32), float32], %onnx::Conv_597: Tensor[(128, 256, 1, 1), float32], %onnx::Conv_610: Tensor[(64), float32], %onnx::Conv_676: Tensor[(32), float32], %onnx::Conv_732: Tensor[(128, 48, 3, 3), float32], %onnx::Conv_607: Tensor[(96), float32], %onnx::Conv_682: Tensor[(64), float32], %onnx::Conv_718: Tensor[(128), float32], %onnx::Conv_643: Tensor[(64), float32], %onnx::Conv_648: Tensor[(128, 512, 1, 1), float32], %onnx::Conv_730: Tensor[(48), float32], %onnx::Conv_706: Tensor[(160), float32], %onnx::Conv_660: Tensor[(64, 24, 3, 3), float32], %onnx::Conv_586: Tensor[(16), float32], %onnx::Conv_603: Tensor[(32, 256, 1, 1), float32], %onnx::Conv_625: Tensor[(48), float32], %onnx::Conv_672: Tensor[(288, 144, 3, 3), float32], %onnx::Conv_634: Tensor[(112), float32], %onnx::Conv_631: Tensor[(160), float32], %onnx::Conv_727: Tensor[(384), float32] {
  %67 = nn.max_pool2d(%66, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], ceil_mode=True) /* ty=Tensor[(15, 480, 14, 14), float32] */;
  %68 = nn.conv2d(%67, %onnx::Conv_612, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(15, 192, 14, 14), float32] */;
  %69 = nn.bias_add(%68, %onnx::Conv_613) /* ty=Tensor[(15, 192, 14, 14), float32] */;
  %70 = nn.conv2d(%67, %onnx::Conv_615, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(15, 96, 14, 14), float32] */;
  %71 = nn.bias_add(%70, %onnx::Conv_616) /* ty=Tensor[(15, 96, 14, 14), float32] */;
  %72 = nn.relu(%71) /* ty=Tensor[(15, 96, 14, 14), float32] */;
  %73 = nn.conv2d(%72, %onnx::Conv_618, padding=[1, 1, 1, 1], channels=208, kernel_size=[3, 3]) /* ty=Tensor[(15, 208, 14, 14), float32] */;
  %74 = nn.bias_add(%73, %onnx::Conv_619) /* ty=Tensor[(15, 208, 14, 14), float32] */;
  %75 = nn.conv2d(%67, %onnx::Conv_621, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(15, 16, 14, 14), float32] */;
  %76 = nn.bias_add(%75, %onnx::Conv_622) /* ty=Tensor[(15, 16, 14, 14), float32] */;
  %77 = nn.relu(%76) /* ty=Tensor[(15, 16, 14, 14), float32] */;
  %78 = nn.conv2d(%77, %onnx::Conv_624, padding=[1, 1, 1, 1], channels=48, kernel_size=[3, 3]) /* ty=Tensor[(15, 48, 14, 14), float32] */;
  %79 = nn.bias_add(%78, %onnx::Conv_625) /* ty=Tensor[(15, 48, 14, 14), float32] */;
  %80 = nn.max_pool2d(%67, pool_size=[3, 3], padding=[1, 1, 1, 1], ceil_mode=True) /* ty=Tensor[(15, 480, 14, 14), float32] */;
  %81 = nn.conv2d(%80, %onnx::Conv_627, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %82 = nn.bias_add(%81, %onnx::Conv_628) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %83 = nn.relu(%69) /* ty=Tensor[(15, 192, 14, 14), float32] */;
  %84 = nn.relu(%74) /* ty=Tensor[(15, 208, 14, 14), float32] */;
  %85 = nn.relu(%79) /* ty=Tensor[(15, 48, 14, 14), float32] */;
  %86 = nn.relu(%82) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %87 = (%83, %84, %85, %86);
  %88 = concatenate(%87, axis=1) /* ty=Tensor[(15, 512, 14, 14), float32] */;
  %89 = nn.conv2d(%88, %onnx::Conv_630, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(15, 160, 14, 14), float32] */;
  %90 = nn.bias_add(%89, %onnx::Conv_631) /* ty=Tensor[(15, 160, 14, 14), float32] */;
  %91 = nn.conv2d(%88, %onnx::Conv_633, padding=[0, 0, 0, 0], channels=112, kernel_size=[1, 1]) /* ty=Tensor[(15, 112, 14, 14), float32] */;
  %92 = nn.bias_add(%91, %onnx::Conv_634) /* ty=Tensor[(15, 112, 14, 14), float32] */;
  %93 = nn.relu(%92) /* ty=Tensor[(15, 112, 14, 14), float32] */;
  %94 = nn.conv2d(%93, %onnx::Conv_636, padding=[1, 1, 1, 1], channels=224, kernel_size=[3, 3]) /* ty=Tensor[(15, 224, 14, 14), float32] */;
  %95 = nn.bias_add(%94, %onnx::Conv_637) /* ty=Tensor[(15, 224, 14, 14), float32] */;
  %96 = nn.conv2d(%88, %onnx::Conv_639, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(15, 24, 14, 14), float32] */;
  %97 = nn.bias_add(%96, %onnx::Conv_640) /* ty=Tensor[(15, 24, 14, 14), float32] */;
  %98 = nn.relu(%97) /* ty=Tensor[(15, 24, 14, 14), float32] */;
  %99 = nn.conv2d(%98, %onnx::Conv_642, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %100 = nn.bias_add(%99, %onnx::Conv_643) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %101 = nn.max_pool2d(%88, pool_size=[3, 3], padding=[1, 1, 1, 1], ceil_mode=True) /* ty=Tensor[(15, 512, 14, 14), float32] */;
  %102 = nn.conv2d(%101, %onnx::Conv_645, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %103 = nn.bias_add(%102, %onnx::Conv_646) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %104 = nn.relu(%90) /* ty=Tensor[(15, 160, 14, 14), float32] */;
  %105 = nn.relu(%95) /* ty=Tensor[(15, 224, 14, 14), float32] */;
  %106 = nn.relu(%100) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %107 = nn.relu(%103) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %108 = (%104, %105, %106, %107);
  %109 = concatenate(%108, axis=1) /* ty=Tensor[(15, 512, 14, 14), float32] */;
  %110 = nn.conv2d(%109, %onnx::Conv_648, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %111 = nn.bias_add(%110, %onnx::Conv_649) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %112 = nn.conv2d(%109, %onnx::Conv_651, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %113 = nn.bias_add(%112, %onnx::Conv_652) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %114 = nn.relu(%113) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %115 = nn.conv2d(%114, %onnx::Conv_654, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(15, 256, 14, 14), float32] */;
  %116 = nn.bias_add(%115, %onnx::Conv_655) /* ty=Tensor[(15, 256, 14, 14), float32] */;
  %117 = nn.conv2d(%109, %onnx::Conv_657, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(15, 24, 14, 14), float32] */;
  %118 = nn.bias_add(%117, %onnx::Conv_658) /* ty=Tensor[(15, 24, 14, 14), float32] */;
  %119 = nn.relu(%118) /* ty=Tensor[(15, 24, 14, 14), float32] */;
  %120 = nn.conv2d(%119, %onnx::Conv_660, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %121 = nn.bias_add(%120, %onnx::Conv_661) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %122 = nn.max_pool2d(%109, pool_size=[3, 3], padding=[1, 1, 1, 1], ceil_mode=True) /* ty=Tensor[(15, 512, 14, 14), float32] */;
  %123 = nn.conv2d(%122, %onnx::Conv_663, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %124 = nn.bias_add(%123, %onnx::Conv_664) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %125 = nn.relu(%111) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %126 = nn.relu(%116) /* ty=Tensor[(15, 256, 14, 14), float32] */;
  %127 = nn.relu(%121) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %128 = nn.relu(%124) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %129 = (%125, %126, %127, %128);
  %130 = concatenate(%129, axis=1) /* ty=Tensor[(15, 512, 14, 14), float32] */;
  %131 = nn.conv2d(%130, %onnx::Conv_666, padding=[0, 0, 0, 0], channels=112, kernel_size=[1, 1]) /* ty=Tensor[(15, 112, 14, 14), float32] */;
  %132 = nn.bias_add(%131, %onnx::Conv_667) /* ty=Tensor[(15, 112, 14, 14), float32] */;
  %133 = nn.conv2d(%130, %onnx::Conv_669, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(15, 144, 14, 14), float32] */;
  %134 = nn.bias_add(%133, %onnx::Conv_670) /* ty=Tensor[(15, 144, 14, 14), float32] */;
  %135 = nn.relu(%134) /* ty=Tensor[(15, 144, 14, 14), float32] */;
  %136 = nn.conv2d(%135, %onnx::Conv_672, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(15, 288, 14, 14), float32] */;
  %137 = nn.bias_add(%136, %onnx::Conv_673) /* ty=Tensor[(15, 288, 14, 14), float32] */;
  %138 = nn.conv2d(%130, %onnx::Conv_675, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(15, 32, 14, 14), float32] */;
  %139 = nn.bias_add(%138, %onnx::Conv_676) /* ty=Tensor[(15, 32, 14, 14), float32] */;
  %140 = nn.relu(%139) /* ty=Tensor[(15, 32, 14, 14), float32] */;
  %141 = nn.conv2d(%140, %onnx::Conv_678, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %142 = nn.bias_add(%141, %onnx::Conv_679) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %143 = nn.max_pool2d(%130, pool_size=[3, 3], padding=[1, 1, 1, 1], ceil_mode=True) /* ty=Tensor[(15, 512, 14, 14), float32] */;
  %144 = nn.conv2d(%143, %onnx::Conv_681, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %145 = nn.bias_add(%144, %onnx::Conv_682) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %146 = nn.relu(%132) /* ty=Tensor[(15, 112, 14, 14), float32] */;
  %147 = nn.relu(%137) /* ty=Tensor[(15, 288, 14, 14), float32] */;
  %148 = nn.relu(%142) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %149 = nn.relu(%145) /* ty=Tensor[(15, 64, 14, 14), float32] */;
  %150 = (%146, %147, %148, %149);
  %151 = concatenate(%150, axis=1) /* ty=Tensor[(15, 528, 14, 14), float32] */;
  %152 = nn.conv2d(%151, %onnx::Conv_684, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(15, 256, 14, 14), float32] */;
  %153 = nn.bias_add(%152, %onnx::Conv_685) /* ty=Tensor[(15, 256, 14, 14), float32] */;
  %154 = nn.conv2d(%151, %onnx::Conv_687, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(15, 160, 14, 14), float32] */;
  %155 = nn.bias_add(%154, %onnx::Conv_688) /* ty=Tensor[(15, 160, 14, 14), float32] */;
  %156 = nn.relu(%155) /* ty=Tensor[(15, 160, 14, 14), float32] */;
  %157 = nn.conv2d(%156, %onnx::Conv_690, padding=[1, 1, 1, 1], channels=320, kernel_size=[3, 3]) /* ty=Tensor[(15, 320, 14, 14), float32] */;
  %158 = nn.bias_add(%157, %onnx::Conv_691) /* ty=Tensor[(15, 320, 14, 14), float32] */;
  %159 = nn.conv2d(%151, %onnx::Conv_693, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(15, 32, 14, 14), float32] */;
  %160 = nn.bias_add(%159, %onnx::Conv_694) /* ty=Tensor[(15, 32, 14, 14), float32] */;
  %161 = nn.relu(%160) /* ty=Tensor[(15, 32, 14, 14), float32] */;
  %162 = nn.conv2d(%161, %onnx::Conv_696, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %163 = nn.bias_add(%162, %onnx::Conv_697) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %164 = nn.max_pool2d(%151, pool_size=[3, 3], padding=[1, 1, 1, 1], ceil_mode=True) /* ty=Tensor[(15, 528, 14, 14), float32] */;
  %165 = nn.conv2d(%164, %onnx::Conv_699, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %166 = nn.bias_add(%165, %onnx::Conv_700) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %167 = nn.relu(%153) /* ty=Tensor[(15, 256, 14, 14), float32] */;
  %168 = nn.relu(%158) /* ty=Tensor[(15, 320, 14, 14), float32] */;
  %169 = nn.relu(%163) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %170 = nn.relu(%166) /* ty=Tensor[(15, 128, 14, 14), float32] */;
  %171 = (%167, %168, %169, %170);
  concatenate(%171, axis=1) /* ty=Tensor[(15, 832, 14, 14), float32] */;
}