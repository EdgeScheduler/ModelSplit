def @main(%inception_4b/pool_proj_b_0: Tensor[(64), float32], %inception_4e/5x5_reduce_w_0: Tensor[(32, 528, 1, 1), float32], %inception_4d/3x3_w_0: Tensor[(288, 144, 3, 3), float32], %inception_4d/pool_proj_w_0: Tensor[(64, 512, 1, 1), float32], %inception_4c/5x5_reduce_w_0: Tensor[(24, 512, 1, 1), float32], %inception_4e/1x1_b_0: Tensor[(256), float32], %inception_4a/3x3_b_0: Tensor[(208), float32], %inception_4b/5x5_reduce_w_0: Tensor[(24, 512, 1, 1), float32], %inception_4a/pool_proj_b_0: Tensor[(64), float32], %inception_4b/3x3_reduce_b_0: Tensor[(112), float32], %inception_4d/1x1_b_0: Tensor[(112), float32], %inception_4d/3x3_b_0: Tensor[(288), float32], %inception_4c/1x1_b_0: Tensor[(128), float32], %inception_4d/3x3_reduce_b_0: Tensor[(144), float32], %inception_4e/3x3_reduce_b_0: Tensor[(160), float32], %inception_4b/3x3_w_0: Tensor[(224, 112, 3, 3), float32], %inception_4c/3x3_b_0: Tensor[(256), float32], %inception_4b/3x3_b_0: Tensor[(224), float32], %inception_4c/3x3_reduce_b_0: Tensor[(128), float32], %inception_4b/1x1_w_0: Tensor[(160, 512, 1, 1), float32], %inception_4c/1x1_w_0: Tensor[(128, 512, 1, 1), float32], %inception_4a/1x1_w_0: Tensor[(192, 480, 1, 1), float32], %inception_4a/5x5_reduce_b_0: Tensor[(16), float32], %inception_4b/3x3_reduce_w_0: Tensor[(112, 512, 1, 1), float32], %inception_4c/pool_proj_b_0: Tensor[(64), float32], %inception_4d/5x5_reduce_b_0: Tensor[(32), float32], %inception_4a/1x1_b_0: Tensor[(192), float32], %inception_4a/3x3_reduce_b_0: Tensor[(96), float32], %inception_4c/pool_proj_w_0: Tensor[(64, 512, 1, 1), float32], %inception_4e/1x1_w_0: Tensor[(256, 528, 1, 1), float32], %inception_4b/1x1_b_0: Tensor[(160), float32], %inception_4b/5x5_b_0: Tensor[(64), float32], %inception_4b/pool_proj_w_0: Tensor[(64, 512, 1, 1), float32], %inception_4a/pool_proj_w_0: Tensor[(64, 480, 1, 1), float32], %inception_4c/3x3_w_0: Tensor[(256, 128, 3, 3), float32], %inception_4e/3x3_b_0: Tensor[(320), float32], %inception_4d/3x3_reduce_w_0: Tensor[(144, 512, 1, 1), float32], %inception_4a/3x3_w_0: Tensor[(208, 96, 3, 3), float32], %inception_4a/5x5_reduce_w_0: Tensor[(16, 480, 1, 1), float32], %inception_4a/5x5_b_0: Tensor[(48), float32], %inception_4d/1x1_w_0: Tensor[(112, 512, 1, 1), float32], %inception_4b/5x5_reduce_b_0: Tensor[(24), float32], %call_54: Tensor[(1, 480, 28, 28), float32], %inception_4a/5x5_w_0: Tensor[(48, 16, 5, 5), float32], %inception_4c/5x5_w_0: Tensor[(64, 24, 5, 5), float32], %inception_4e/3x3_reduce_w_0: Tensor[(160, 528, 1, 1), float32], %inception_4e/5x5_w_0: Tensor[(128, 32, 5, 5), float32], %inception_4e/3x3_w_0: Tensor[(320, 160, 3, 3), float32], %inception_4e/5x5_reduce_b_0: Tensor[(32), float32], %inception_4c/5x5_reduce_b_0: Tensor[(24), float32], %inception_4a/3x3_reduce_w_0: Tensor[(96, 480, 1, 1), float32], %inception_4e/5x5_b_0: Tensor[(128), float32], %inception_4e/pool_proj_b_0: Tensor[(128), float32], %inception_4b/5x5_w_0: Tensor[(64, 24, 5, 5), float32], %inception_4c/3x3_reduce_w_0: Tensor[(128, 512, 1, 1), float32], %inception_4d/5x5_w_0: Tensor[(64, 32, 5, 5), float32], %inception_4c/5x5_b_0: Tensor[(64), float32], %inception_4d/5x5_b_0: Tensor[(64), float32], %inception_4d/pool_proj_b_0: Tensor[(64), float32], %inception_4d/5x5_reduce_w_0: Tensor[(32, 512, 1, 1), float32], %inception_4e/pool_proj_w_0: Tensor[(128, 528, 1, 1), float32] {
  %55 = nn.max_pool2d(%54, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 2, 2]) /* ty=Tensor[(1, 480, 14, 14), float32] */;
  %56 = nn.conv2d(%55, %inception_4a/1x1_w_0, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %57 = nn.bias_add(%56, %inception_4a/1x1_b_0) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %58 = nn.conv2d(%55, %inception_4a/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %59 = nn.bias_add(%58, %inception_4a/3x3_reduce_b_0) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %60 = nn.relu(%59) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %61 = nn.conv2d(%60, %inception_4a/3x3_w_0, padding=[1, 1, 1, 1], channels=208, kernel_size=[3, 3]) /* ty=Tensor[(1, 208, 14, 14), float32] */;
  %62 = nn.bias_add(%61, %inception_4a/3x3_b_0) /* ty=Tensor[(1, 208, 14, 14), float32] */;
  %63 = nn.conv2d(%55, %inception_4a/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 14, 14), float32] */;
  %64 = nn.bias_add(%63, %inception_4a/5x5_reduce_b_0) /* ty=Tensor[(1, 16, 14, 14), float32] */;
  %65 = nn.relu(%64) /* ty=Tensor[(1, 16, 14, 14), float32] */;
  %66 = nn.conv2d(%65, %inception_4a/5x5_w_0, padding=[2, 2, 2, 2], channels=48, kernel_size=[5, 5]) /* ty=Tensor[(1, 48, 14, 14), float32] */;
  %67 = nn.bias_add(%66, %inception_4a/5x5_b_0) /* ty=Tensor[(1, 48, 14, 14), float32] */;
  %68 = nn.max_pool2d(%55, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 480, 14, 14), float32] */;
  %69 = nn.conv2d(%68, %inception_4a/pool_proj_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %70 = nn.bias_add(%69, %inception_4a/pool_proj_b_0) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %71 = nn.relu(%57) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %72 = nn.relu(%62) /* ty=Tensor[(1, 208, 14, 14), float32] */;
  %73 = nn.relu(%67) /* ty=Tensor[(1, 48, 14, 14), float32] */;
  %74 = nn.relu(%70) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %75 = (%71, %72, %73, %74);
  %76 = concatenate(%75, axis=1) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %77 = nn.conv2d(%76, %inception_4b/1x1_w_0, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 14, 14), float32] */;
  %78 = nn.bias_add(%77, %inception_4b/1x1_b_0) /* ty=Tensor[(1, 160, 14, 14), float32] */;
  %79 = nn.conv2d(%76, %inception_4b/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=112, kernel_size=[1, 1]) /* ty=Tensor[(1, 112, 14, 14), float32] */;
  %80 = nn.bias_add(%79, %inception_4b/3x3_reduce_b_0) /* ty=Tensor[(1, 112, 14, 14), float32] */;
  %81 = nn.relu(%80) /* ty=Tensor[(1, 112, 14, 14), float32] */;
  %82 = nn.conv2d(%81, %inception_4b/3x3_w_0, padding=[1, 1, 1, 1], channels=224, kernel_size=[3, 3]) /* ty=Tensor[(1, 224, 14, 14), float32] */;
  %83 = nn.bias_add(%82, %inception_4b/3x3_b_0) /* ty=Tensor[(1, 224, 14, 14), float32] */;
  %84 = nn.conv2d(%76, %inception_4b/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %85 = nn.bias_add(%84, %inception_4b/5x5_reduce_b_0) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %86 = nn.relu(%85) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %87 = nn.conv2d(%86, %inception_4b/5x5_w_0, padding=[2, 2, 2, 2], channels=64, kernel_size=[5, 5]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %88 = nn.bias_add(%87, %inception_4b/5x5_b_0) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %89 = nn.max_pool2d(%76, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %90 = nn.conv2d(%89, %inception_4b/pool_proj_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %91 = nn.bias_add(%90, %inception_4b/pool_proj_b_0) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %92 = nn.relu(%78) /* ty=Tensor[(1, 160, 14, 14), float32] */;
  %93 = nn.relu(%83) /* ty=Tensor[(1, 224, 14, 14), float32] */;
  %94 = nn.relu(%88) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %95 = nn.relu(%91) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %96 = (%92, %93, %94, %95);
  %97 = concatenate(%96, axis=1) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %98 = nn.conv2d(%97, %inception_4c/1x1_w_0, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %99 = nn.bias_add(%98, %inception_4c/1x1_b_0) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %100 = nn.conv2d(%97, %inception_4c/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %101 = nn.bias_add(%100, %inception_4c/3x3_reduce_b_0) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %102 = nn.relu(%101) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %103 = nn.conv2d(%102, %inception_4c/3x3_w_0, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %104 = nn.bias_add(%103, %inception_4c/3x3_b_0) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %105 = nn.conv2d(%97, %inception_4c/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %106 = nn.bias_add(%105, %inception_4c/5x5_reduce_b_0) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %107 = nn.relu(%106) /* ty=Tensor[(1, 24, 14, 14), float32] */;
  %108 = nn.conv2d(%107, %inception_4c/5x5_w_0, padding=[2, 2, 2, 2], channels=64, kernel_size=[5, 5]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %109 = nn.bias_add(%108, %inception_4c/5x5_b_0) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %110 = nn.max_pool2d(%97, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %111 = nn.conv2d(%110, %inception_4c/pool_proj_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %112 = nn.bias_add(%111, %inception_4c/pool_proj_b_0) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %113 = nn.relu(%99) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %114 = nn.relu(%104) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %115 = nn.relu(%109) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %116 = nn.relu(%112) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %117 = (%113, %114, %115, %116);
  %118 = concatenate(%117, axis=1) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %119 = nn.conv2d(%118, %inception_4d/1x1_w_0, padding=[0, 0, 0, 0], channels=112, kernel_size=[1, 1]) /* ty=Tensor[(1, 112, 14, 14), float32] */;
  %120 = nn.bias_add(%119, %inception_4d/1x1_b_0) /* ty=Tensor[(1, 112, 14, 14), float32] */;
  %121 = nn.conv2d(%118, %inception_4d/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 14, 14), float32] */;
  %122 = nn.bias_add(%121, %inception_4d/3x3_reduce_b_0) /* ty=Tensor[(1, 144, 14, 14), float32] */;
  %123 = nn.relu(%122) /* ty=Tensor[(1, 144, 14, 14), float32] */;
  %124 = nn.conv2d(%123, %inception_4d/3x3_w_0, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(1, 288, 14, 14), float32] */;
  %125 = nn.bias_add(%124, %inception_4d/3x3_b_0) /* ty=Tensor[(1, 288, 14, 14), float32] */;
  %126 = nn.conv2d(%118, %inception_4d/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 14, 14), float32] */;
  %127 = nn.bias_add(%126, %inception_4d/5x5_reduce_b_0) /* ty=Tensor[(1, 32, 14, 14), float32] */;
  %128 = nn.relu(%127) /* ty=Tensor[(1, 32, 14, 14), float32] */;
  %129 = nn.conv2d(%128, %inception_4d/5x5_w_0, padding=[2, 2, 2, 2], channels=64, kernel_size=[5, 5]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %130 = nn.bias_add(%129, %inception_4d/5x5_b_0) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %131 = nn.max_pool2d(%118, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %132 = nn.conv2d(%131, %inception_4d/pool_proj_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %133 = nn.bias_add(%132, %inception_4d/pool_proj_b_0) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %134 = nn.relu(%120) /* ty=Tensor[(1, 112, 14, 14), float32] */;
  %135 = nn.relu(%125) /* ty=Tensor[(1, 288, 14, 14), float32] */;
  %136 = nn.relu(%130) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %137 = nn.relu(%133) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %138 = (%134, %135, %136, %137);
  %139 = concatenate(%138, axis=1) /* ty=Tensor[(1, 528, 14, 14), float32] */;
  %140 = nn.conv2d(%139, %inception_4e/1x1_w_0, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %141 = nn.bias_add(%140, %inception_4e/1x1_b_0) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %142 = nn.conv2d(%139, %inception_4e/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 14, 14), float32] */;
  %143 = nn.bias_add(%142, %inception_4e/3x3_reduce_b_0) /* ty=Tensor[(1, 160, 14, 14), float32] */;
  %144 = nn.relu(%143) /* ty=Tensor[(1, 160, 14, 14), float32] */;
  %145 = nn.conv2d(%144, %inception_4e/3x3_w_0, padding=[1, 1, 1, 1], channels=320, kernel_size=[3, 3]) /* ty=Tensor[(1, 320, 14, 14), float32] */;
  %146 = nn.bias_add(%145, %inception_4e/3x3_b_0) /* ty=Tensor[(1, 320, 14, 14), float32] */;
  %147 = nn.conv2d(%139, %inception_4e/5x5_reduce_w_0, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 14, 14), float32] */;
  %148 = nn.bias_add(%147, %inception_4e/5x5_reduce_b_0) /* ty=Tensor[(1, 32, 14, 14), float32] */;
  %149 = nn.relu(%148) /* ty=Tensor[(1, 32, 14, 14), float32] */;
  %150 = nn.conv2d(%149, %inception_4e/5x5_w_0, padding=[2, 2, 2, 2], channels=128, kernel_size=[5, 5]) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %151 = nn.bias_add(%150, %inception_4e/5x5_b_0) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %152 = nn.max_pool2d(%139, pool_size=[3, 3], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 528, 14, 14), float32] */;
  %153 = nn.conv2d(%152, %inception_4e/pool_proj_w_0, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %154 = nn.bias_add(%153, %inception_4e/pool_proj_b_0) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %155 = nn.relu(%141) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %156 = nn.relu(%146) /* ty=Tensor[(1, 320, 14, 14), float32] */;
  %157 = nn.relu(%151) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %158 = nn.relu(%154) /* ty=Tensor[(1, 128, 14, 14), float32] */;
  %159 = (%155, %156, %157, %158);
  concatenate(%159, axis=1) /* ty=Tensor[(1, 832, 14, 14), float32] */;
}