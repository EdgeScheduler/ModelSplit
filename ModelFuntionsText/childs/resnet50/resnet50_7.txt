def @main(%resnetv24_stage2_batchnorm1_running_mean: Tensor[(128), float32], %resnetv24_stage2_batchnorm1_gamma: Tensor[(128), float32], %resnetv24_stage2_conv11_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage2_batchnorm5_running_mean: Tensor[(128), float32], %resnetv24_stage2_batchnorm7_beta: Tensor[(128), float32], %resnetv24_stage2_batchnorm7_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm1_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm8_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm9_beta: Tensor[(512), float32], %resnetv24_stage2_batchnorm5_gamma: Tensor[(128), float32], %resnetv24_stage2_batchnorm7_gamma: Tensor[(128), float32], %resnetv24_stage2_batchnorm3_running_var: Tensor[(512), float32], %resnetv24_stage2_batchnorm2_beta: Tensor[(128), float32], %resnetv24_stage2_batchnorm4_beta: Tensor[(128), float32], %resnetv24_stage2_batchnorm10_gamma: Tensor[(128), float32], %resnetv24_stage2_batchnorm11_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm6_gamma: Tensor[(512), float32], %resnetv24_stage2_conv5_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage2_batchnorm9_running_var: Tensor[(512), float32], %resnetv24_stage2_batchnorm4_running_mean: Tensor[(128), float32], %resnetv24_stage2_batchnorm8_beta: Tensor[(128), float32], %resnetv24_stage2_batchnorm5_beta: Tensor[(128), float32], %resnetv24_stage2_conv12_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage2_batchnorm2_gamma: Tensor[(128), float32], %resnetv24_stage2_batchnorm2_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm11_running_mean: Tensor[(128), float32], %resnetv24_stage2_batchnorm4_gamma: Tensor[(128), float32], %resnetv24_stage2_conv1_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage2_batchnorm9_running_mean: Tensor[(512), float32], %resnetv24_stage2_batchnorm7_running_mean: Tensor[(128), float32], %resnetv24_stage2_conv6_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage2_batchnorm10_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm10_running_mean: Tensor[(128), float32], %resnetv24_stage2_batchnorm9_gamma: Tensor[(512), float32], %resnetv24_stage2_conv10_weight: Tensor[(128, 512, 1, 1), float32], %resnetv24_stage2_batchnorm5_running_var: Tensor[(128), float32], %resnetv24_stage2_conv0_weight: Tensor[(128, 256, 1, 1), float32], %resnetv24_stage2_batchnorm2_running_mean: Tensor[(128), float32], %resnetv24_stage2_conv8_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage2_conv9_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage2_batchnorm10_beta: Tensor[(128), float32], %resnetv24_stage2_batchnorm3_running_mean: Tensor[(512), float32], %resnetv24_stage2_batchnorm11_beta: Tensor[(128), float32], %resnetv24_stage2_conv3_weight: Tensor[(512, 256, 1, 1), float32], %resnetv24_stage2_conv4_weight: Tensor[(128, 512, 1, 1), float32], %resnetv24_stage2_conv7_weight: Tensor[(128, 512, 1, 1), float32], %resnetv24_stage2_batchnorm1_beta: Tensor[(128), float32], %resnetv24_stage2_batchnorm6_running_mean: Tensor[(512), float32], %resnetv24_stage2_batchnorm3_beta: Tensor[(512), float32], %resnetv24_stage2_batchnorm8_running_mean: Tensor[(128), float32], %resnetv24_stage2_batchnorm4_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm6_running_var: Tensor[(512), float32], %resnetv24_stage2_batchnorm6_beta: Tensor[(512), float32], %call_47: (Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]), %resnetv24_stage2_conv2_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage2_batchnorm11_gamma: Tensor[(128), float32], %resnetv24_stage2_batchnorm3_gamma: Tensor[(512), float32], %resnetv24_stage2_batchnorm8_gamma: Tensor[(128), float32] {
  %48 = %47.0;
  %49 = nn.relu(%48) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %50 = nn.conv2d(%49, %resnetv24_stage2_conv0_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 56, 56), float32] */;
  %51 = nn.batch_norm(%50, %resnetv24_stage2_batchnorm1_gamma, %resnetv24_stage2_batchnorm1_beta, %resnetv24_stage2_batchnorm1_running_mean, %resnetv24_stage2_batchnorm1_running_var) /* ty=(Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %52 = %51.0;
  %53 = nn.relu(%52) /* ty=Tensor[(1, 128, 56, 56), float32] */;
  %54 = nn.conv2d(%53, %resnetv24_stage2_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %55 = nn.batch_norm(%54, %resnetv24_stage2_batchnorm2_gamma, %resnetv24_stage2_batchnorm2_beta, %resnetv24_stage2_batchnorm2_running_mean, %resnetv24_stage2_batchnorm2_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %56 = %55.0;
  %57 = nn.relu(%56) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %58 = nn.conv2d(%57, %resnetv24_stage2_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %59 = nn.conv2d(%49, %resnetv24_stage2_conv3_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %60 = add(%58, %59) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %61 = nn.batch_norm(%60, %resnetv24_stage2_batchnorm3_gamma, %resnetv24_stage2_batchnorm3_beta, %resnetv24_stage2_batchnorm3_running_mean, %resnetv24_stage2_batchnorm3_running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %62 = %61.0;
  %63 = nn.relu(%62) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %64 = nn.conv2d(%63, %resnetv24_stage2_conv4_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %65 = nn.batch_norm(%64, %resnetv24_stage2_batchnorm4_gamma, %resnetv24_stage2_batchnorm4_beta, %resnetv24_stage2_batchnorm4_running_mean, %resnetv24_stage2_batchnorm4_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %66 = %65.0;
  %67 = nn.relu(%66) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %68 = nn.conv2d(%67, %resnetv24_stage2_conv5_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %69 = nn.batch_norm(%68, %resnetv24_stage2_batchnorm5_gamma, %resnetv24_stage2_batchnorm5_beta, %resnetv24_stage2_batchnorm5_running_mean, %resnetv24_stage2_batchnorm5_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %70 = %69.0;
  %71 = nn.relu(%70) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %72 = nn.conv2d(%71, %resnetv24_stage2_conv6_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %73 = add(%72, %60) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %74 = nn.batch_norm(%73, %resnetv24_stage2_batchnorm6_gamma, %resnetv24_stage2_batchnorm6_beta, %resnetv24_stage2_batchnorm6_running_mean, %resnetv24_stage2_batchnorm6_running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %75 = %74.0;
  %76 = nn.relu(%75) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %77 = nn.conv2d(%76, %resnetv24_stage2_conv7_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %78 = nn.batch_norm(%77, %resnetv24_stage2_batchnorm7_gamma, %resnetv24_stage2_batchnorm7_beta, %resnetv24_stage2_batchnorm7_running_mean, %resnetv24_stage2_batchnorm7_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %79 = %78.0;
  %80 = nn.relu(%79) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %81 = nn.conv2d(%80, %resnetv24_stage2_conv8_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %82 = nn.batch_norm(%81, %resnetv24_stage2_batchnorm8_gamma, %resnetv24_stage2_batchnorm8_beta, %resnetv24_stage2_batchnorm8_running_mean, %resnetv24_stage2_batchnorm8_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %83 = %82.0;
  %84 = nn.relu(%83) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %85 = nn.conv2d(%84, %resnetv24_stage2_conv9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %86 = add(%85, %73) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %87 = nn.batch_norm(%86, %resnetv24_stage2_batchnorm9_gamma, %resnetv24_stage2_batchnorm9_beta, %resnetv24_stage2_batchnorm9_running_mean, %resnetv24_stage2_batchnorm9_running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %88 = %87.0;
  %89 = nn.relu(%88) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %90 = nn.conv2d(%89, %resnetv24_stage2_conv10_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %91 = nn.batch_norm(%90, %resnetv24_stage2_batchnorm10_gamma, %resnetv24_stage2_batchnorm10_beta, %resnetv24_stage2_batchnorm10_running_mean, %resnetv24_stage2_batchnorm10_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %92 = %91.0;
  %93 = nn.relu(%92) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %94 = nn.conv2d(%93, %resnetv24_stage2_conv11_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %95 = nn.batch_norm(%94, %resnetv24_stage2_batchnorm11_gamma, %resnetv24_stage2_batchnorm11_beta, %resnetv24_stage2_batchnorm11_running_mean, %resnetv24_stage2_batchnorm11_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %96 = %95.0;
  %97 = nn.relu(%96) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %98 = nn.conv2d(%97, %resnetv24_stage2_conv12_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  add(%98, %86) /* ty=Tensor[(1, 512, 28, 28), float32] */;
}