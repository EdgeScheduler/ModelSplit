def @main(%resnetv24_stage1_batchnorm0_beta: Tensor[(64), float32], %resnetv24_stage1_batchnorm5_running_mean: Tensor[(64), float32], %resnetv24_stage1_batchnorm6_running_mean: Tensor[(256), float32], %resnetv24_stage1_batchnorm3_beta: Tensor[(256), float32], %resnetv24_stage1_batchnorm6_running_var: Tensor[(256), float32], %resnetv24_stage1_batchnorm7_running_mean: Tensor[(64), float32], %resnetv24_batchnorm0_running_mean: Tensor[(3), float32], %resnetv24_stage1_conv3_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage1_batchnorm7_gamma: Tensor[(64), float32], %resnetv24_stage1_conv8_weight: Tensor[(64, 64, 3, 3), float32], %resnetv24_stage1_batchnorm4_gamma: Tensor[(64), float32], %resnetv24_stage1_batchnorm5_running_var: Tensor[(64), float32], %resnetv24_stage1_batchnorm7_beta: Tensor[(64), float32], %resnetv24_stage1_batchnorm8_beta: Tensor[(64), float32], %resnetv24_batchnorm0_gamma: Tensor[(3), float32], %resnetv24_stage1_batchnorm0_running_var: Tensor[(64), float32], %resnetv24_stage1_batchnorm3_gamma: Tensor[(256), float32], %resnetv24_stage1_conv4_weight: Tensor[(64, 256, 1, 1), float32], %resnetv24_stage1_conv2_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage1_batchnorm2_running_var: Tensor[(64), float32], %resnetv24_stage1_conv6_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage1_batchnorm5_beta: Tensor[(64), float32], %resnetv24_stage1_conv7_weight: Tensor[(64, 256, 1, 1), float32], %resnetv24_stage1_batchnorm8_running_mean: Tensor[(64), float32], %resnetv24_stage1_batchnorm3_running_mean: Tensor[(256), float32], %resnetv24_conv0_weight: Tensor[(64, 3, 7, 7), float32], %resnetv24_stage1_batchnorm1_beta: Tensor[(64), float32], %resnetv24_batchnorm1_gamma: Tensor[(64), float32], %resnetv24_batchnorm1_beta: Tensor[(64), float32], %resnetv24_batchnorm0_running_var: Tensor[(3), float32], %resnetv24_stage1_batchnorm3_running_var: Tensor[(256), float32], %resnetv24_stage1_conv9_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage1_batchnorm4_running_var: Tensor[(64), float32], %resnetv24_stage1_batchnorm7_running_var: Tensor[(64), float32], %data: Tensor[(1, 3, 224, 224), float32], %resnetv24_stage1_batchnorm6_beta: Tensor[(256), float32], %resnetv24_stage1_batchnorm2_running_mean: Tensor[(64), float32], %resnetv24_stage1_batchnorm1_running_var: Tensor[(64), float32], %resnetv24_stage1_batchnorm2_beta: Tensor[(64), float32], %resnetv24_batchnorm1_running_var: Tensor[(64), float32], %resnetv24_stage1_batchnorm4_beta: Tensor[(64), float32], %resnetv24_stage1_batchnorm6_gamma: Tensor[(256), float32], %resnetv24_stage1_batchnorm8_running_var: Tensor[(64), float32], %resnetv24_stage1_batchnorm5_gamma: Tensor[(64), float32], %resnetv24_stage1_batchnorm2_gamma: Tensor[(64), float32], %resnetv24_stage1_conv1_weight: Tensor[(64, 64, 3, 3), float32], %resnetv24_stage1_conv0_weight: Tensor[(64, 64, 1, 1), float32], %resnetv24_stage1_batchnorm0_gamma: Tensor[(64), float32], %resnetv24_stage1_batchnorm8_gamma: Tensor[(64), float32], %resnetv24_stage1_batchnorm1_gamma: Tensor[(64), float32], %resnetv24_batchnorm1_running_mean: Tensor[(64), float32], %resnetv24_stage1_batchnorm1_running_mean: Tensor[(64), float32], %resnetv24_stage1_batchnorm4_running_mean: Tensor[(64), float32], %resnetv24_batchnorm0_beta: Tensor[(3), float32], %resnetv24_stage1_conv5_weight: Tensor[(64, 64, 3, 3), float32], %resnetv24_stage1_batchnorm0_running_mean: Tensor[(64), float32] {
  %0 = nn.batch_norm(%data, %resnetv24_batchnorm0_gamma, %resnetv24_batchnorm0_beta, %resnetv24_batchnorm0_running_mean, %resnetv24_batchnorm0_running_var) /* ty=(Tensor[(1, 3, 224, 224), float32], Tensor[(3), float32], Tensor[(3), float32]) */;
  %1 = %0.0;
  %2 = nn.conv2d(%1, %resnetv24_conv0_weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %3 = nn.batch_norm(%2, %resnetv24_batchnorm1_gamma, %resnetv24_batchnorm1_beta, %resnetv24_batchnorm1_running_mean, %resnetv24_batchnorm1_running_var) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %4 = %3.0;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %6 = nn.max_pool2d(%5, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %7 = nn.batch_norm(%6, %resnetv24_stage1_batchnorm0_gamma, %resnetv24_stage1_batchnorm0_beta, %resnetv24_stage1_batchnorm0_running_mean, %resnetv24_stage1_batchnorm0_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %8 = %7.0;
  %9 = nn.relu(%8) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %10 = nn.conv2d(%9, %resnetv24_stage1_conv0_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %11 = nn.batch_norm(%10, %resnetv24_stage1_batchnorm1_gamma, %resnetv24_stage1_batchnorm1_beta, %resnetv24_stage1_batchnorm1_running_mean, %resnetv24_stage1_batchnorm1_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %12 = %11.0;
  %13 = nn.relu(%12) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %14 = nn.conv2d(%13, %resnetv24_stage1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %15 = nn.batch_norm(%14, %resnetv24_stage1_batchnorm2_gamma, %resnetv24_stage1_batchnorm2_beta, %resnetv24_stage1_batchnorm2_running_mean, %resnetv24_stage1_batchnorm2_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %16 = %15.0;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %18 = nn.conv2d(%17, %resnetv24_stage1_conv2_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %19 = nn.conv2d(%9, %resnetv24_stage1_conv3_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %20 = add(%18, %19) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %21 = nn.batch_norm(%20, %resnetv24_stage1_batchnorm3_gamma, %resnetv24_stage1_batchnorm3_beta, %resnetv24_stage1_batchnorm3_running_mean, %resnetv24_stage1_batchnorm3_running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %22 = %21.0;
  %23 = nn.relu(%22) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %24 = nn.conv2d(%23, %resnetv24_stage1_conv4_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %25 = nn.batch_norm(%24, %resnetv24_stage1_batchnorm4_gamma, %resnetv24_stage1_batchnorm4_beta, %resnetv24_stage1_batchnorm4_running_mean, %resnetv24_stage1_batchnorm4_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %26 = %25.0;
  %27 = nn.relu(%26) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %28 = nn.conv2d(%27, %resnetv24_stage1_conv5_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %29 = nn.batch_norm(%28, %resnetv24_stage1_batchnorm5_gamma, %resnetv24_stage1_batchnorm5_beta, %resnetv24_stage1_batchnorm5_running_mean, %resnetv24_stage1_batchnorm5_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %30 = %29.0;
  %31 = nn.relu(%30) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %32 = nn.conv2d(%31, %resnetv24_stage1_conv6_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %33 = add(%32, %20) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %34 = nn.batch_norm(%33, %resnetv24_stage1_batchnorm6_gamma, %resnetv24_stage1_batchnorm6_beta, %resnetv24_stage1_batchnorm6_running_mean, %resnetv24_stage1_batchnorm6_running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %35 = %34.0;
  %36 = nn.relu(%35) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %37 = nn.conv2d(%36, %resnetv24_stage1_conv7_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %38 = nn.batch_norm(%37, %resnetv24_stage1_batchnorm7_gamma, %resnetv24_stage1_batchnorm7_beta, %resnetv24_stage1_batchnorm7_running_mean, %resnetv24_stage1_batchnorm7_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %39 = %38.0;
  %40 = nn.relu(%39) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %41 = nn.conv2d(%40, %resnetv24_stage1_conv8_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %42 = nn.batch_norm(%41, %resnetv24_stage1_batchnorm8_gamma, %resnetv24_stage1_batchnorm8_beta, %resnetv24_stage1_batchnorm8_running_mean, %resnetv24_stage1_batchnorm8_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %43 = %42.0;
  %44 = nn.relu(%43) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %45 = nn.conv2d(%44, %resnetv24_stage1_conv9_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  add(%45, %33) /* ty=Tensor[(1, 256, 56, 56), float32] */;
}