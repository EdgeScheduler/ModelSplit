<<<<<<< HEAD
def @main(%resnetv24_batchnorm0_running_mean: Tensor[(3), float32], %resnetv24_batchnorm0_running_var: Tensor[(3), float32], %resnetv24_batchnorm0_gamma: Tensor[(3), float32], %data: Tensor[(1, 3, 224, 224), float32], %resnetv24_batchnorm0_beta: Tensor[(3), float32], %resnetv24_conv0_weight: Tensor[(64, 3, 7, 7), float32] {
=======
def @main(%resnetv24_conv0_weight: Tensor[(64, 3, 7, 7), float32], %resnetv24_batchnorm0_gamma: Tensor[(3), float32], %resnetv24_batchnorm0_running_var: Tensor[(3), float32], %resnetv24_batchnorm0_running_mean: Tensor[(3), float32], %resnetv24_batchnorm0_beta: Tensor[(3), float32], %data: Tensor[(1, 3, 224, 224), float32] {
>>>>>>> 13d0412bde7a96006492efe49e5586d42e052bd4
  %0 = nn.batch_norm(%data, %resnetv24_batchnorm0_gamma, %resnetv24_batchnorm0_beta, %resnetv24_batchnorm0_running_mean, %resnetv24_batchnorm0_running_var) /* ty=(Tensor[(1, 3, 224, 224), float32], Tensor[(3), float32], Tensor[(3), float32]) */;
  %1 = %0.0;
  nn.conv2d(%1, %resnetv24_conv0_weight, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */;
}