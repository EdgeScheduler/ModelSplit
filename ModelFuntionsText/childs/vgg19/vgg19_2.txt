def @main(%vgg0_conv10_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv12_bias: Tensor[(512), float32], %vgg0_conv13_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv11_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv12_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv13_bias: Tensor[(512), float32], %vgg0_conv11_bias: Tensor[(512), float32], %call_31: Tensor[(1, 512, 28, 28), float32], %vgg0_conv14_weight: Tensor[(512, 512, 3, 3), float32], %vgg0_conv10_bias: Tensor[(512), float32] {
  %32 = nn.relu(%31) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %33 = nn.conv2d(%32, %vgg0_conv10_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %34 = nn.bias_add(%33, %vgg0_conv10_bias) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %35 = nn.relu(%34) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %36 = nn.conv2d(%35, %vgg0_conv11_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %37 = nn.bias_add(%36, %vgg0_conv11_bias) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %38 = nn.relu(%37) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %39 = nn.max_pool2d(%38, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %40 = nn.conv2d(%39, %vgg0_conv12_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %41 = nn.bias_add(%40, %vgg0_conv12_bias) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %42 = nn.relu(%41) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %43 = nn.conv2d(%42, %vgg0_conv13_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %44 = nn.bias_add(%43, %vgg0_conv13_bias) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %45 = nn.relu(%44) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  nn.conv2d(%45, %vgg0_conv14_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
}