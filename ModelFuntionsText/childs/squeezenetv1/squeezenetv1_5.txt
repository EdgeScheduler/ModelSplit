def @main(%fire2/expand1x1_w_0: Tensor[(64, 16, 1, 1), float32], %fire2/expand3x3_b_0: Tensor[(64), float32], %call_5: Tensor[(1, 16, 55, 55), float32], %fire2/expand1x1_b_0: Tensor[(64), float32], %fire2/expand3x3_w_0: Tensor[(64, 16, 3, 3), float32] {
  %6 = nn.relu(%5) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  %7 = nn.conv2d(%6, %fire2/expand1x1_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %8 = nn.bias_add(%7, %fire2/expand1x1_b_0) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %9 = nn.conv2d(%6, %fire2/expand3x3_w_0, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %10 = nn.bias_add(%9, %fire2/expand3x3_b_0) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %11 = nn.relu(%8) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %12 = nn.relu(%10) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %13 = (%11, %12);
  concatenate(%13, axis=1) /* ty=Tensor[(1, 128, 55, 55), float32] */;
}