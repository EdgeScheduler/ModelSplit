def @main(%call_84: Tensor[(15, 64, 13, 13), float32], %features.12.expand3x3.weight: Tensor[(256, 64, 3, 3), float32], %features.12.expand3x3.bias: Tensor[(256), float32], %features.12.expand1x1.weight: Tensor[(256, 64, 1, 1), float32], %features.12.expand1x1.bias: Tensor[(256), float32] {
  %85 = nn.relu(%84) /* ty=Tensor[(15, 64, 13, 13), float32] */;
  %86 = nn.conv2d(%85, %features.12.expand1x1.weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(15, 256, 13, 13), float32] */;
  %87 = nn.bias_add(%86, %features.12.expand1x1.bias) /* ty=Tensor[(15, 256, 13, 13), float32] */;
  %88 = nn.conv2d(%85, %features.12.expand3x3.weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(15, 256, 13, 13), float32] */;
  %89 = nn.bias_add(%88, %features.12.expand3x3.bias) /* ty=Tensor[(15, 256, 13, 13), float32] */;
  %90 = nn.relu(%87) /* ty=Tensor[(15, 256, 13, 13), float32] */;
  %91 = nn.relu(%89) /* ty=Tensor[(15, 256, 13, 13), float32] */;
  %92 = (%90, %91);
  concatenate(%92, axis=1) /* ty=Tensor[(15, 512, 13, 13), float32] */;
}