def @main(%features.4.expand3x3.bias: Tensor[(64), float32], %features.4.expand1x1.weight: Tensor[(64, 16, 1, 1), float32], %features.4.expand1x1.bias: Tensor[(64), float32], %features.4.expand3x3.weight: Tensor[(64, 16, 3, 3), float32], %call_16: Tensor[(15, 16, 54, 54), float32] {
  %17 = nn.relu(%16) /* ty=Tensor[(15, 16, 54, 54), float32] */;
  %18 = nn.conv2d(%17, %features.4.expand1x1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %19 = nn.bias_add(%18, %features.4.expand1x1.bias) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %20 = nn.conv2d(%17, %features.4.expand3x3.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %21 = nn.bias_add(%20, %features.4.expand3x3.bias) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %22 = nn.relu(%19) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %23 = nn.relu(%21) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %24 = (%22, %23);
  concatenate(%24, axis=1) /* ty=Tensor[(15, 128, 54, 54), float32] */;
}