def @main(%features.3.expand3x3.bias: Tensor[(64), float32], %features.3.expand1x1.weight: Tensor[(64, 16, 1, 1), float32], %features.3.expand1x1.bias: Tensor[(64), float32], %features.3.expand3x3.weight: Tensor[(64, 16, 3, 3), float32], %call_5: Tensor[(15, 16, 54, 54), float32] {
  %6 = nn.relu(%5) /* ty=Tensor[(15, 16, 54, 54), float32] */;
  %7 = nn.conv2d(%6, %features.3.expand1x1.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %8 = nn.bias_add(%7, %features.3.expand1x1.bias) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %9 = nn.conv2d(%6, %features.3.expand3x3.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %10 = nn.bias_add(%9, %features.3.expand3x3.bias) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %11 = nn.relu(%8) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %12 = nn.relu(%10) /* ty=Tensor[(15, 64, 54, 54), float32] */;
  %13 = (%11, %12);
  concatenate(%13, axis=1) /* ty=Tensor[(15, 128, 54, 54), float32] */;
}