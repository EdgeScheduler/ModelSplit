def @main(%models.22.bn18.running_mean: Tensor[(1024), float32], %models.19.bn15.running_var: Tensor[(512), float32], %models.21.bn17.running_mean: Tensor[(512), float32], %models.18.conv14.weight: Tensor[(1024, 512, 3, 3), float32], %models.19.bn15.bias: Tensor[(512), float32], %models.20.bn16.bias: Tensor[(1024), float32], %models.26.bn21.running_mean: Tensor[(64), float32], %models.18.bn14.running_var: Tensor[(1024), float32], %models.19.bn15.weight: Tensor[(512), float32], %models.21.bn17.bias: Tensor[(512), float32], %models.24.bn20.running_var: Tensor[(1024), float32], %models.24.bn20.bias: Tensor[(1024), float32], %models.24.bn20.running_mean: Tensor[(1024), float32], %models.20.bn16.running_mean: Tensor[(1024), float32], %models.18.bn14.weight: Tensor[(1024), float32], %models.26.conv21.weight: Tensor[(64, 512, 1, 1), float32], %models.22.conv18.weight: Tensor[(1024, 512, 3, 3), float32], %models.22.bn18.weight: Tensor[(1024), float32], %models.20.bn16.running_var: Tensor[(1024), float32], %models.23.bn19.running_mean: Tensor[(1024), float32], %models.24.bn20.weight: Tensor[(1024), float32], %models.23.conv19.weight: Tensor[(1024, 1024, 3, 3), float32], %models.22.bn18.running_var: Tensor[(1024), float32], %models.21.bn17.running_var: Tensor[(512), float32], %models.18.bn14.running_mean: Tensor[(1024), float32], %models.23.bn19.running_var: Tensor[(1024), float32], %models.26.bn21.running_var: Tensor[(64), float32], %models.22.bn18.bias: Tensor[(1024), float32], %models.26.bn21.weight: Tensor[(64), float32], %models.21.conv17.weight: Tensor[(512, 1024, 1, 1), float32], %models.18.bn14.bias: Tensor[(1024), float32], %models.26.bn21.bias: Tensor[(64), float32], %models.19.bn15.running_mean: Tensor[(512), float32], %models.24.conv20.weight: Tensor[(1024, 1024, 3, 3), float32], %call_53: (Tensor[(1, 512, 26, 26), float32], Tensor[(512), float32], Tensor[(512), float32]), %models.23.bn19.bias: Tensor[(1024), float32], %models.20.conv16.weight: Tensor[(1024, 512, 3, 3), float32], %models.19.conv15.weight: Tensor[(512, 1024, 1, 1), float32], %models.20.bn16.weight: Tensor[(1024), float32], %models.23.bn19.weight: Tensor[(1024), float32], %models.21.bn17.weight: Tensor[(512), float32] {
  %54 = %53.0;
  %55 = nn.leaky_relu(%54, alpha=0.1f) /* ty=Tensor[(1, 512, 26, 26), float32] */;
  %56 = nn.conv2d(%55, %models.26.conv21.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 26, 26), float32] */;
  %57 = nn.batch_norm(%56, %models.26.bn21.weight, %models.26.bn21.bias, %models.26.bn21.running_mean, %models.26.bn21.running_var) /* ty=(Tensor[(1, 64, 26, 26), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %58 = %57.0;
  %59 = nn.leaky_relu(%58, alpha=0.1f) /* ty=Tensor[(1, 64, 26, 26), float32] */;
  %60 = reshape(%59, newshape=[1, 64, 13, 2, 13, 2]) /* ty=Tensor[(1, 64, 13, 2, 13, 2), float32] */;
  %61 = transpose(%60, axes=[0, 1, 2, 4, 3, 5]) /* ty=Tensor[(1, 64, 13, 13, 2, 2), float32] */;
  %62 = reshape(%61, newshape=[1, 64, 169, 4]) /* ty=Tensor[(1, 64, 169, 4), float32] */;
  %63 = transpose(%62, axes=[0, 1, 3, 2]) /* ty=Tensor[(1, 64, 4, 169), float32] */;
  %64 = reshape(%63, newshape=[1, 64, 4, 13, 13]) /* ty=Tensor[(1, 64, 4, 13, 13), float32] */;
  %65 = transpose(%64, axes=[0, 2, 1, 3, 4]) /* ty=Tensor[(1, 4, 64, 13, 13), float32] */;
  %66 = nn.max_pool2d(%55, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %67 = nn.conv2d(%66, %models.18.conv14.weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %68 = nn.batch_norm(%67, %models.18.bn14.weight, %models.18.bn14.bias, %models.18.bn14.running_mean, %models.18.bn14.running_var) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %69 = %68.0;
  %70 = nn.leaky_relu(%69, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %71 = nn.conv2d(%70, %models.19.conv15.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %72 = nn.batch_norm(%71, %models.19.bn15.weight, %models.19.bn15.bias, %models.19.bn15.running_mean, %models.19.bn15.running_var) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %73 = %72.0;
  %74 = nn.leaky_relu(%73, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %75 = nn.conv2d(%74, %models.20.conv16.weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %76 = nn.batch_norm(%75, %models.20.bn16.weight, %models.20.bn16.bias, %models.20.bn16.running_mean, %models.20.bn16.running_var) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %77 = %76.0;
  %78 = nn.leaky_relu(%77, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %79 = nn.conv2d(%78, %models.21.conv17.weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %80 = nn.batch_norm(%79, %models.21.bn17.weight, %models.21.bn17.bias, %models.21.bn17.running_mean, %models.21.bn17.running_var) /* ty=(Tensor[(1, 512, 13, 13), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %81 = %80.0;
  %82 = nn.leaky_relu(%81, alpha=0.1f) /* ty=Tensor[(1, 512, 13, 13), float32] */;
  %83 = nn.conv2d(%82, %models.22.conv18.weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %84 = nn.batch_norm(%83, %models.22.bn18.weight, %models.22.bn18.bias, %models.22.bn18.running_mean, %models.22.bn18.running_var) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %85 = %84.0;
  %86 = nn.leaky_relu(%85, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %87 = nn.conv2d(%86, %models.23.conv19.weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %88 = nn.batch_norm(%87, %models.23.bn19.weight, %models.23.bn19.bias, %models.23.bn19.running_mean, %models.23.bn19.running_var) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %89 = %88.0;
  %90 = nn.leaky_relu(%89, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %91 = nn.conv2d(%90, %models.24.conv20.weight, padding=[1, 1, 1, 1], channels=1024, kernel_size=[3, 3]) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %92 = nn.batch_norm(%91, %models.24.bn20.weight, %models.24.bn20.bias, %models.24.bn20.running_mean, %models.24.bn20.running_var) /* ty=(Tensor[(1, 1024, 13, 13), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %93 = %92.0;
  %94 = reshape(%65, newshape=[1, 256, 13, 13]) /* ty=Tensor[(1, 256, 13, 13), float32] */;
  %95 = nn.leaky_relu(%93, alpha=0.1f) /* ty=Tensor[(1, 1024, 13, 13), float32] */;
  %96 = (%94, %95);
  concatenate(%96, axis=1) /* ty=Tensor[(1, 1280, 13, 13), float32] */;
}