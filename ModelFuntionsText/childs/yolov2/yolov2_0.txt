def @main(%models.0.bn1.running_var: Tensor[(32), float32], %input.1: Tensor[(1, 3, 416, 416), float32], %models.0.bn1.bias: Tensor[(32), float32], %models.2.bn2.running_var: Tensor[(64), float32], %models.0.bn1.weight: Tensor[(32), float32], %models.4.conv3.weight: Tensor[(128, 64, 3, 3), float32], %models.2.conv2.weight: Tensor[(64, 32, 3, 3), float32], %models.4.bn3.weight: Tensor[(128), float32], %models.2.bn2.bias: Tensor[(64), float32], %models.4.bn3.running_var: Tensor[(128), float32], %models.0.bn1.running_mean: Tensor[(32), float32], %models.4.bn3.running_mean: Tensor[(128), float32], %models.2.bn2.weight: Tensor[(64), float32], %models.4.bn3.bias: Tensor[(128), float32], %models.2.bn2.running_mean: Tensor[(64), float32], %models.5.conv4.weight: Tensor[(64, 128, 1, 1), float32], %models.0.conv1.weight: Tensor[(32, 3, 3, 3), float32] {
  %0 = nn.conv2d(%input.1, %models.0.conv1.weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 416, 416), float32] */;
  %1 = nn.batch_norm(%0, %models.0.bn1.weight, %models.0.bn1.bias, %models.0.bn1.running_mean, %models.0.bn1.running_var) /* ty=(Tensor[(1, 32, 416, 416), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %2 = %1.0;
  %3 = nn.leaky_relu(%2, alpha=0.1f) /* ty=Tensor[(1, 32, 416, 416), float32] */;
  %4 = nn.max_pool2d(%3, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 32, 208, 208), float32] */;
  %5 = nn.conv2d(%4, %models.2.conv2.weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 208, 208), float32] */;
  %6 = nn.batch_norm(%5, %models.2.bn2.weight, %models.2.bn2.bias, %models.2.bn2.running_mean, %models.2.bn2.running_var) /* ty=(Tensor[(1, 64, 208, 208), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %7 = %6.0;
  %8 = nn.leaky_relu(%7, alpha=0.1f) /* ty=Tensor[(1, 64, 208, 208), float32] */;
  %9 = nn.max_pool2d(%8, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 104, 104), float32] */;
  %10 = nn.conv2d(%9, %models.4.conv3.weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  %11 = nn.batch_norm(%10, %models.4.bn3.weight, %models.4.bn3.bias, %models.4.bn3.running_mean, %models.4.bn3.running_var) /* ty=(Tensor[(1, 128, 104, 104), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %12 = %11.0;
  %13 = nn.leaky_relu(%12, alpha=0.1f) /* ty=Tensor[(1, 128, 104, 104), float32] */;
  nn.conv2d(%13, %models.5.conv4.weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 104, 104), float32] */;
}