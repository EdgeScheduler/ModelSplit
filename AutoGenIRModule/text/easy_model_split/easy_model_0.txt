def @main(%input: Tensor[(4, 3, 14, 14), float32], %bias1: Tensor[(1), float32], %weight2: Tensor[(1, 3, 4, 4), float32], %add1: Tensor[(4, 3, 14, 14), float32], %bias2: Tensor[(1), float32], %weight1: Tensor[(1, 3, 4, 4), float32] {
  %0 = nn.conv2d(%input, %weight1, strides=[2, 2], padding=[0, 0, 0, 0], channels=1, kernel_size=[4, 4]) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  %1 = nn.bias_add(%0, %bias1) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  %2 = add(%input, %add1) /* ty=Tensor[(4, 3, 14, 14), float32] */;
  %3 = nn.conv2d(%2, %weight2, strides=[2, 2], padding=[0, 0, 0, 0], channels=1, kernel_size=[4, 4]) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  %4 = nn.bias_add(%3, %bias2) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  %5 = nn.relu(%1) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  %6 = nn.relu(%4) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  %7 = add(%5, %6) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  %8 = nn.relu(%7) /* ty=Tensor[(4, 1, 6, 6), float32] */;
  add(%7, %8) /* ty=Tensor[(4, 1, 6, 6), float32] */;
}