def @main(%images: Tensor[(1, 3, 640, 640), float32], %model.0.conv.weight: Tensor[(48, 3, 6, 6), float32], %model.0.conv.bias: Tensor[(48), float32], %model.1.conv.weight: Tensor[(96, 48, 3, 3), float32], %model.1.conv.bias: Tensor[(96), float32], %model.2.cv1.conv.weight: Tensor[(48, 96, 1, 1), float32], %model.2.cv1.conv.bias: Tensor[(48), float32], %model.2.cv2.conv.weight: Tensor[(48, 96, 1, 1), float32], %model.2.cv2.conv.bias: Tensor[(48), float32], %model.2.cv3.conv.weight: Tensor[(96, 96, 1, 1), float32], %model.2.cv3.conv.bias: Tensor[(96), float32], %model.2.m.0.cv1.conv.weight: Tensor[(48, 48, 1, 1), float32], %model.2.m.0.cv1.conv.bias: Tensor[(48), float32], %model.2.m.0.cv2.conv.weight: Tensor[(48, 48, 3, 3), float32], %model.2.m.0.cv2.conv.bias: Tensor[(48), float32], %model.2.m.1.cv1.conv.weight: Tensor[(48, 48, 1, 1), float32], %model.2.m.1.cv1.conv.bias: Tensor[(48), float32], %model.2.m.1.cv2.conv.weight: Tensor[(48, 48, 3, 3), float32], %model.2.m.1.cv2.conv.bias: Tensor[(48), float32], %model.3.conv.weight: Tensor[(192, 96, 3, 3), float32], %model.3.conv.bias: Tensor[(192), float32], %model.4.cv1.conv.weight: Tensor[(96, 192, 1, 1), float32], %model.4.cv1.conv.bias: Tensor[(96), float32], %model.4.cv2.conv.weight: Tensor[(96, 192, 1, 1), float32], %model.4.cv2.conv.bias: Tensor[(96), float32], %model.4.cv3.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.4.cv3.conv.bias: Tensor[(192), float32], %model.4.m.0.cv1.conv.weight: Tensor[(96, 96, 1, 1), float32], %model.4.m.0.cv1.conv.bias: Tensor[(96), float32], %model.4.m.0.cv2.conv.weight: Tensor[(96, 96, 3, 3), float32], %model.4.m.0.cv2.conv.bias: Tensor[(96), float32], %model.4.m.1.cv1.conv.weight: Tensor[(96, 96, 1, 1), float32], %model.4.m.1.cv1.conv.bias: Tensor[(96), float32], %model.4.m.1.cv2.conv.weight: Tensor[(96, 96, 3, 3), float32], %model.4.m.1.cv2.conv.bias: Tensor[(96), float32], %model.4.m.2.cv1.conv.weight: Tensor[(96, 96, 1, 1), float32], %model.4.m.2.cv1.conv.bias: Tensor[(96), float32], %model.4.m.2.cv2.conv.weight: Tensor[(96, 96, 3, 3), float32], %model.4.m.2.cv2.conv.bias: Tensor[(96), float32], %model.4.m.3.cv1.conv.weight: Tensor[(96, 96, 1, 1), float32], %model.4.m.3.cv1.conv.bias: Tensor[(96), float32], %model.4.m.3.cv2.conv.weight: Tensor[(96, 96, 3, 3), float32], %model.4.m.3.cv2.conv.bias: Tensor[(96), float32], %model.5.conv.weight: Tensor[(384, 192, 3, 3), float32], %model.5.conv.bias: Tensor[(384), float32], %model.6.cv1.conv.weight: Tensor[(192, 384, 1, 1), float32], %model.6.cv1.conv.bias: Tensor[(192), float32], %model.6.cv2.conv.weight: Tensor[(192, 384, 1, 1), float32], %model.6.cv2.conv.bias: Tensor[(192), float32], %model.6.cv3.conv.weight: Tensor[(384, 384, 1, 1), float32], %model.6.cv3.conv.bias: Tensor[(384), float32], %model.6.m.0.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.6.m.0.cv1.conv.bias: Tensor[(192), float32], %model.6.m.0.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.6.m.0.cv2.conv.bias: Tensor[(192), float32], %model.6.m.1.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.6.m.1.cv1.conv.bias: Tensor[(192), float32], %model.6.m.1.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.6.m.1.cv2.conv.bias: Tensor[(192), float32], %model.6.m.2.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.6.m.2.cv1.conv.bias: Tensor[(192), float32], %model.6.m.2.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.6.m.2.cv2.conv.bias: Tensor[(192), float32], %model.6.m.3.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.6.m.3.cv1.conv.bias: Tensor[(192), float32], %model.6.m.3.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.6.m.3.cv2.conv.bias: Tensor[(192), float32], %model.6.m.4.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.6.m.4.cv1.conv.bias: Tensor[(192), float32], %model.6.m.4.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.6.m.4.cv2.conv.bias: Tensor[(192), float32], %model.6.m.5.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.6.m.5.cv1.conv.bias: Tensor[(192), float32], %model.6.m.5.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.6.m.5.cv2.conv.bias: Tensor[(192), float32], %model.7.conv.weight: Tensor[(576, 384, 3, 3), float32], %model.7.conv.bias: Tensor[(576), float32], %model.8.cv1.conv.weight: Tensor[(288, 576, 1, 1), float32], %model.8.cv1.conv.bias: Tensor[(288), float32], %model.8.cv2.conv.weight: Tensor[(288, 576, 1, 1), float32], %model.8.cv2.conv.bias: Tensor[(288), float32], %model.8.cv3.conv.weight: Tensor[(576, 576, 1, 1), float32], %model.8.cv3.conv.bias: Tensor[(576), float32], %model.8.m.0.cv1.conv.weight: Tensor[(288, 288, 1, 1), float32], %model.8.m.0.cv1.conv.bias: Tensor[(288), float32], %model.8.m.0.cv2.conv.weight: Tensor[(288, 288, 3, 3), float32], %model.8.m.0.cv2.conv.bias: Tensor[(288), float32], %model.8.m.1.cv1.conv.weight: Tensor[(288, 288, 1, 1), float32], %model.8.m.1.cv1.conv.bias: Tensor[(288), float32], %model.8.m.1.cv2.conv.weight: Tensor[(288, 288, 3, 3), float32], %model.8.m.1.cv2.conv.bias: Tensor[(288), float32], %model.9.conv.weight: Tensor[(768, 576, 3, 3), float32], %model.9.conv.bias: Tensor[(768), float32], %model.10.cv1.conv.weight: Tensor[(384, 768, 1, 1), float32], %model.10.cv1.conv.bias: Tensor[(384), float32], %model.10.cv2.conv.weight: Tensor[(384, 768, 1, 1), float32], %model.10.cv2.conv.bias: Tensor[(384), float32], %model.10.cv3.conv.weight: Tensor[(768, 768, 1, 1), float32], %model.10.cv3.conv.bias: Tensor[(768), float32], %model.10.m.0.cv1.conv.weight: Tensor[(384, 384, 1, 1), float32], %model.10.m.0.cv1.conv.bias: Tensor[(384), float32], %model.10.m.0.cv2.conv.weight: Tensor[(384, 384, 3, 3), float32], %model.10.m.0.cv2.conv.bias: Tensor[(384), float32], %model.10.m.1.cv1.conv.weight: Tensor[(384, 384, 1, 1), float32], %model.10.m.1.cv1.conv.bias: Tensor[(384), float32], %model.10.m.1.cv2.conv.weight: Tensor[(384, 384, 3, 3), float32], %model.10.m.1.cv2.conv.bias: Tensor[(384), float32], %model.11.cv1.conv.weight: Tensor[(384, 768, 1, 1), float32], %model.11.cv1.conv.bias: Tensor[(384), float32], %model.11.cv2.conv.weight: Tensor[(768, 1536, 1, 1), float32], %model.11.cv2.conv.bias: Tensor[(768), float32], %model.12.conv.weight: Tensor[(576, 768, 1, 1), float32], %model.12.conv.bias: Tensor[(576), float32], %model.15.cv1.conv.weight: Tensor[(288, 1152, 1, 1), float32], %model.15.cv1.conv.bias: Tensor[(288), float32], %model.15.cv2.conv.weight: Tensor[(288, 1152, 1, 1), float32], %model.15.cv2.conv.bias: Tensor[(288), float32], %model.15.cv3.conv.weight: Tensor[(576, 576, 1, 1), float32], %model.15.cv3.conv.bias: Tensor[(576), float32], %model.15.m.0.cv1.conv.weight: Tensor[(288, 288, 1, 1), float32], %model.15.m.0.cv1.conv.bias: Tensor[(288), float32], %model.15.m.0.cv2.conv.weight: Tensor[(288, 288, 3, 3), float32], %model.15.m.0.cv2.conv.bias: Tensor[(288), float32], %model.15.m.1.cv1.conv.weight: Tensor[(288, 288, 1, 1), float32], %model.15.m.1.cv1.conv.bias: Tensor[(288), float32], %model.15.m.1.cv2.conv.weight: Tensor[(288, 288, 3, 3), float32], %model.15.m.1.cv2.conv.bias: Tensor[(288), float32], %model.16.conv.weight: Tensor[(384, 576, 1, 1), float32], %model.16.conv.bias: Tensor[(384), float32], %model.19.cv1.conv.weight: Tensor[(192, 768, 1, 1), float32], %model.19.cv1.conv.bias: Tensor[(192), float32], %model.19.cv2.conv.weight: Tensor[(192, 768, 1, 1), float32], %model.19.cv2.conv.bias: Tensor[(192), float32], %model.19.cv3.conv.weight: Tensor[(384, 384, 1, 1), float32], %model.19.cv3.conv.bias: Tensor[(384), float32], %model.19.m.0.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.19.m.0.cv1.conv.bias: Tensor[(192), float32], %model.19.m.0.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.19.m.0.cv2.conv.bias: Tensor[(192), float32], %model.19.m.1.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.19.m.1.cv1.conv.bias: Tensor[(192), float32], %model.19.m.1.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.19.m.1.cv2.conv.bias: Tensor[(192), float32], %model.20.conv.weight: Tensor[(192, 384, 1, 1), float32], %model.20.conv.bias: Tensor[(192), float32], %model.23.cv1.conv.weight: Tensor[(96, 384, 1, 1), float32], %model.23.cv1.conv.bias: Tensor[(96), float32], %model.23.cv2.conv.weight: Tensor[(96, 384, 1, 1), float32], %model.23.cv2.conv.bias: Tensor[(96), float32], %model.23.cv3.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.23.cv3.conv.bias: Tensor[(192), float32], %model.23.m.0.cv1.conv.weight: Tensor[(96, 96, 1, 1), float32], %model.23.m.0.cv1.conv.bias: Tensor[(96), float32], %model.23.m.0.cv2.conv.weight: Tensor[(96, 96, 3, 3), float32], %model.23.m.0.cv2.conv.bias: Tensor[(96), float32], %model.23.m.1.cv1.conv.weight: Tensor[(96, 96, 1, 1), float32], %model.23.m.1.cv1.conv.bias: Tensor[(96), float32], %model.23.m.1.cv2.conv.weight: Tensor[(96, 96, 3, 3), float32], %model.23.m.1.cv2.conv.bias: Tensor[(96), float32], %model.24.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.24.conv.bias: Tensor[(192), float32], %model.26.cv1.conv.weight: Tensor[(192, 384, 1, 1), float32], %model.26.cv1.conv.bias: Tensor[(192), float32], %model.26.cv2.conv.weight: Tensor[(192, 384, 1, 1), float32], %model.26.cv2.conv.bias: Tensor[(192), float32], %model.26.cv3.conv.weight: Tensor[(384, 384, 1, 1), float32], %model.26.cv3.conv.bias: Tensor[(384), float32], %model.26.m.0.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.26.m.0.cv1.conv.bias: Tensor[(192), float32], %model.26.m.0.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.26.m.0.cv2.conv.bias: Tensor[(192), float32], %model.26.m.1.cv1.conv.weight: Tensor[(192, 192, 1, 1), float32], %model.26.m.1.cv1.conv.bias: Tensor[(192), float32], %model.26.m.1.cv2.conv.weight: Tensor[(192, 192, 3, 3), float32], %model.26.m.1.cv2.conv.bias: Tensor[(192), float32], %model.27.conv.weight: Tensor[(384, 384, 3, 3), float32], %model.27.conv.bias: Tensor[(384), float32], %model.29.cv1.conv.weight: Tensor[(288, 768, 1, 1), float32], %model.29.cv1.conv.bias: Tensor[(288), float32], %model.29.cv2.conv.weight: Tensor[(288, 768, 1, 1), float32], %model.29.cv2.conv.bias: Tensor[(288), float32], %model.29.cv3.conv.weight: Tensor[(576, 576, 1, 1), float32], %model.29.cv3.conv.bias: Tensor[(576), float32], %model.29.m.0.cv1.conv.weight: Tensor[(288, 288, 1, 1), float32], %model.29.m.0.cv1.conv.bias: Tensor[(288), float32], %model.29.m.0.cv2.conv.weight: Tensor[(288, 288, 3, 3), float32], %model.29.m.0.cv2.conv.bias: Tensor[(288), float32], %model.29.m.1.cv1.conv.weight: Tensor[(288, 288, 1, 1), float32], %model.29.m.1.cv1.conv.bias: Tensor[(288), float32], %model.29.m.1.cv2.conv.weight: Tensor[(288, 288, 3, 3), float32], %model.29.m.1.cv2.conv.bias: Tensor[(288), float32], %model.30.conv.weight: Tensor[(576, 576, 3, 3), float32], %model.30.conv.bias: Tensor[(576), float32], %model.32.cv1.conv.weight: Tensor[(384, 1152, 1, 1), float32], %model.32.cv1.conv.bias: Tensor[(384), float32], %model.32.cv2.conv.weight: Tensor[(384, 1152, 1, 1), float32], %model.32.cv2.conv.bias: Tensor[(384), float32], %model.32.cv3.conv.weight: Tensor[(768, 768, 1, 1), float32], %model.32.cv3.conv.bias: Tensor[(768), float32], %model.32.m.0.cv1.conv.weight: Tensor[(384, 384, 1, 1), float32], %model.32.m.0.cv1.conv.bias: Tensor[(384), float32], %model.32.m.0.cv2.conv.weight: Tensor[(384, 384, 3, 3), float32], %model.32.m.0.cv2.conv.bias: Tensor[(384), float32], %model.32.m.1.cv1.conv.weight: Tensor[(384, 384, 1, 1), float32], %model.32.m.1.cv1.conv.bias: Tensor[(384), float32], %model.32.m.1.cv2.conv.weight: Tensor[(384, 384, 3, 3), float32], %model.32.m.1.cv2.conv.bias: Tensor[(384), float32], %model.33.m.0.weight: Tensor[(255, 192, 1, 1), float32], %model.33.m.0.bias: Tensor[(255), float32], %model.33.m.1.weight: Tensor[(255, 384, 1, 1), float32], %model.33.m.1.bias: Tensor[(255), float32], %model.33.m.2.weight: Tensor[(255, 576, 1, 1), float32], %model.33.m.2.bias: Tensor[(255), float32], %model.33.m.3.weight: Tensor[(255, 768, 1, 1), float32], %model.33.m.3.bias: Tensor[(255), float32], %onnx::Resize_730: Tensor[(4), float32], %onnx::Resize_731: Tensor[(4), float32], %onnx::Resize_732: Tensor[(4), float32]) -> Tensor[(1, 25500, 85), float32] {
  %0 = nn.conv2d(%images, %model.0.conv.weight, strides=[2, 2], padding=[2, 2, 2, 2], channels=48, kernel_size=[6, 6]) /* ty=Tensor[(1, 48, 320, 320), float32] */;
  %1 = nn.bias_add(%0, %model.0.conv.bias) /* ty=Tensor[(1, 48, 320, 320), float32] */;
  %2 = sigmoid(%1) /* ty=Tensor[(1, 48, 320, 320), float32] */;
  %3 = multiply(%1, %2) /* ty=Tensor[(1, 48, 320, 320), float32] */;
  %4 = nn.conv2d(%3, %model.1.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %5 = nn.bias_add(%4, %model.1.conv.bias) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %6 = sigmoid(%5) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %7 = multiply(%5, %6) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %8 = nn.conv2d(%7, %model.2.cv1.conv.weight, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %9 = nn.bias_add(%8, %model.2.cv1.conv.bias) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %10 = sigmoid(%9) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %11 = multiply(%9, %10) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %12 = nn.conv2d(%11, %model.2.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %13 = nn.bias_add(%12, %model.2.m.0.cv1.conv.bias) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %14 = sigmoid(%13) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %15 = multiply(%13, %14) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %16 = nn.conv2d(%15, %model.2.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %17 = nn.bias_add(%16, %model.2.m.0.cv2.conv.bias) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %18 = sigmoid(%17) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %19 = multiply(%17, %18) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %20 = add(%11, %19) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %21 = nn.conv2d(%20, %model.2.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %22 = nn.bias_add(%21, %model.2.m.1.cv1.conv.bias) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %23 = sigmoid(%22) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %24 = multiply(%22, %23) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %25 = nn.conv2d(%24, %model.2.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=48, kernel_size=[3, 3]) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %26 = nn.bias_add(%25, %model.2.m.1.cv2.conv.bias) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %27 = sigmoid(%26) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %28 = multiply(%26, %27) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %29 = nn.conv2d(%7, %model.2.cv2.conv.weight, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1]) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %30 = nn.bias_add(%29, %model.2.cv2.conv.bias) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %31 = sigmoid(%30) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %32 = add(%20, %28) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %33 = multiply(%30, %31) /* ty=Tensor[(1, 48, 160, 160), float32] */;
  %34 = (%32, %33);
  %35 = concatenate(%34, axis=1) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %36 = nn.conv2d(%35, %model.2.cv3.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %37 = nn.bias_add(%36, %model.2.cv3.conv.bias) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %38 = sigmoid(%37) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %39 = multiply(%37, %38) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %40 = nn.conv2d(%39, %model.3.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %41 = nn.bias_add(%40, %model.3.conv.bias) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %42 = sigmoid(%41) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %43 = multiply(%41, %42) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %44 = nn.conv2d(%43, %model.4.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %45 = nn.bias_add(%44, %model.4.cv1.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %46 = sigmoid(%45) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %47 = multiply(%45, %46) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %48 = nn.conv2d(%47, %model.4.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %49 = nn.bias_add(%48, %model.4.m.0.cv1.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %50 = sigmoid(%49) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %51 = multiply(%49, %50) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %52 = nn.conv2d(%51, %model.4.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %53 = nn.bias_add(%52, %model.4.m.0.cv2.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %54 = sigmoid(%53) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %55 = multiply(%53, %54) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %56 = add(%47, %55) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %57 = nn.conv2d(%56, %model.4.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %58 = nn.bias_add(%57, %model.4.m.1.cv1.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %59 = sigmoid(%58) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %60 = multiply(%58, %59) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %61 = nn.conv2d(%60, %model.4.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %62 = nn.bias_add(%61, %model.4.m.1.cv2.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %63 = sigmoid(%62) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %64 = multiply(%62, %63) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %65 = add(%56, %64) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %66 = nn.conv2d(%65, %model.4.m.2.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %67 = nn.bias_add(%66, %model.4.m.2.cv1.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %68 = sigmoid(%67) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %69 = multiply(%67, %68) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %70 = nn.conv2d(%69, %model.4.m.2.cv2.conv.weight, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %71 = nn.bias_add(%70, %model.4.m.2.cv2.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %72 = sigmoid(%71) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %73 = multiply(%71, %72) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %74 = add(%65, %73) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %75 = nn.conv2d(%74, %model.4.m.3.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %76 = nn.bias_add(%75, %model.4.m.3.cv1.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %77 = sigmoid(%76) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %78 = multiply(%76, %77) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %79 = nn.conv2d(%78, %model.4.m.3.cv2.conv.weight, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %80 = nn.bias_add(%79, %model.4.m.3.cv2.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %81 = sigmoid(%80) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %82 = multiply(%80, %81) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %83 = nn.conv2d(%43, %model.4.cv2.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %84 = nn.bias_add(%83, %model.4.cv2.conv.bias) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %85 = sigmoid(%84) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %86 = add(%74, %82) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %87 = multiply(%84, %85) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %88 = (%86, %87);
  %89 = concatenate(%88, axis=1) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %90 = nn.conv2d(%89, %model.4.cv3.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %91 = nn.bias_add(%90, %model.4.cv3.conv.bias) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %92 = sigmoid(%91) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %93 = multiply(%91, %92) /* ty=Tensor[(1, 192, 80, 80), float32] */;
  %94 = nn.conv2d(%93, %model.5.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %95 = nn.bias_add(%94, %model.5.conv.bias) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %96 = sigmoid(%95) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %97 = multiply(%95, %96) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %98 = nn.conv2d(%97, %model.6.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %99 = nn.bias_add(%98, %model.6.cv1.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %100 = sigmoid(%99) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %101 = multiply(%99, %100) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %102 = nn.conv2d(%101, %model.6.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %103 = nn.bias_add(%102, %model.6.m.0.cv1.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %104 = sigmoid(%103) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %105 = multiply(%103, %104) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %106 = nn.conv2d(%105, %model.6.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %107 = nn.bias_add(%106, %model.6.m.0.cv2.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %108 = sigmoid(%107) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %109 = multiply(%107, %108) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %110 = add(%101, %109) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %111 = nn.conv2d(%110, %model.6.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %112 = nn.bias_add(%111, %model.6.m.1.cv1.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %113 = sigmoid(%112) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %114 = multiply(%112, %113) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %115 = nn.conv2d(%114, %model.6.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %116 = nn.bias_add(%115, %model.6.m.1.cv2.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %117 = sigmoid(%116) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %118 = multiply(%116, %117) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %119 = add(%110, %118) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %120 = nn.conv2d(%119, %model.6.m.2.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %121 = nn.bias_add(%120, %model.6.m.2.cv1.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %122 = sigmoid(%121) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %123 = multiply(%121, %122) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %124 = nn.conv2d(%123, %model.6.m.2.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %125 = nn.bias_add(%124, %model.6.m.2.cv2.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %126 = sigmoid(%125) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %127 = multiply(%125, %126) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %128 = add(%119, %127) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %129 = nn.conv2d(%128, %model.6.m.3.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %130 = nn.bias_add(%129, %model.6.m.3.cv1.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %131 = sigmoid(%130) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %132 = multiply(%130, %131) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %133 = nn.conv2d(%132, %model.6.m.3.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %134 = nn.bias_add(%133, %model.6.m.3.cv2.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %135 = sigmoid(%134) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %136 = multiply(%134, %135) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %137 = add(%128, %136) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %138 = nn.conv2d(%137, %model.6.m.4.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %139 = nn.bias_add(%138, %model.6.m.4.cv1.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %140 = sigmoid(%139) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %141 = multiply(%139, %140) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %142 = nn.conv2d(%141, %model.6.m.4.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %143 = nn.bias_add(%142, %model.6.m.4.cv2.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %144 = sigmoid(%143) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %145 = multiply(%143, %144) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %146 = add(%137, %145) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %147 = nn.conv2d(%146, %model.6.m.5.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %148 = nn.bias_add(%147, %model.6.m.5.cv1.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %149 = sigmoid(%148) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %150 = multiply(%148, %149) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %151 = nn.conv2d(%150, %model.6.m.5.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %152 = nn.bias_add(%151, %model.6.m.5.cv2.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %153 = sigmoid(%152) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %154 = multiply(%152, %153) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %155 = nn.conv2d(%97, %model.6.cv2.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %156 = nn.bias_add(%155, %model.6.cv2.conv.bias) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %157 = sigmoid(%156) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %158 = add(%146, %154) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %159 = multiply(%156, %157) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %160 = (%158, %159);
  %161 = concatenate(%160, axis=1) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %162 = nn.conv2d(%161, %model.6.cv3.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %163 = nn.bias_add(%162, %model.6.cv3.conv.bias) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %164 = sigmoid(%163) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %165 = multiply(%163, %164) /* ty=Tensor[(1, 384, 40, 40), float32] */;
  %166 = nn.conv2d(%165, %model.7.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %167 = nn.bias_add(%166, %model.7.conv.bias) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %168 = sigmoid(%167) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %169 = multiply(%167, %168) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %170 = nn.conv2d(%169, %model.8.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %171 = nn.bias_add(%170, %model.8.cv1.conv.bias) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %172 = sigmoid(%171) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %173 = multiply(%171, %172) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %174 = nn.conv2d(%173, %model.8.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %175 = nn.bias_add(%174, %model.8.m.0.cv1.conv.bias) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %176 = sigmoid(%175) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %177 = multiply(%175, %176) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %178 = nn.conv2d(%177, %model.8.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %179 = nn.bias_add(%178, %model.8.m.0.cv2.conv.bias) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %180 = sigmoid(%179) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %181 = multiply(%179, %180) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %182 = add(%173, %181) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %183 = nn.conv2d(%182, %model.8.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %184 = nn.bias_add(%183, %model.8.m.1.cv1.conv.bias) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %185 = sigmoid(%184) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %186 = multiply(%184, %185) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %187 = nn.conv2d(%186, %model.8.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %188 = nn.bias_add(%187, %model.8.m.1.cv2.conv.bias) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %189 = sigmoid(%188) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %190 = multiply(%188, %189) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %191 = nn.conv2d(%169, %model.8.cv2.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %192 = nn.bias_add(%191, %model.8.cv2.conv.bias) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %193 = sigmoid(%192) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %194 = add(%182, %190) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %195 = multiply(%192, %193) /* ty=Tensor[(1, 288, 20, 20), float32] */;
  %196 = (%194, %195);
  %197 = concatenate(%196, axis=1) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %198 = nn.conv2d(%197, %model.8.cv3.conv.weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %199 = nn.bias_add(%198, %model.8.cv3.conv.bias) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %200 = sigmoid(%199) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %201 = multiply(%199, %200) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %202 = nn.conv2d(%201, %model.9.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=768, kernel_size=[3, 3]) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %203 = nn.bias_add(%202, %model.9.conv.bias) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %204 = sigmoid(%203) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %205 = multiply(%203, %204) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %206 = nn.conv2d(%205, %model.10.cv1.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %207 = nn.bias_add(%206, %model.10.cv1.conv.bias) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %208 = sigmoid(%207) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %209 = multiply(%207, %208) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %210 = nn.conv2d(%209, %model.10.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %211 = nn.bias_add(%210, %model.10.m.0.cv1.conv.bias) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %212 = sigmoid(%211) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %213 = multiply(%211, %212) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %214 = nn.conv2d(%213, %model.10.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %215 = nn.bias_add(%214, %model.10.m.0.cv2.conv.bias) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %216 = sigmoid(%215) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %217 = multiply(%215, %216) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %218 = add(%209, %217) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %219 = nn.conv2d(%218, %model.10.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %220 = nn.bias_add(%219, %model.10.m.1.cv1.conv.bias) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %221 = sigmoid(%220) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %222 = multiply(%220, %221) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %223 = nn.conv2d(%222, %model.10.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %224 = nn.bias_add(%223, %model.10.m.1.cv2.conv.bias) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %225 = sigmoid(%224) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %226 = multiply(%224, %225) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %227 = nn.conv2d(%205, %model.10.cv2.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %228 = nn.bias_add(%227, %model.10.cv2.conv.bias) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %229 = sigmoid(%228) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %230 = add(%218, %226) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %231 = multiply(%228, %229) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %232 = (%230, %231);
  %233 = concatenate(%232, axis=1) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %234 = nn.conv2d(%233, %model.10.cv3.conv.weight, padding=[0, 0, 0, 0], channels=768, kernel_size=[1, 1]) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %235 = nn.bias_add(%234, %model.10.cv3.conv.bias) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %236 = sigmoid(%235) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %237 = multiply(%235, %236) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %238 = nn.conv2d(%237, %model.11.cv1.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %239 = nn.bias_add(%238, %model.11.cv1.conv.bias) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %240 = sigmoid(%239) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %241 = multiply(%239, %240) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %242 = nn.max_pool2d(%241, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %243 = nn.max_pool2d(%242, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %244 = nn.max_pool2d(%243, pool_size=[5, 5], padding=[2, 2, 2, 2]) /* ty=Tensor[(1, 384, 10, 10), float32] */;
  %245 = (%241, %242, %243, %244);
  %246 = concatenate(%245, axis=1) /* ty=Tensor[(1, 1536, 10, 10), float32] */;
  %247 = nn.conv2d(%246, %model.11.cv2.conv.weight, padding=[0, 0, 0, 0], channels=768, kernel_size=[1, 1]) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %248 = nn.bias_add(%247, %model.11.cv2.conv.bias) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %249 = sigmoid(%248) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %250 = multiply(%248, %249) /* ty=Tensor[(1, 768, 10, 10), float32] */;
  %251 = nn.conv2d(%250, %model.12.conv.weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %252 = nn.bias_add(%251, %model.12.conv.bias) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %253 = sigmoid(%252) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %254 = multiply(meta[relay.Constant][0] /* ty=Tensor[(4), float32] */, %onnx::Resize_730) /* ty=Tensor[(4), float32] */;
  %255 = multiply(%252, %253) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %256 = strided_slice(%254, begin=[2], end=[4], strides=[1], axes=None) /* ty=Tensor[(2), float32] */;
  %257 = dyn.image.resize2d(%255, %256, size=[], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %258 = (%257, %201);
  %259 = concatenate(%258, axis=1) /* ty=Tensor[(1, 1152, ?, ?), float32] */;
  %260 = nn.conv2d(%259, %model.15.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %261 = nn.bias_add(%260, %model.15.cv1.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %262 = sigmoid(%261) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %263 = multiply(%261, %262) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %264 = nn.conv2d(%263, %model.15.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %265 = nn.bias_add(%264, %model.15.m.0.cv1.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %266 = sigmoid(%265) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %267 = multiply(%265, %266) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %268 = nn.conv2d(%267, %model.15.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %269 = nn.bias_add(%268, %model.15.m.0.cv2.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %270 = sigmoid(%269) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %271 = multiply(%269, %270) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %272 = nn.conv2d(%271, %model.15.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %273 = nn.bias_add(%272, %model.15.m.1.cv1.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %274 = sigmoid(%273) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %275 = multiply(%273, %274) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %276 = nn.conv2d(%275, %model.15.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %277 = nn.bias_add(%276, %model.15.m.1.cv2.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %278 = sigmoid(%277) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %279 = nn.conv2d(%259, %model.15.cv2.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %280 = nn.bias_add(%279, %model.15.cv2.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %281 = sigmoid(%280) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %282 = multiply(%277, %278) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %283 = multiply(%280, %281) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %284 = (%282, %283);
  %285 = concatenate(%284, axis=1) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %286 = nn.conv2d(%285, %model.15.cv3.conv.weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %287 = nn.bias_add(%286, %model.15.cv3.conv.bias) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %288 = sigmoid(%287) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %289 = multiply(%287, %288) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %290 = nn.conv2d(%289, %model.16.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %291 = nn.bias_add(%290, %model.16.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %292 = sigmoid(%291) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %293 = multiply(%291, %292) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %294 = shape_of(%293, dtype="int64") /* ty=Tensor[(4), int64] */;
  %295 = cast(%294, dtype="float32") /* ty=Tensor[(4), float32] */;
  %296 = multiply(%295, %onnx::Resize_731) /* ty=Tensor[(4), float32] */;
  %297 = strided_slice(%296, begin=[2], end=[4], strides=[1], axes=None) /* ty=Tensor[(2), float32] */;
  %298 = dyn.image.resize2d(%293, %297, size=[], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %299 = (%298, %165);
  %300 = concatenate(%299, axis=1) /* ty=Tensor[(1, 768, ?, ?), float32] */;
  %301 = nn.conv2d(%300, %model.19.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %302 = nn.bias_add(%301, %model.19.cv1.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %303 = sigmoid(%302) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %304 = multiply(%302, %303) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %305 = nn.conv2d(%304, %model.19.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %306 = nn.bias_add(%305, %model.19.m.0.cv1.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %307 = sigmoid(%306) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %308 = multiply(%306, %307) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %309 = nn.conv2d(%308, %model.19.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %310 = nn.bias_add(%309, %model.19.m.0.cv2.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %311 = sigmoid(%310) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %312 = multiply(%310, %311) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %313 = nn.conv2d(%312, %model.19.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %314 = nn.bias_add(%313, %model.19.m.1.cv1.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %315 = sigmoid(%314) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %316 = multiply(%314, %315) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %317 = nn.conv2d(%316, %model.19.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %318 = nn.bias_add(%317, %model.19.m.1.cv2.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %319 = sigmoid(%318) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %320 = nn.conv2d(%300, %model.19.cv2.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %321 = nn.bias_add(%320, %model.19.cv2.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %322 = sigmoid(%321) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %323 = multiply(%318, %319) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %324 = multiply(%321, %322) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %325 = (%323, %324);
  %326 = concatenate(%325, axis=1) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %327 = nn.conv2d(%326, %model.19.cv3.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %328 = nn.bias_add(%327, %model.19.cv3.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %329 = sigmoid(%328) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %330 = multiply(%328, %329) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %331 = nn.conv2d(%330, %model.20.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %332 = nn.bias_add(%331, %model.20.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %333 = sigmoid(%332) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %334 = multiply(%332, %333) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %335 = shape_of(%334, dtype="int64") /* ty=Tensor[(4), int64] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(4), float32] */;
  %337 = multiply(%336, %onnx::Resize_732) /* ty=Tensor[(4), float32] */;
  %338 = strided_slice(%337, begin=[2], end=[4], strides=[1], axes=None) /* ty=Tensor[(2), float32] */;
  %339 = dyn.image.resize2d(%334, %338, size=[], method="nearest_neighbor", coordinate_transformation_mode="asymmetric", rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %340 = (%339, %93);
  %341 = concatenate(%340, axis=1) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %342 = nn.conv2d(%341, %model.23.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %343 = nn.bias_add(%342, %model.23.cv1.conv.bias) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %344 = sigmoid(%343) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %345 = multiply(%343, %344) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %346 = nn.conv2d(%345, %model.23.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %347 = nn.bias_add(%346, %model.23.m.0.cv1.conv.bias) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %348 = sigmoid(%347) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %349 = multiply(%347, %348) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %350 = nn.conv2d(%349, %model.23.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %351 = nn.bias_add(%350, %model.23.m.0.cv2.conv.bias) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %352 = sigmoid(%351) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %353 = multiply(%351, %352) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %354 = nn.conv2d(%353, %model.23.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %355 = nn.bias_add(%354, %model.23.m.1.cv1.conv.bias) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %356 = sigmoid(%355) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %357 = multiply(%355, %356) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %358 = nn.conv2d(%357, %model.23.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %359 = nn.bias_add(%358, %model.23.m.1.cv2.conv.bias) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %360 = sigmoid(%359) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %361 = nn.conv2d(%341, %model.23.cv2.conv.weight, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %362 = nn.bias_add(%361, %model.23.cv2.conv.bias) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %363 = sigmoid(%362) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %364 = multiply(%359, %360) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %365 = multiply(%362, %363) /* ty=Tensor[(1, 96, ?, ?), float32] */;
  %366 = (%364, %365);
  %367 = concatenate(%366, axis=1) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %368 = nn.conv2d(%367, %model.23.cv3.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %369 = nn.bias_add(%368, %model.23.cv3.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %370 = sigmoid(%369) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %371 = multiply(%369, %370) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %372 = nn.conv2d(%371, %model.33.m.0.weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %373 = nn.bias_add(%372, %model.33.m.0.bias) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %374 = reshape(%373, newshape=[1, 3, 85, 80, 80]) /* ty=Tensor[(1, 3, 85, 80, 80), float32] */;
  %375 = transpose(%374, axes=[0, 1, 3, 4, 2]) /* ty=Tensor[(1, 3, 80, 80, 85), float32] */;
  %376 = sigmoid(%375) /* ty=Tensor[(1, 3, 80, 80, 85), float32] */;
  %377 = split(%376, indices_or_sections=[2, 4], axis=4) /* ty=(Tensor[(1, 3, 80, 80, 2), float32], Tensor[(1, 3, 80, 80, 2), float32], Tensor[(1, 3, 80, 80, 81), float32]) */;
  %378 = %377.0;
  %379 = multiply(%378, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 80, 80, 2), float32] */;
  %380 = add(%379, meta[relay.Constant][1] /* ty=Tensor[(1, 3, 80, 80, 2), float32] */) /* ty=Tensor[(1, 3, 80, 80, 2), float32] */;
  %381 = %377.1;
  %382 = multiply(%381, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 80, 80, 2), float32] */;
  %383 = power(%382, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 80, 80, 2), float32] */;
  %384 = multiply(%380, 8f /* ty=float32 */) /* ty=Tensor[(1, 3, 80, 80, 2), float32] */;
  %385 = multiply(%383, meta[relay.Constant][2] /* ty=Tensor[(1, 3, 80, 80, 2), float32] */) /* ty=Tensor[(1, 3, 80, 80, 2), float32] */;
  %386 = %377.2;
  %387 = (%384, %385, %386);
  %388 = concatenate(%387, axis=4) /* ty=Tensor[(1, 3, 80, 80, 85), float32] */;
  %389 = nn.conv2d(%371, %model.24.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %390 = nn.bias_add(%389, %model.24.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %391 = sigmoid(%390) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %392 = multiply(%390, %391) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %393 = (%392, %334);
  %394 = concatenate(%393, axis=1) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %395 = nn.conv2d(%394, %model.26.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %396 = nn.bias_add(%395, %model.26.cv1.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %397 = sigmoid(%396) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %398 = multiply(%396, %397) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %399 = nn.conv2d(%398, %model.26.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %400 = nn.bias_add(%399, %model.26.m.0.cv1.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %401 = sigmoid(%400) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %402 = multiply(%400, %401) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %403 = nn.conv2d(%402, %model.26.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %404 = nn.bias_add(%403, %model.26.m.0.cv2.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %405 = sigmoid(%404) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %406 = multiply(%404, %405) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %407 = nn.conv2d(%406, %model.26.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %408 = nn.bias_add(%407, %model.26.m.1.cv1.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %409 = sigmoid(%408) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %410 = multiply(%408, %409) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %411 = nn.conv2d(%410, %model.26.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %412 = nn.bias_add(%411, %model.26.m.1.cv2.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %413 = sigmoid(%412) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %414 = nn.conv2d(%394, %model.26.cv2.conv.weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %415 = nn.bias_add(%414, %model.26.cv2.conv.bias) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %416 = sigmoid(%415) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %417 = multiply(%412, %413) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %418 = multiply(%415, %416) /* ty=Tensor[(1, 192, ?, ?), float32] */;
  %419 = (%417, %418);
  %420 = concatenate(%419, axis=1) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %421 = nn.conv2d(%420, %model.26.cv3.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %422 = nn.bias_add(%421, %model.26.cv3.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %423 = sigmoid(%422) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %424 = multiply(%422, %423) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %425 = nn.conv2d(%424, %model.33.m.1.weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %426 = nn.bias_add(%425, %model.33.m.1.bias) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %427 = reshape(%426, newshape=[1, 3, 85, 40, 40]) /* ty=Tensor[(1, 3, 85, 40, 40), float32] */;
  %428 = transpose(%427, axes=[0, 1, 3, 4, 2]) /* ty=Tensor[(1, 3, 40, 40, 85), float32] */;
  %429 = sigmoid(%428) /* ty=Tensor[(1, 3, 40, 40, 85), float32] */;
  %430 = split(%429, indices_or_sections=[2, 4], axis=4) /* ty=(Tensor[(1, 3, 40, 40, 2), float32], Tensor[(1, 3, 40, 40, 2), float32], Tensor[(1, 3, 40, 40, 81), float32]) */;
  %431 = %430.0;
  %432 = multiply(%431, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 40, 40, 2), float32] */;
  %433 = add(%432, meta[relay.Constant][3] /* ty=Tensor[(1, 3, 40, 40, 2), float32] */) /* ty=Tensor[(1, 3, 40, 40, 2), float32] */;
  %434 = %430.1;
  %435 = multiply(%434, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 40, 40, 2), float32] */;
  %436 = power(%435, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 40, 40, 2), float32] */;
  %437 = multiply(%433, 16f /* ty=float32 */) /* ty=Tensor[(1, 3, 40, 40, 2), float32] */;
  %438 = multiply(%436, meta[relay.Constant][4] /* ty=Tensor[(1, 3, 40, 40, 2), float32] */) /* ty=Tensor[(1, 3, 40, 40, 2), float32] */;
  %439 = %430.2;
  %440 = (%437, %438, %439);
  %441 = concatenate(%440, axis=4) /* ty=Tensor[(1, 3, 40, 40, 85), float32] */;
  %442 = nn.conv2d(%424, %model.27.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %443 = nn.bias_add(%442, %model.27.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %444 = sigmoid(%443) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %445 = multiply(%443, %444) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %446 = (%445, %293);
  %447 = concatenate(%446, axis=1) /* ty=Tensor[(1, 768, ?, ?), float32] */;
  %448 = nn.conv2d(%447, %model.29.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %449 = nn.bias_add(%448, %model.29.cv1.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %450 = sigmoid(%449) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %451 = multiply(%449, %450) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %452 = nn.conv2d(%451, %model.29.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %453 = nn.bias_add(%452, %model.29.m.0.cv1.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %454 = sigmoid(%453) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %455 = multiply(%453, %454) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %456 = nn.conv2d(%455, %model.29.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %457 = nn.bias_add(%456, %model.29.m.0.cv2.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %458 = sigmoid(%457) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %459 = multiply(%457, %458) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %460 = nn.conv2d(%459, %model.29.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %461 = nn.bias_add(%460, %model.29.m.1.cv1.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %462 = sigmoid(%461) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %463 = multiply(%461, %462) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %464 = nn.conv2d(%463, %model.29.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=288, kernel_size=[3, 3]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %465 = nn.bias_add(%464, %model.29.m.1.cv2.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %466 = sigmoid(%465) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %467 = nn.conv2d(%447, %model.29.cv2.conv.weight, padding=[0, 0, 0, 0], channels=288, kernel_size=[1, 1]) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %468 = nn.bias_add(%467, %model.29.cv2.conv.bias) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %469 = sigmoid(%468) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %470 = multiply(%465, %466) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %471 = multiply(%468, %469) /* ty=Tensor[(1, 288, ?, ?), float32] */;
  %472 = (%470, %471);
  %473 = concatenate(%472, axis=1) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %474 = nn.conv2d(%473, %model.29.cv3.conv.weight, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %475 = nn.bias_add(%474, %model.29.cv3.conv.bias) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %476 = sigmoid(%475) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %477 = multiply(%475, %476) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %478 = nn.conv2d(%477, %model.33.m.2.weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %479 = nn.bias_add(%478, %model.33.m.2.bias) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %480 = reshape(%479, newshape=[1, 3, 85, 20, 20]) /* ty=Tensor[(1, 3, 85, 20, 20), float32] */;
  %481 = transpose(%480, axes=[0, 1, 3, 4, 2]) /* ty=Tensor[(1, 3, 20, 20, 85), float32] */;
  %482 = sigmoid(%481) /* ty=Tensor[(1, 3, 20, 20, 85), float32] */;
  %483 = split(%482, indices_or_sections=[2, 4], axis=4) /* ty=(Tensor[(1, 3, 20, 20, 2), float32], Tensor[(1, 3, 20, 20, 2), float32], Tensor[(1, 3, 20, 20, 81), float32]) */;
  %484 = %483.0;
  %485 = multiply(%484, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 20, 20, 2), float32] */;
  %486 = add(%485, meta[relay.Constant][5] /* ty=Tensor[(1, 3, 20, 20, 2), float32] */) /* ty=Tensor[(1, 3, 20, 20, 2), float32] */;
  %487 = %483.1;
  %488 = multiply(%487, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 20, 20, 2), float32] */;
  %489 = power(%488, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 20, 20, 2), float32] */;
  %490 = multiply(%486, 32f /* ty=float32 */) /* ty=Tensor[(1, 3, 20, 20, 2), float32] */;
  %491 = multiply(%489, meta[relay.Constant][6] /* ty=Tensor[(1, 3, 20, 20, 2), float32] */) /* ty=Tensor[(1, 3, 20, 20, 2), float32] */;
  %492 = %483.2;
  %493 = (%490, %491, %492);
  %494 = concatenate(%493, axis=4) /* ty=Tensor[(1, 3, 20, 20, 85), float32] */;
  %495 = nn.conv2d(%477, %model.30.conv.weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %496 = nn.bias_add(%495, %model.30.conv.bias) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %497 = sigmoid(%496) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %498 = multiply(%496, %497) /* ty=Tensor[(1, 576, ?, ?), float32] */;
  %499 = (%498, %255);
  %500 = concatenate(%499, axis=1) /* ty=Tensor[(1, 1152, ?, ?), float32] */;
  %501 = nn.conv2d(%500, %model.32.cv1.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %502 = nn.bias_add(%501, %model.32.cv1.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %503 = sigmoid(%502) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %504 = multiply(%502, %503) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %505 = nn.conv2d(%504, %model.32.m.0.cv1.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %506 = nn.bias_add(%505, %model.32.m.0.cv1.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %507 = sigmoid(%506) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %508 = multiply(%506, %507) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %509 = nn.conv2d(%508, %model.32.m.0.cv2.conv.weight, padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %510 = nn.bias_add(%509, %model.32.m.0.cv2.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %511 = sigmoid(%510) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %512 = multiply(%510, %511) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %513 = nn.conv2d(%512, %model.32.m.1.cv1.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %514 = nn.bias_add(%513, %model.32.m.1.cv1.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %515 = sigmoid(%514) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %516 = multiply(%514, %515) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %517 = nn.conv2d(%516, %model.32.m.1.cv2.conv.weight, padding=[1, 1, 1, 1], channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %518 = nn.bias_add(%517, %model.32.m.1.cv2.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %519 = sigmoid(%518) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %520 = nn.conv2d(%500, %model.32.cv2.conv.weight, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %521 = nn.bias_add(%520, %model.32.cv2.conv.bias) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %522 = sigmoid(%521) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %523 = multiply(%518, %519) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %524 = multiply(%521, %522) /* ty=Tensor[(1, 384, ?, ?), float32] */;
  %525 = (%523, %524);
  %526 = concatenate(%525, axis=1) /* ty=Tensor[(1, 768, ?, ?), float32] */;
  %527 = nn.conv2d(%526, %model.32.cv3.conv.weight, padding=[0, 0, 0, 0], channels=768, kernel_size=[1, 1]) /* ty=Tensor[(1, 768, ?, ?), float32] */;
  %528 = nn.bias_add(%527, %model.32.cv3.conv.bias) /* ty=Tensor[(1, 768, ?, ?), float32] */;
  %529 = sigmoid(%528) /* ty=Tensor[(1, 768, ?, ?), float32] */;
  %530 = multiply(%528, %529) /* ty=Tensor[(1, 768, ?, ?), float32] */;
  %531 = nn.conv2d(%530, %model.33.m.3.weight, padding=[0, 0, 0, 0], channels=255, kernel_size=[1, 1]) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %532 = nn.bias_add(%531, %model.33.m.3.bias) /* ty=Tensor[(1, 255, ?, ?), float32] */;
  %533 = reshape(%532, newshape=[1, 3, 85, 10, 10]) /* ty=Tensor[(1, 3, 85, 10, 10), float32] */;
  %534 = transpose(%533, axes=[0, 1, 3, 4, 2]) /* ty=Tensor[(1, 3, 10, 10, 85), float32] */;
  %535 = sigmoid(%534) /* ty=Tensor[(1, 3, 10, 10, 85), float32] */;
  %536 = split(%535, indices_or_sections=[2, 4], axis=4) /* ty=(Tensor[(1, 3, 10, 10, 2), float32], Tensor[(1, 3, 10, 10, 2), float32], Tensor[(1, 3, 10, 10, 81), float32]) */;
  %537 = %536.0;
  %538 = multiply(%537, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 10, 10, 2), float32] */;
  %539 = add(%538, meta[relay.Constant][7] /* ty=Tensor[(1, 3, 10, 10, 2), float32] */) /* ty=Tensor[(1, 3, 10, 10, 2), float32] */;
  %540 = %536.1;
  %541 = multiply(%540, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 10, 10, 2), float32] */;
  %542 = power(%541, 2f /* ty=float32 */) /* ty=Tensor[(1, 3, 10, 10, 2), float32] */;
  %543 = multiply(%539, 64f /* ty=float32 */) /* ty=Tensor[(1, 3, 10, 10, 2), float32] */;
  %544 = multiply(%542, meta[relay.Constant][8] /* ty=Tensor[(1, 3, 10, 10, 2), float32] */) /* ty=Tensor[(1, 3, 10, 10, 2), float32] */;
  %545 = %536.2;
  %546 = (%543, %544, %545);
  %547 = concatenate(%546, axis=4) /* ty=Tensor[(1, 3, 10, 10, 85), float32] */;
  %548 = reshape(%388, newshape=[1, -1, 85]) /* ty=Tensor[(1, 19200, 85), float32] */;
  %549 = reshape(%441, newshape=[1, -1, 85]) /* ty=Tensor[(1, 4800, 85), float32] */;
  %550 = reshape(%494, newshape=[1, -1, 85]) /* ty=Tensor[(1, 1200, 85), float32] */;
  %551 = reshape(%547, newshape=[1, -1, 85]) /* ty=Tensor[(1, 300, 85), float32] */;
  %552 = (%548, %549, %550, %551);
  concatenate(%552, axis=1) /* ty=Tensor[(1, 25500, 85), float32] */
}