def @main(%loss3/classifier_w_0: Tensor[(1000, 1024), float32], %call_204: Tensor[(1, 1024, 1, 1), float32], %loss3/classifier_b_0: Tensor[(1000), float32] {
  %205 = nn.dropout(%204, rate=0.4f) /* ty=(Tensor[(1, 1024, 1, 1), float32], Tensor[(1, 1024, 1, 1), float32]) */;
  %206 = %205.0;
  %207 = reshape(%206, newshape=[1, 1024]) /* ty=Tensor[(1, 1024), float32] */;
  %208 = nn.batch_flatten(%207) /* ty=Tensor[(1, 1024), float32] */;
  %209 = nn.dense(%208, %loss3/classifier_w_0, units=1000) /* ty=Tensor[(1, 1000), float32] */;
  %210 = multiply(1f /* ty=float32 */, %loss3/classifier_b_0) /* ty=Tensor[(1000), float32] */;
  %211 = add(%209, %210) /* ty=Tensor[(1, 1000), float32] */;
  %212 = max(%211, axis=[1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  %213 = subtract(%211, %212) /* ty=Tensor[(1, 1000), float32] */;
  %214 = exp(%213) /* ty=Tensor[(1, 1000), float32] */;
  %215 = sum(%214, axis=[1], keepdims=True) /* ty=Tensor[(1, 1), float32] */;
  divide(%214, %215) /* ty=Tensor[(1, 1000), float32] */
}