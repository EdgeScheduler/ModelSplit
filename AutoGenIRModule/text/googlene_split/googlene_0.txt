def @main(%conv1/7x7_s2_w_0: Tensor[(64, 3, 7, 7), float32], %conv1/7x7_s2_b_0: Tensor[(64), float32], %conv2/3x3_reduce_w_0: Tensor[(64, 64, 1, 1), float32], %conv2/3x3_reduce_b_0: Tensor[(64), float32], %data_0: Tensor[(1, 3, 224, 224), float32] {
  %0 = nn.conv2d(%data_0, %conv1/7x7_s2_w_0, strides=[2, 2], padding=[3, 3, 3, 3], channels=64, kernel_size=[7, 7]) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %1 = nn.bias_add(%0, %conv1/7x7_s2_b_0) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %3 = nn.max_pool2d(%2, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 2, 2]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %4 = nn.lrn(%3, bias=1f) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %5 = nn.conv2d(%4, %conv2/3x3_reduce_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  nn.bias_add(%5, %conv2/3x3_reduce_b_0) /* ty=Tensor[(1, 64, 56, 56), float32] */;
}