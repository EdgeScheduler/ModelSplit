# this file is create by program.def Vgg19_0(pre_input=None):    import tvm    from tvm import relay    vgg0_conv0_bias = relay.var("vgg0_conv0_bias", shape=(64, ), dtype="float32")    vgg0_conv0_weight = relay.var("vgg0_conv0_weight", shape=(64, 3, 3, 3), dtype="float32")    data = pre_input if pre_input is not None else relay.var("data", shape=(1, 3, 224, 224), dtype="float32")    call_0 = relay.nn.conv2d(data, vgg0_conv0_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3])
    call_output0 = relay.nn.bias_add(call_0, vgg0_conv0_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_1(pre_input=None):    import tvm    from tvm import relay    call_1 = pre_input if pre_input is not None else relay.var("call_1", shape=(1, 64, 224, 224), dtype="float32")    call_output0 = relay.nn.relu(call_1)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_2(pre_input=None):    import tvm    from tvm import relay    call_2 = pre_input if pre_input is not None else relay.var("call_2", shape=(1, 64, 224, 224), dtype="float32")    vgg0_conv1_weight = relay.var("vgg0_conv1_weight", shape=(64, 64, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_2, vgg0_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_3(pre_input=None):    import tvm    from tvm import relay    call_3 = pre_input if pre_input is not None else relay.var("call_3", shape=(1, 64, 224, 224), dtype="float32")    vgg0_conv1_bias = relay.var("vgg0_conv1_bias", shape=(64, ), dtype="float32")    call_output0 = relay.nn.bias_add(call_3, vgg0_conv1_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_4(pre_input=None):    import tvm    from tvm import relay    call_4 = pre_input if pre_input is not None else relay.var("call_4", shape=(1, 64, 224, 224), dtype="float32")    call_output0 = relay.nn.relu(call_4)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_5(pre_input=None):    import tvm    from tvm import relay    call_5 = pre_input if pre_input is not None else relay.var("call_5", shape=(1, 64, 224, 224), dtype="float32")    call_output0 = relay.nn.max_pool2d(call_5, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_6(pre_input=None):    import tvm    from tvm import relay    call_6 = pre_input if pre_input is not None else relay.var("call_6", shape=(1, 64, 112, 112), dtype="float32")    vgg0_conv2_weight = relay.var("vgg0_conv2_weight", shape=(128, 64, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_6, vgg0_conv2_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_7(pre_input=None):    import tvm    from tvm import relay    vgg0_conv2_bias = relay.var("vgg0_conv2_bias", shape=(128, ), dtype="float32")    call_7 = pre_input if pre_input is not None else relay.var("call_7", shape=(1, 128, 112, 112), dtype="float32")    call_output0 = relay.nn.bias_add(call_7, vgg0_conv2_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_8(pre_input=None):    import tvm    from tvm import relay    call_8 = pre_input if pre_input is not None else relay.var("call_8", shape=(1, 128, 112, 112), dtype="float32")    call_output0 = relay.nn.relu(call_8)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_9(pre_input=None):    import tvm    from tvm import relay    vgg0_conv3_weight = relay.var("vgg0_conv3_weight", shape=(128, 128, 3, 3), dtype="float32")    call_9 = pre_input if pre_input is not None else relay.var("call_9", shape=(1, 128, 112, 112), dtype="float32")    call_output0 = relay.nn.conv2d(call_9, vgg0_conv3_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_10(pre_input=None):    import tvm    from tvm import relay    call_10 = pre_input if pre_input is not None else relay.var("call_10", shape=(1, 128, 112, 112), dtype="float32")    vgg0_conv3_bias = relay.var("vgg0_conv3_bias", shape=(128, ), dtype="float32")    call_output0 = relay.nn.bias_add(call_10, vgg0_conv3_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_11(pre_input=None):    import tvm    from tvm import relay    call_11 = pre_input if pre_input is not None else relay.var("call_11", shape=(1, 128, 112, 112), dtype="float32")    call_output0 = relay.nn.relu(call_11)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_12(pre_input=None):    import tvm    from tvm import relay    call_12 = pre_input if pre_input is not None else relay.var("call_12", shape=(1, 128, 112, 112), dtype="float32")    call_output0 = relay.nn.max_pool2d(call_12, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_13(pre_input=None):    import tvm    from tvm import relay    call_13 = pre_input if pre_input is not None else relay.var("call_13", shape=(1, 128, 56, 56), dtype="float32")    vgg0_conv4_weight = relay.var("vgg0_conv4_weight", shape=(256, 128, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_13, vgg0_conv4_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_14(pre_input=None):    import tvm    from tvm import relay    call_14 = pre_input if pre_input is not None else relay.var("call_14", shape=(1, 256, 56, 56), dtype="float32")    vgg0_conv4_bias = relay.var("vgg0_conv4_bias", shape=(256, ), dtype="float32")    call_output0 = relay.nn.bias_add(call_14, vgg0_conv4_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_15(pre_input=None):    import tvm    from tvm import relay    call_15 = pre_input if pre_input is not None else relay.var("call_15", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.relu(call_15)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_16(pre_input=None):    import tvm    from tvm import relay    call_16 = pre_input if pre_input is not None else relay.var("call_16", shape=(1, 256, 56, 56), dtype="float32")    vgg0_conv5_weight = relay.var("vgg0_conv5_weight", shape=(256, 256, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_16, vgg0_conv5_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_17(pre_input=None):    import tvm    from tvm import relay    vgg0_conv5_bias = relay.var("vgg0_conv5_bias", shape=(256, ), dtype="float32")    call_17 = pre_input if pre_input is not None else relay.var("call_17", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.bias_add(call_17, vgg0_conv5_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_18(pre_input=None):    import tvm    from tvm import relay    call_18 = pre_input if pre_input is not None else relay.var("call_18", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.relu(call_18)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_19(pre_input=None):    import tvm    from tvm import relay    vgg0_conv6_weight = relay.var("vgg0_conv6_weight", shape=(256, 256, 3, 3), dtype="float32")    call_19 = pre_input if pre_input is not None else relay.var("call_19", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.conv2d(call_19, vgg0_conv6_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_20(pre_input=None):    import tvm    from tvm import relay    vgg0_conv6_bias = relay.var("vgg0_conv6_bias", shape=(256, ), dtype="float32")    call_20 = pre_input if pre_input is not None else relay.var("call_20", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.bias_add(call_20, vgg0_conv6_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_21(pre_input=None):    import tvm    from tvm import relay    call_21 = pre_input if pre_input is not None else relay.var("call_21", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.relu(call_21)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_22(pre_input=None):    import tvm    from tvm import relay    vgg0_conv7_weight = relay.var("vgg0_conv7_weight", shape=(256, 256, 3, 3), dtype="float32")    call_22 = pre_input if pre_input is not None else relay.var("call_22", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.conv2d(call_22, vgg0_conv7_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_23(pre_input=None):    import tvm    from tvm import relay    call_23 = pre_input if pre_input is not None else relay.var("call_23", shape=(1, 256, 56, 56), dtype="float32")    vgg0_conv7_bias = relay.var("vgg0_conv7_bias", shape=(256, ), dtype="float32")    call_output0 = relay.nn.bias_add(call_23, vgg0_conv7_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_24(pre_input=None):    import tvm    from tvm import relay    call_24 = pre_input if pre_input is not None else relay.var("call_24", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.relu(call_24)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_25(pre_input=None):    import tvm    from tvm import relay    call_25 = pre_input if pre_input is not None else relay.var("call_25", shape=(1, 256, 56, 56), dtype="float32")    call_output0 = relay.nn.max_pool2d(call_25, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_26(pre_input=None):    import tvm    from tvm import relay    call_26 = pre_input if pre_input is not None else relay.var("call_26", shape=(1, 256, 28, 28), dtype="float32")    vgg0_conv8_weight = relay.var("vgg0_conv8_weight", shape=(512, 256, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_26, vgg0_conv8_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_27(pre_input=None):    import tvm    from tvm import relay    vgg0_conv8_bias = relay.var("vgg0_conv8_bias", shape=(512, ), dtype="float32")    call_27 = pre_input if pre_input is not None else relay.var("call_27", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.bias_add(call_27, vgg0_conv8_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_28(pre_input=None):    import tvm    from tvm import relay    call_28 = pre_input if pre_input is not None else relay.var("call_28", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.relu(call_28)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_29(pre_input=None):    import tvm    from tvm import relay    call_29 = pre_input if pre_input is not None else relay.var("call_29", shape=(1, 512, 28, 28), dtype="float32")    vgg0_conv9_weight = relay.var("vgg0_conv9_weight", shape=(512, 512, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_29, vgg0_conv9_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_30(pre_input=None):    import tvm    from tvm import relay    call_30 = pre_input if pre_input is not None else relay.var("call_30", shape=(1, 512, 28, 28), dtype="float32")    vgg0_conv9_bias = relay.var("vgg0_conv9_bias", shape=(512, ), dtype="float32")    call_output0 = relay.nn.bias_add(call_30, vgg0_conv9_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_31(pre_input=None):    import tvm    from tvm import relay    call_31 = pre_input if pre_input is not None else relay.var("call_31", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.relu(call_31)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_32(pre_input=None):    import tvm    from tvm import relay    call_32 = pre_input if pre_input is not None else relay.var("call_32", shape=(1, 512, 28, 28), dtype="float32")    vgg0_conv10_weight = relay.var("vgg0_conv10_weight", shape=(512, 512, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_32, vgg0_conv10_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_33(pre_input=None):    import tvm    from tvm import relay    vgg0_conv10_bias = relay.var("vgg0_conv10_bias", shape=(512, ), dtype="float32")    call_33 = pre_input if pre_input is not None else relay.var("call_33", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.bias_add(call_33, vgg0_conv10_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_34(pre_input=None):    import tvm    from tvm import relay    call_34 = pre_input if pre_input is not None else relay.var("call_34", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.relu(call_34)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_35(pre_input=None):    import tvm    from tvm import relay    vgg0_conv11_weight = relay.var("vgg0_conv11_weight", shape=(512, 512, 3, 3), dtype="float32")    call_35 = pre_input if pre_input is not None else relay.var("call_35", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.conv2d(call_35, vgg0_conv11_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_36(pre_input=None):    import tvm    from tvm import relay    vgg0_conv11_bias = relay.var("vgg0_conv11_bias", shape=(512, ), dtype="float32")    call_36 = pre_input if pre_input is not None else relay.var("call_36", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.bias_add(call_36, vgg0_conv11_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_37(pre_input=None):    import tvm    from tvm import relay    call_37 = pre_input if pre_input is not None else relay.var("call_37", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.relu(call_37)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_38(pre_input=None):    import tvm    from tvm import relay    call_38 = pre_input if pre_input is not None else relay.var("call_38", shape=(1, 512, 28, 28), dtype="float32")    call_output0 = relay.nn.max_pool2d(call_38, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_39(pre_input=None):    import tvm    from tvm import relay    call_39 = pre_input if pre_input is not None else relay.var("call_39", shape=(1, 512, 14, 14), dtype="float32")    vgg0_conv12_weight = relay.var("vgg0_conv12_weight", shape=(512, 512, 3, 3), dtype="float32")    call_output0 = relay.nn.conv2d(call_39, vgg0_conv12_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_40(pre_input=None):    import tvm    from tvm import relay    call_40 = pre_input if pre_input is not None else relay.var("call_40", shape=(1, 512, 14, 14), dtype="float32")    vgg0_conv12_bias = relay.var("vgg0_conv12_bias", shape=(512, ), dtype="float32")    call_output0 = relay.nn.bias_add(call_40, vgg0_conv12_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_41(pre_input=None):    import tvm    from tvm import relay    call_41 = pre_input if pre_input is not None else relay.var("call_41", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.relu(call_41)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_42(pre_input=None):    import tvm    from tvm import relay    vgg0_conv13_weight = relay.var("vgg0_conv13_weight", shape=(512, 512, 3, 3), dtype="float32")    call_42 = pre_input if pre_input is not None else relay.var("call_42", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.conv2d(call_42, vgg0_conv13_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_43(pre_input=None):    import tvm    from tvm import relay    call_43 = pre_input if pre_input is not None else relay.var("call_43", shape=(1, 512, 14, 14), dtype="float32")    vgg0_conv13_bias = relay.var("vgg0_conv13_bias", shape=(512, ), dtype="float32")    call_output0 = relay.nn.bias_add(call_43, vgg0_conv13_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_44(pre_input=None):    import tvm    from tvm import relay    call_44 = pre_input if pre_input is not None else relay.var("call_44", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.relu(call_44)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_45(pre_input=None):    import tvm    from tvm import relay    vgg0_conv14_weight = relay.var("vgg0_conv14_weight", shape=(512, 512, 3, 3), dtype="float32")    call_45 = pre_input if pre_input is not None else relay.var("call_45", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.conv2d(call_45, vgg0_conv14_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_46(pre_input=None):    import tvm    from tvm import relay    vgg0_conv14_bias = relay.var("vgg0_conv14_bias", shape=(512, ), dtype="float32")    call_46 = pre_input if pre_input is not None else relay.var("call_46", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.bias_add(call_46, vgg0_conv14_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_47(pre_input=None):    import tvm    from tvm import relay    call_47 = pre_input if pre_input is not None else relay.var("call_47", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.relu(call_47)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_48(pre_input=None):    import tvm    from tvm import relay    vgg0_conv15_weight = relay.var("vgg0_conv15_weight", shape=(512, 512, 3, 3), dtype="float32")    call_48 = pre_input if pre_input is not None else relay.var("call_48", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.conv2d(call_48, vgg0_conv15_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_49(pre_input=None):    import tvm    from tvm import relay    vgg0_conv15_bias = relay.var("vgg0_conv15_bias", shape=(512, ), dtype="float32")    call_49 = pre_input if pre_input is not None else relay.var("call_49", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.bias_add(call_49, vgg0_conv15_bias)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_50(pre_input=None):    import tvm    from tvm import relay    call_50 = pre_input if pre_input is not None else relay.var("call_50", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.relu(call_50)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_51(pre_input=None):    import tvm    from tvm import relay    call_51 = pre_input if pre_input is not None else relay.var("call_51", shape=(1, 512, 14, 14), dtype="float32")    call_output0 = relay.nn.max_pool2d(call_51, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_52(pre_input=None):    import tvm    from tvm import relay    call_52 = pre_input if pre_input is not None else relay.var("call_52", shape=(1, 512, 7, 7), dtype="float32")    call_output0 = relay.nn.batch_flatten(call_52)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_53(pre_input=None):    import tvm    from tvm import relay    call_53 = pre_input if pre_input is not None else relay.var("call_53", shape=(1, 25088), dtype="float32")    call_output0 = relay.nn.batch_flatten(call_53)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_54(pre_input=None):    import tvm    from tvm import relay    vgg0_dense0_weight = relay.var("vgg0_dense0_weight", shape=(4096, 25088), dtype="float32")    call_54 = pre_input if pre_input is not None else relay.var("call_54", shape=(1, 25088), dtype="float32")    vgg0_dense0_bias = relay.var("vgg0_dense0_bias", shape=(4096, ), dtype="float32")    call_55 = relay.nn.dense(call_54, vgg0_dense0_weight, units=4096)
    call_56 = relay.multiply(relay.const(1.0, dtype="float32"), vgg0_dense0_bias)
    call_output0 = relay.add(call_55, call_56)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_55(pre_input=None):    import tvm    from tvm import relay    call_57 = pre_input if pre_input is not None else relay.var("call_57", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.relu(call_57)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_56(pre_input=None):    import tvm    from tvm import relay    call_58 = pre_input if pre_input is not None else relay.var("call_58", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.dropout(call_58)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_57(pre_input=None):    import tvm    from tvm import relay    call_59 = pre_input if pre_input is not None else relay.var("call_59", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.batch_flatten(call_59)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_58(pre_input=None):    import tvm    from tvm import relay    call_61 = pre_input if pre_input is not None else relay.var("call_61", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.batch_flatten(call_61)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_59(pre_input=None):    import tvm    from tvm import relay    vgg0_dense1_weight = relay.var("vgg0_dense1_weight", shape=(4096, 4096), dtype="float32")    vgg0_dense1_bias = relay.var("vgg0_dense1_bias", shape=(4096, ), dtype="float32")    call_62 = pre_input if pre_input is not None else relay.var("call_62", shape=(1, 4096), dtype="float32")    call_63 = relay.nn.dense(call_62, vgg0_dense1_weight, units=4096)
    call_64 = relay.multiply(relay.const(1.0, dtype="float32"), vgg0_dense1_bias)
    call_output0 = relay.add(call_63, call_64)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_60(pre_input=None):    import tvm    from tvm import relay    call_65 = pre_input if pre_input is not None else relay.var("call_65", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.relu(call_65)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_61(pre_input=None):    import tvm    from tvm import relay    call_66 = pre_input if pre_input is not None else relay.var("call_66", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.dropout(call_66)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_62(pre_input=None):    import tvm    from tvm import relay    call_67 = pre_input if pre_input is not None else relay.var("call_67", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.batch_flatten(call_67)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_63(pre_input=None):    import tvm    from tvm import relay    call_69 = pre_input if pre_input is not None else relay.var("call_69", shape=(1, 4096), dtype="float32")    call_output0 = relay.nn.batch_flatten(call_69)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]def Vgg19_64(pre_input=None):    import tvm    from tvm import relay    call_70 = pre_input if pre_input is not None else relay.var("call_70", shape=(1, 4096), dtype="float32")    vgg0_dense2_weight = relay.var("vgg0_dense2_weight", shape=(1000, 4096), dtype="float32")    vgg0_dense2_bias = relay.var("vgg0_dense2_bias", shape=(1000, ), dtype="float32")    call_71 = relay.nn.dense(call_70, vgg0_dense2_weight, units=1000)
    call_72 = relay.multiply(relay.const(1.0, dtype="float32"), vgg0_dense2_bias)
    call_output0 = relay.add(call_71, call_72)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]