# this file is create by program.def SqueezeNetv1(pre_input=None):    import tvm    import numpy as np    from tvm import relay    data_0 = pre_input if pre_input is not None else relay.var("data_0", shape=(15, 3, 224, 224), dtype="float32")    features_0_weight = relay.var("features.0.weight", shape=(96, 3, 7, 7), dtype="float32")    features_0_bias = relay.var("features.0.bias", shape=(96, ), dtype="float32")    features_3_squeeze_weight = relay.var("features.3.squeeze.weight", shape=(16, 96, 1, 1), dtype="float32")    features_3_squeeze_bias = relay.var("features.3.squeeze.bias", shape=(16, ), dtype="float32")    features_3_expand1x1_weight = relay.var("features.3.expand1x1.weight", shape=(64, 16, 1, 1), dtype="float32")    features_3_expand1x1_bias = relay.var("features.3.expand1x1.bias", shape=(64, ), dtype="float32")    features_3_expand3x3_weight = relay.var("features.3.expand3x3.weight", shape=(64, 16, 3, 3), dtype="float32")    features_3_expand3x3_bias = relay.var("features.3.expand3x3.bias", shape=(64, ), dtype="float32")    features_4_squeeze_weight = relay.var("features.4.squeeze.weight", shape=(16, 128, 1, 1), dtype="float32")    features_4_squeeze_bias = relay.var("features.4.squeeze.bias", shape=(16, ), dtype="float32")    features_4_expand1x1_weight = relay.var("features.4.expand1x1.weight", shape=(64, 16, 1, 1), dtype="float32")    features_4_expand1x1_bias = relay.var("features.4.expand1x1.bias", shape=(64, ), dtype="float32")    features_4_expand3x3_weight = relay.var("features.4.expand3x3.weight", shape=(64, 16, 3, 3), dtype="float32")    features_4_expand3x3_bias = relay.var("features.4.expand3x3.bias", shape=(64, ), dtype="float32")    features_5_squeeze_weight = relay.var("features.5.squeeze.weight", shape=(32, 128, 1, 1), dtype="float32")    features_5_squeeze_bias = relay.var("features.5.squeeze.bias", shape=(32, ), dtype="float32")    features_5_expand1x1_weight = relay.var("features.5.expand1x1.weight", shape=(128, 32, 1, 1), dtype="float32")    features_5_expand1x1_bias = relay.var("features.5.expand1x1.bias", shape=(128, ), dtype="float32")    features_5_expand3x3_weight = relay.var("features.5.expand3x3.weight", shape=(128, 32, 3, 3), dtype="float32")    features_5_expand3x3_bias = relay.var("features.5.expand3x3.bias", shape=(128, ), dtype="float32")    features_7_squeeze_weight = relay.var("features.7.squeeze.weight", shape=(32, 256, 1, 1), dtype="float32")    features_7_squeeze_bias = relay.var("features.7.squeeze.bias", shape=(32, ), dtype="float32")    features_7_expand1x1_weight = relay.var("features.7.expand1x1.weight", shape=(128, 32, 1, 1), dtype="float32")    features_7_expand1x1_bias = relay.var("features.7.expand1x1.bias", shape=(128, ), dtype="float32")    features_7_expand3x3_weight = relay.var("features.7.expand3x3.weight", shape=(128, 32, 3, 3), dtype="float32")    features_7_expand3x3_bias = relay.var("features.7.expand3x3.bias", shape=(128, ), dtype="float32")    features_8_squeeze_weight = relay.var("features.8.squeeze.weight", shape=(48, 256, 1, 1), dtype="float32")    features_8_squeeze_bias = relay.var("features.8.squeeze.bias", shape=(48, ), dtype="float32")    features_8_expand1x1_weight = relay.var("features.8.expand1x1.weight", shape=(192, 48, 1, 1), dtype="float32")    features_8_expand1x1_bias = relay.var("features.8.expand1x1.bias", shape=(192, ), dtype="float32")    features_8_expand3x3_weight = relay.var("features.8.expand3x3.weight", shape=(192, 48, 3, 3), dtype="float32")    features_8_expand3x3_bias = relay.var("features.8.expand3x3.bias", shape=(192, ), dtype="float32")    features_9_squeeze_weight = relay.var("features.9.squeeze.weight", shape=(48, 384, 1, 1), dtype="float32")    features_9_squeeze_bias = relay.var("features.9.squeeze.bias", shape=(48, ), dtype="float32")    features_9_expand1x1_weight = relay.var("features.9.expand1x1.weight", shape=(192, 48, 1, 1), dtype="float32")    features_9_expand1x1_bias = relay.var("features.9.expand1x1.bias", shape=(192, ), dtype="float32")    features_9_expand3x3_weight = relay.var("features.9.expand3x3.weight", shape=(192, 48, 3, 3), dtype="float32")    features_9_expand3x3_bias = relay.var("features.9.expand3x3.bias", shape=(192, ), dtype="float32")    features_10_squeeze_weight = relay.var("features.10.squeeze.weight", shape=(64, 384, 1, 1), dtype="float32")    features_10_squeeze_bias = relay.var("features.10.squeeze.bias", shape=(64, ), dtype="float32")    features_10_expand1x1_weight = relay.var("features.10.expand1x1.weight", shape=(256, 64, 1, 1), dtype="float32")    features_10_expand1x1_bias = relay.var("features.10.expand1x1.bias", shape=(256, ), dtype="float32")    features_10_expand3x3_weight = relay.var("features.10.expand3x3.weight", shape=(256, 64, 3, 3), dtype="float32")    features_10_expand3x3_bias = relay.var("features.10.expand3x3.bias", shape=(256, ), dtype="float32")    features_12_squeeze_weight = relay.var("features.12.squeeze.weight", shape=(64, 512, 1, 1), dtype="float32")    features_12_squeeze_bias = relay.var("features.12.squeeze.bias", shape=(64, ), dtype="float32")    features_12_expand1x1_weight = relay.var("features.12.expand1x1.weight", shape=(256, 64, 1, 1), dtype="float32")    features_12_expand1x1_bias = relay.var("features.12.expand1x1.bias", shape=(256, ), dtype="float32")    features_12_expand3x3_weight = relay.var("features.12.expand3x3.weight", shape=(256, 64, 3, 3), dtype="float32")    features_12_expand3x3_bias = relay.var("features.12.expand3x3.bias", shape=(256, ), dtype="float32")    classifier_1_weight = relay.var("classifier.1.weight", shape=(1000, 512, 1, 1), dtype="float32")    classifier_1_bias = relay.var("classifier.1.bias", shape=(1000, ), dtype="float32")    call_0 = relay.nn.conv2d(data_0, features_0_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=96, kernel_size=[7, 7])
    call_1 = relay.nn.bias_add(call_0, features_0_bias)
    call_2 = relay.nn.relu(call_1)
    call_3 = relay.nn.max_pool2d(call_2, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], ceil_mode=True)
    call_4 = relay.nn.conv2d(call_3, features_3_squeeze_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1])
    call_5 = relay.nn.bias_add(call_4, features_3_squeeze_bias)
    call_6 = relay.nn.relu(call_5)
    call_7 = relay.nn.conv2d(call_6, features_3_expand1x1_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1])
    call_8 = relay.nn.bias_add(call_7, features_3_expand1x1_bias)
    call_9 = relay.nn.conv2d(call_6, features_3_expand3x3_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3])
    call_10 = relay.nn.bias_add(call_9, features_3_expand3x3_bias)
    call_11 = relay.nn.relu(call_8)
    call_12 = relay.nn.relu(call_10)
    call_14 = relay.concatenate(relay.Tuple([call_11, call_12]), axis=1)
    call_15 = relay.nn.conv2d(call_14, features_4_squeeze_weight, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1])
    call_16 = relay.nn.bias_add(call_15, features_4_squeeze_bias)
    call_17 = relay.nn.relu(call_16)
    call_18 = relay.nn.conv2d(call_17, features_4_expand1x1_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1])
    call_19 = relay.nn.bias_add(call_18, features_4_expand1x1_bias)
    call_20 = relay.nn.conv2d(call_17, features_4_expand3x3_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3])
    call_21 = relay.nn.bias_add(call_20, features_4_expand3x3_bias)
    call_22 = relay.nn.relu(call_19)
    call_23 = relay.nn.relu(call_21)
    call_25 = relay.concatenate(relay.Tuple([call_22, call_23]), axis=1)
    call_26 = relay.nn.conv2d(call_25, features_5_squeeze_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1])
    call_27 = relay.nn.bias_add(call_26, features_5_squeeze_bias)
    call_28 = relay.nn.relu(call_27)
    call_29 = relay.nn.conv2d(call_28, features_5_expand1x1_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1])
    call_30 = relay.nn.bias_add(call_29, features_5_expand1x1_bias)
    call_31 = relay.nn.conv2d(call_28, features_5_expand3x3_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3])
    call_32 = relay.nn.bias_add(call_31, features_5_expand3x3_bias)
    call_33 = relay.nn.relu(call_30)
    call_34 = relay.nn.relu(call_32)
    call_36 = relay.concatenate(relay.Tuple([call_33, call_34]), axis=1)
    call_37 = relay.nn.max_pool2d(call_36, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], ceil_mode=True)
    call_38 = relay.nn.conv2d(call_37, features_7_squeeze_weight, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1])
    call_39 = relay.nn.bias_add(call_38, features_7_squeeze_bias)
    call_40 = relay.nn.relu(call_39)
    call_41 = relay.nn.conv2d(call_40, features_7_expand1x1_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1])
    call_42 = relay.nn.bias_add(call_41, features_7_expand1x1_bias)
    call_43 = relay.nn.conv2d(call_40, features_7_expand3x3_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3])
    call_44 = relay.nn.bias_add(call_43, features_7_expand3x3_bias)
    call_45 = relay.nn.relu(call_42)
    call_46 = relay.nn.relu(call_44)
    call_48 = relay.concatenate(relay.Tuple([call_45, call_46]), axis=1)
    call_49 = relay.nn.conv2d(call_48, features_8_squeeze_weight, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1])
    call_50 = relay.nn.bias_add(call_49, features_8_squeeze_bias)
    call_51 = relay.nn.relu(call_50)
    call_52 = relay.nn.conv2d(call_51, features_8_expand1x1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1])
    call_53 = relay.nn.bias_add(call_52, features_8_expand1x1_bias)
    call_54 = relay.nn.conv2d(call_51, features_8_expand3x3_weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3])
    call_55 = relay.nn.bias_add(call_54, features_8_expand3x3_bias)
    call_56 = relay.nn.relu(call_53)
    call_57 = relay.nn.relu(call_55)
    call_59 = relay.concatenate(relay.Tuple([call_56, call_57]), axis=1)
    call_60 = relay.nn.conv2d(call_59, features_9_squeeze_weight, padding=[0, 0, 0, 0], channels=48, kernel_size=[1, 1])
    call_61 = relay.nn.bias_add(call_60, features_9_squeeze_bias)
    call_62 = relay.nn.relu(call_61)
    call_63 = relay.nn.conv2d(call_62, features_9_expand1x1_weight, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1])
    call_64 = relay.nn.bias_add(call_63, features_9_expand1x1_bias)
    call_65 = relay.nn.conv2d(call_62, features_9_expand3x3_weight, padding=[1, 1, 1, 1], channels=192, kernel_size=[3, 3])
    call_66 = relay.nn.bias_add(call_65, features_9_expand3x3_bias)
    call_67 = relay.nn.relu(call_64)
    call_68 = relay.nn.relu(call_66)
    call_70 = relay.concatenate(relay.Tuple([call_67, call_68]), axis=1)
    call_71 = relay.nn.conv2d(call_70, features_10_squeeze_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1])
    call_72 = relay.nn.bias_add(call_71, features_10_squeeze_bias)
    call_73 = relay.nn.relu(call_72)
    call_74 = relay.nn.conv2d(call_73, features_10_expand1x1_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1])
    call_75 = relay.nn.bias_add(call_74, features_10_expand1x1_bias)
    call_76 = relay.nn.conv2d(call_73, features_10_expand3x3_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3])
    call_77 = relay.nn.bias_add(call_76, features_10_expand3x3_bias)
    call_78 = relay.nn.relu(call_75)
    call_79 = relay.nn.relu(call_77)
    call_81 = relay.concatenate(relay.Tuple([call_78, call_79]), axis=1)
    call_82 = relay.nn.max_pool2d(call_81, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0], ceil_mode=True)
    call_83 = relay.nn.conv2d(call_82, features_12_squeeze_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1])
    call_84 = relay.nn.bias_add(call_83, features_12_squeeze_bias)
    call_85 = relay.nn.relu(call_84)
    call_86 = relay.nn.conv2d(call_85, features_12_expand1x1_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1])
    call_87 = relay.nn.bias_add(call_86, features_12_expand1x1_bias)
    call_88 = relay.nn.conv2d(call_85, features_12_expand3x3_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3])
    call_89 = relay.nn.bias_add(call_88, features_12_expand3x3_bias)
    call_90 = relay.nn.relu(call_87)
    call_91 = relay.nn.relu(call_89)
    call_93 = relay.concatenate(relay.Tuple([call_90, call_91]), axis=1)
    call_94 = relay.nn.conv2d(call_93, classifier_1_weight, padding=[0, 0, 0, 0], channels=1000, kernel_size=[1, 1])
    call_95 = relay.nn.bias_add(call_94, classifier_1_bias)
    call_96 = relay.nn.relu(call_95)
    call_97 = relay.nn.global_avg_pool2d(call_96)
    call_output0 = relay.nn.batch_flatten(call_97)
    return call_output0 if not isinstance(call_output0,tvm.relay.expr.TupleWrapper) else call_output0[0]