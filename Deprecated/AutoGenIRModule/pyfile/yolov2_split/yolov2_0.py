import tvmfrom tvm import relay, IRModuleimport numpy as npdef YoloModule_0():    models_2_bn2_weight = relay.var("models.2.bn2.weight", shape=(64, ), dtype="float32")    models_4_conv3_weight = relay.var("models.4.conv3.weight", shape=(128, 64, 3, 3), dtype="float32")    models_2_bn2_running_mean = relay.var("models.2.bn2.running_mean", shape=(64, ), dtype="float32")    models_4_bn3_running_var = relay.var("models.4.bn3.running_var", shape=(128, ), dtype="float32")    models_5_conv4_weight = relay.var("models.5.conv4.weight", shape=(64, 128, 1, 1), dtype="float32")    models_0_bn1_running_mean = relay.var("models.0.bn1.running_mean", shape=(32, ), dtype="float32")    models_2_bn2_running_var = relay.var("models.2.bn2.running_var", shape=(64, ), dtype="float32")    models_4_bn3_bias = relay.var("models.4.bn3.bias", shape=(128, ), dtype="float32")    models_0_bn1_bias = relay.var("models.0.bn1.bias", shape=(32, ), dtype="float32")    input_1 = relay.var("input.1", shape=(1, 3, 416, 416), dtype="float32")    models_4_bn3_running_mean = relay.var("models.4.bn3.running_mean", shape=(128, ), dtype="float32")    models_2_bn2_bias = relay.var("models.2.bn2.bias", shape=(64, ), dtype="float32")    models_0_conv1_weight = relay.var("models.0.conv1.weight", shape=(32, 3, 3, 3), dtype="float32")    models_2_conv2_weight = relay.var("models.2.conv2.weight", shape=(64, 32, 3, 3), dtype="float32")    models_0_bn1_running_var = relay.var("models.0.bn1.running_var", shape=(32, ), dtype="float32")    models_0_bn1_weight = relay.var("models.0.bn1.weight", shape=(32, ), dtype="float32")    models_4_bn3_weight = relay.var("models.4.bn3.weight", shape=(128, ), dtype="float32")    call_0 = relay.nn.conv2d(input_1, models_0_conv1_weight, padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3])
    call_1_0 = relay.nn.batch_norm(call_0, models_0_bn1_weight, models_0_bn1_bias, models_0_bn1_running_mean, models_0_bn1_running_var)
    call_3 = relay.nn.leaky_relu(call_1_0[0], alpha=0.1)
    call_4 = relay.nn.max_pool2d(call_3, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
    call_5 = relay.nn.conv2d(call_4, models_2_conv2_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3])
    call_6_0 = relay.nn.batch_norm(call_5, models_2_bn2_weight, models_2_bn2_bias, models_2_bn2_running_mean, models_2_bn2_running_var)
    call_8 = relay.nn.leaky_relu(call_6_0[0], alpha=0.1)
    call_9 = relay.nn.max_pool2d(call_8, pool_size=[2, 2], strides=[2, 2], padding=[0, 0, 0, 0])
    call_10 = relay.nn.conv2d(call_9, models_4_conv3_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3])
    call_11_0 = relay.nn.batch_norm(call_10, models_4_bn3_weight, models_4_bn3_bias, models_4_bn3_running_mean, models_4_bn3_running_var)
    call_13 = relay.nn.leaky_relu(call_11_0[0], alpha=0.1)
    call_output0 = relay.nn.conv2d(call_13, models_5_conv4_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1])
    return call_output0