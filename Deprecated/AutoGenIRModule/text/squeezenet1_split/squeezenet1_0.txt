def @main(%fire2/squeeze1x1_w_0: Tensor[(16, 64, 1, 1), float32], %fire2/expand1x1_b_0: Tensor[(64), float32], %fire3/squeeze1x1_w_0: Tensor[(16, 128, 1, 1), float32], %conv1_b_0: Tensor[(64), float32], %conv1_w_0: Tensor[(64, 3, 3, 3), float32], %fire3/expand3x3_w_0: Tensor[(64, 16, 3, 3), float32], %fire3/expand3x3_b_0: Tensor[(64), float32], %fire3/expand1x1_w_0: Tensor[(64, 16, 1, 1), float32], %fire2/expand1x1_w_0: Tensor[(64, 16, 1, 1), float32], %data_0: Tensor[(1, 3, 224, 224), float32]), %fire2/expand3x3_b_0: Tensor[(64), float32], %fire3/expand1x1_b_0: Tensor[(64), float32], %fire3/squeeze1x1_b_0: Tensor[(16), float32], %fire2/squeeze1x1_b_0: Tensor[(16), float32], %fire2/expand3x3_w_0: Tensor[(64, 16, 3, 3), float32] {
  %0 = nn.conv2d(%data_0, %conv1_w_0, strides=[2, 2], padding=[0, 0, 0, 0], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 111, 111), float32] */;
  %1 = nn.bias_add(%0, %conv1_b_0) /* ty=Tensor[(1, 64, 111, 111), float32] */;
  %2 = nn.relu(%1) /* ty=Tensor[(1, 64, 111, 111), float32] */;
  %3 = nn.max_pool2d(%2, pool_size=[3, 3], strides=[2, 2], padding=[0, 0, 0, 0]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %4 = nn.conv2d(%3, %fire2/squeeze1x1_w_0, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  %5 = nn.bias_add(%4, %fire2/squeeze1x1_b_0) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  %6 = nn.relu(%5) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  %7 = nn.conv2d(%6, %fire2/expand1x1_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %8 = nn.bias_add(%7, %fire2/expand1x1_b_0) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %9 = nn.conv2d(%6, %fire2/expand3x3_w_0, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %10 = nn.bias_add(%9, %fire2/expand3x3_b_0) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %11 = nn.relu(%8) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %12 = nn.relu(%10) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %13 = (%11, %12);
  %14 = concatenate(%13, axis=1) /* ty=Tensor[(1, 128, 55, 55), float32] */;
  %15 = nn.conv2d(%14, %fire3/squeeze1x1_w_0, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  %16 = nn.bias_add(%15, %fire3/squeeze1x1_b_0) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 16, 55, 55), float32] */;
  %18 = nn.conv2d(%17, %fire3/expand1x1_w_0, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %19 = nn.bias_add(%18, %fire3/expand1x1_b_0) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %20 = nn.conv2d(%17, %fire3/expand3x3_w_0, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %21 = nn.bias_add(%20, %fire3/expand3x3_b_0) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %22 = nn.relu(%19) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %23 = nn.relu(%21) /* ty=Tensor[(1, 64, 55, 55), float32] */;
  %24 = (%22, %23);
  concatenate(%24, axis=1) /* ty=Tensor[(1, 128, 55, 55), float32] */;
}