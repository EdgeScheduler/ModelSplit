def @main(%input: Tensor[(1, 3, 224, 224), float32]) -> Tensor[(1, 1000), float32] {
  %0 = nn.conv2d(%input, meta[relay.Constant][0] /* ty=Tensor[(32, 3, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %1 = nn.bias_add(%0, meta[relay.Constant][1] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %2 = clip(%1, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %3 = nn.conv2d(%2, meta[relay.Constant][2] /* ty=Tensor[(32, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=32, channels=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %4 = nn.bias_add(%3, meta[relay.Constant][3] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %5 = clip(%4, a_min=0f, a_max=6f) /* ty=Tensor[(1, 32, 112, 112), float32] */;
  %6 = nn.conv2d(%5, meta[relay.Constant][4] /* ty=Tensor[(16, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=16, kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %7 = nn.bias_add(%6, meta[relay.Constant][5] /* ty=Tensor[(16), float32] */) /* ty=Tensor[(1, 16, 112, 112), float32] */;
  %8 = nn.conv2d(%7, meta[relay.Constant][6] /* ty=Tensor[(96, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %9 = nn.bias_add(%8, meta[relay.Constant][7] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %10 = clip(%9, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 112, 112), float32] */;
  %11 = nn.conv2d(%10, meta[relay.Constant][8] /* ty=Tensor[(96, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=96, channels=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %12 = nn.bias_add(%11, meta[relay.Constant][9] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %13 = clip(%12, a_min=0f, a_max=6f) /* ty=Tensor[(1, 96, 56, 56), float32] */;
  %14 = nn.conv2d(%13, meta[relay.Constant][10] /* ty=Tensor[(24, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %15 = nn.bias_add(%14, meta[relay.Constant][11] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %16 = nn.conv2d(%15, meta[relay.Constant][12] /* ty=Tensor[(144, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %17 = nn.bias_add(%16, meta[relay.Constant][13] /* ty=Tensor[(144), float32] */) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %19 = nn.conv2d(%18, meta[relay.Constant][14] /* ty=Tensor[(144, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %20 = nn.bias_add(%19, meta[relay.Constant][15] /* ty=Tensor[(144), float32] */) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %21 = clip(%20, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %22 = nn.conv2d(%21, meta[relay.Constant][16] /* ty=Tensor[(24, 144, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=24, kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %23 = nn.bias_add(%22, meta[relay.Constant][17] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %24 = add(%15, %23) /* ty=Tensor[(1, 24, 56, 56), float32] */;
  %25 = nn.conv2d(%24, meta[relay.Constant][18] /* ty=Tensor[(144, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=144, kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %26 = nn.bias_add(%25, meta[relay.Constant][19] /* ty=Tensor[(144), float32] */) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %27 = clip(%26, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 56, 56), float32] */;
  %28 = nn.conv2d(%27, meta[relay.Constant][20] /* ty=Tensor[(144, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=144, channels=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %29 = nn.bias_add(%28, meta[relay.Constant][21] /* ty=Tensor[(144), float32] */) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 144, 28, 28), float32] */;
  %31 = nn.conv2d(%30, meta[relay.Constant][22] /* ty=Tensor[(32, 144, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %32 = nn.bias_add(%31, meta[relay.Constant][23] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %33 = nn.conv2d(%32, meta[relay.Constant][24] /* ty=Tensor[(192, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %34 = nn.bias_add(%33, meta[relay.Constant][25] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %35 = clip(%34, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %36 = nn.conv2d(%35, meta[relay.Constant][26] /* ty=Tensor[(192, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %37 = nn.bias_add(%36, meta[relay.Constant][27] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %38 = clip(%37, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %39 = nn.conv2d(%38, meta[relay.Constant][28] /* ty=Tensor[(32, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %40 = nn.bias_add(%39, meta[relay.Constant][29] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %41 = add(%32, %40) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %42 = nn.conv2d(%41, meta[relay.Constant][30] /* ty=Tensor[(192, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %43 = nn.bias_add(%42, meta[relay.Constant][31] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %44 = clip(%43, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %45 = nn.conv2d(%44, meta[relay.Constant][32] /* ty=Tensor[(192, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %46 = nn.bias_add(%45, meta[relay.Constant][33] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %47 = clip(%46, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %48 = nn.conv2d(%47, meta[relay.Constant][34] /* ty=Tensor[(32, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=32, kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %49 = nn.bias_add(%48, meta[relay.Constant][35] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %50 = add(%41, %49) /* ty=Tensor[(1, 32, 28, 28), float32] */;
  %51 = nn.conv2d(%50, meta[relay.Constant][36] /* ty=Tensor[(192, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=192, kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %52 = nn.bias_add(%51, meta[relay.Constant][37] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %53 = clip(%52, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 28, 28), float32] */;
  %54 = nn.conv2d(%53, meta[relay.Constant][38] /* ty=Tensor[(192, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=192, channels=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %55 = nn.bias_add(%54, meta[relay.Constant][39] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %56 = clip(%55, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 14, 14), float32] */;
  %57 = nn.conv2d(%56, meta[relay.Constant][40] /* ty=Tensor[(64, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %58 = nn.bias_add(%57, meta[relay.Constant][41] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %59 = nn.conv2d(%58, meta[relay.Constant][42] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %60 = nn.bias_add(%59, meta[relay.Constant][43] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %61 = clip(%60, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %62 = nn.conv2d(%61, meta[relay.Constant][44] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %63 = nn.bias_add(%62, meta[relay.Constant][45] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %64 = clip(%63, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %65 = nn.conv2d(%64, meta[relay.Constant][46] /* ty=Tensor[(64, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %66 = nn.bias_add(%65, meta[relay.Constant][47] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %67 = add(%58, %66) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %68 = nn.conv2d(%67, meta[relay.Constant][48] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %69 = nn.bias_add(%68, meta[relay.Constant][49] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %70 = clip(%69, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %71 = nn.conv2d(%70, meta[relay.Constant][50] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %72 = nn.bias_add(%71, meta[relay.Constant][51] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %73 = clip(%72, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %74 = nn.conv2d(%73, meta[relay.Constant][52] /* ty=Tensor[(64, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %75 = nn.bias_add(%74, meta[relay.Constant][53] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %76 = add(%67, %75) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %77 = nn.conv2d(%76, meta[relay.Constant][54] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %78 = nn.bias_add(%77, meta[relay.Constant][55] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %79 = clip(%78, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %80 = nn.conv2d(%79, meta[relay.Constant][56] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %81 = nn.bias_add(%80, meta[relay.Constant][57] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %82 = clip(%81, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %83 = nn.conv2d(%82, meta[relay.Constant][58] /* ty=Tensor[(64, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %84 = nn.bias_add(%83, meta[relay.Constant][59] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %85 = add(%76, %84) /* ty=Tensor[(1, 64, 14, 14), float32] */;
  %86 = nn.conv2d(%85, meta[relay.Constant][60] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=384, kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %87 = nn.bias_add(%86, meta[relay.Constant][61] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %88 = clip(%87, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %89 = nn.conv2d(%88, meta[relay.Constant][62] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, channels=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %90 = nn.bias_add(%89, meta[relay.Constant][63] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %91 = clip(%90, a_min=0f, a_max=6f) /* ty=Tensor[(1, 384, 14, 14), float32] */;
  %92 = nn.conv2d(%91, meta[relay.Constant][64] /* ty=Tensor[(96, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %93 = nn.bias_add(%92, meta[relay.Constant][65] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %94 = nn.conv2d(%93, meta[relay.Constant][66] /* ty=Tensor[(576, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %95 = nn.bias_add(%94, meta[relay.Constant][67] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %96 = clip(%95, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %97 = nn.conv2d(%96, meta[relay.Constant][68] /* ty=Tensor[(576, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %98 = nn.bias_add(%97, meta[relay.Constant][69] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %99 = clip(%98, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %100 = nn.conv2d(%99, meta[relay.Constant][70] /* ty=Tensor[(96, 576, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %101 = nn.bias_add(%100, meta[relay.Constant][71] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %102 = add(%93, %101) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %103 = nn.conv2d(%102, meta[relay.Constant][72] /* ty=Tensor[(576, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %104 = nn.bias_add(%103, meta[relay.Constant][73] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %105 = clip(%104, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %106 = nn.conv2d(%105, meta[relay.Constant][74] /* ty=Tensor[(576, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %107 = nn.bias_add(%106, meta[relay.Constant][75] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %108 = clip(%107, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %109 = nn.conv2d(%108, meta[relay.Constant][76] /* ty=Tensor[(96, 576, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=96, kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %110 = nn.bias_add(%109, meta[relay.Constant][77] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %111 = add(%102, %110) /* ty=Tensor[(1, 96, 14, 14), float32] */;
  %112 = nn.conv2d(%111, meta[relay.Constant][78] /* ty=Tensor[(576, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=576, kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %113 = nn.bias_add(%112, meta[relay.Constant][79] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %114 = clip(%113, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 14, 14), float32] */;
  %115 = nn.conv2d(%114, meta[relay.Constant][80] /* ty=Tensor[(576, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=576, channels=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %116 = nn.bias_add(%115, meta[relay.Constant][81] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 576, 7, 7), float32] */;
  %118 = nn.conv2d(%117, meta[relay.Constant][82] /* ty=Tensor[(160, 576, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %119 = nn.bias_add(%118, meta[relay.Constant][83] /* ty=Tensor[(160), float32] */) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %120 = nn.conv2d(%119, meta[relay.Constant][84] /* ty=Tensor[(960, 160, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %121 = nn.bias_add(%120, meta[relay.Constant][85] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %122 = clip(%121, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %123 = nn.conv2d(%122, meta[relay.Constant][86] /* ty=Tensor[(960, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %124 = nn.bias_add(%123, meta[relay.Constant][87] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %125 = clip(%124, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %126 = nn.conv2d(%125, meta[relay.Constant][88] /* ty=Tensor[(160, 960, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %127 = nn.bias_add(%126, meta[relay.Constant][89] /* ty=Tensor[(160), float32] */) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %128 = add(%119, %127) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %129 = nn.conv2d(%128, meta[relay.Constant][90] /* ty=Tensor[(960, 160, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %130 = nn.bias_add(%129, meta[relay.Constant][91] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %131 = clip(%130, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %132 = nn.conv2d(%131, meta[relay.Constant][92] /* ty=Tensor[(960, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %133 = nn.bias_add(%132, meta[relay.Constant][93] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %134 = clip(%133, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %135 = nn.conv2d(%134, meta[relay.Constant][94] /* ty=Tensor[(160, 960, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=160, kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %136 = nn.bias_add(%135, meta[relay.Constant][95] /* ty=Tensor[(160), float32] */) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %137 = add(%128, %136) /* ty=Tensor[(1, 160, 7, 7), float32] */;
  %138 = nn.conv2d(%137, meta[relay.Constant][96] /* ty=Tensor[(960, 160, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=960, kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %139 = nn.bias_add(%138, meta[relay.Constant][97] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %140 = clip(%139, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %141 = nn.conv2d(%140, meta[relay.Constant][98] /* ty=Tensor[(960, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=960, channels=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %142 = nn.bias_add(%141, meta[relay.Constant][99] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %143 = clip(%142, a_min=0f, a_max=6f) /* ty=Tensor[(1, 960, 7, 7), float32] */;
  %144 = nn.conv2d(%143, meta[relay.Constant][100] /* ty=Tensor[(320, 960, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=320, kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %145 = nn.bias_add(%144, meta[relay.Constant][101] /* ty=Tensor[(320), float32] */) /* ty=Tensor[(1, 320, 7, 7), float32] */;
  %146 = nn.conv2d(%145, meta[relay.Constant][102] /* ty=Tensor[(1280, 320, 1, 1), float32] */, padding=[0, 0, 0, 0], channels=1280, kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %147 = nn.bias_add(%146, meta[relay.Constant][103] /* ty=Tensor[(1280), float32] */) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %148 = clip(%147, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 7, 7), float32] */;
  %149 = nn.global_avg_pool2d(%148) /* ty=Tensor[(1, 1280, 1, 1), float32] */;
  %150 = reshape(%149, newshape=[1, -1]) /* ty=Tensor[(1, 1280), float32] */;
  %151 = nn.batch_flatten(%150) /* ty=Tensor[(1, 1280), float32] */;
  %152 = nn.dense(%151, meta[relay.Constant][104] /* ty=Tensor[(1000, 1280), float32] */, units=1000) /* ty=Tensor[(1, 1000), float32] */;
  add(%152, meta[relay.Constant][105] /* ty=Tensor[(1000), float32] */) /* ty=Tensor[(1, 1000), float32] */
}