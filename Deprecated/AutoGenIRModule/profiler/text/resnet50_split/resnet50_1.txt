def @main(%resnetv24_stage3_conv1_weight: Tensor[(256, 256, 3, 3), float32], %resnetv24_stage3_conv9_weight: Tensor[(1024, 256, 1, 1), float32], %resnetv24_stage3_batchnorm16_running_mean: Tensor[(256), float32], %resnetv24_stage3_batchnorm17_beta: Tensor[(256), float32], %resnetv24_stage1_batchnorm2_running_mean: Tensor[(64), float32], %resnetv24_stage2_batchnorm7_gamma: Tensor[(128), float32], %resnetv24_stage2_batchnorm6_running_var: Tensor[(512), float32], %resnetv24_stage3_batchnorm11_running_var: Tensor[(256), float32], %resnetv24_stage4_batchnorm8_running_var: Tensor[(512), float32], %resnetv24_stage4_batchnorm7_beta: Tensor[(512), float32], %resnetv24_stage2_batchnorm11_beta: Tensor[(128), float32], %resnetv24_batchnorm2_running_mean: Tensor[(2048), float32], %resnetv24_stage2_batchnorm0_running_var: Tensor[(256), float32], %resnetv24_stage4_batchnorm5_beta: Tensor[(512), float32], %resnetv24_stage3_batchnorm5_running_mean: Tensor[(256), float32], %resnetv24_stage3_batchnorm8_gamma: Tensor[(256), float32], %resnetv24_stage2_batchnorm3_gamma: Tensor[(512), float32], %resnetv24_stage3_batchnorm10_beta: Tensor[(256), float32], %resnetv24_stage2_batchnorm2_beta: Tensor[(128), float32], %resnetv24_stage2_batchnorm4_gamma: Tensor[(128), float32], %resnetv24_stage1_conv6_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage4_conv6_weight: Tensor[(2048, 512, 1, 1), float32], %resnetv24_stage3_batchnorm0_gamma: Tensor[(512), float32], %resnetv24_stage3_conv0_weight: Tensor[(256, 512, 1, 1), float32], %resnetv24_stage3_batchnorm11_running_mean: Tensor[(256), float32], %resnetv24_stage3_batchnorm16_beta: Tensor[(256), float32], %resnetv24_stage3_batchnorm13_beta: Tensor[(256), float32], %resnetv24_stage3_batchnorm11_gamma: Tensor[(256), float32], %resnetv24_stage4_batchnorm4_running_mean: Tensor[(512), float32], %resnetv24_stage4_batchnorm7_running_mean: Tensor[(512), float32], %resnetv24_stage1_batchnorm1_running_var: Tensor[(64), float32], %resnetv24_stage4_batchnorm8_gamma: Tensor[(512), float32], %resnetv24_stage4_batchnorm8_beta: Tensor[(512), float32], %resnetv24_stage2_batchnorm4_running_var: Tensor[(128), float32], %resnetv24_stage4_batchnorm2_running_mean: Tensor[(512), float32], %resnetv24_stage2_batchnorm3_beta: Tensor[(512), float32], %resnetv24_stage1_batchnorm4_gamma: Tensor[(64), float32], %resnetv24_stage3_batchnorm3_running_var: Tensor[(1024), float32], %resnetv24_stage2_batchnorm8_running_mean: Tensor[(128), float32], %resnetv24_stage3_batchnorm11_beta: Tensor[(256), float32], %resnetv24_stage3_batchnorm9_running_var: Tensor[(1024), float32], %resnetv24_stage1_batchnorm5_gamma: Tensor[(64), float32], %resnetv24_stage2_batchnorm5_gamma: Tensor[(128), float32], %resnetv24_stage3_batchnorm12_gamma: Tensor[(1024), float32], %resnetv24_stage1_conv3_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage2_batchnorm1_running_mean: Tensor[(128), float32], %resnetv24_stage3_batchnorm9_gamma: Tensor[(1024), float32], %resnetv24_stage1_batchnorm0_beta: Tensor[(64), float32], %resnetv24_stage4_batchnorm3_running_var: Tensor[(2048), float32], %resnetv24_stage1_batchnorm0_gamma: Tensor[(64), float32], %resnetv24_stage3_batchnorm10_gamma: Tensor[(256), float32], %resnetv24_stage2_batchnorm8_running_var: Tensor[(128), float32], %resnetv24_stage4_batchnorm1_beta: Tensor[(512), float32], %resnetv24_stage2_batchnorm5_running_var: Tensor[(128), float32], %resnetv24_batchnorm1_gamma: Tensor[(64), float32], %resnetv24_stage2_batchnorm6_running_mean: Tensor[(512), float32], %resnetv24_stage3_conv13_weight: Tensor[(256, 1024, 1, 1), float32], %resnetv24_stage2_batchnorm6_beta: Tensor[(512), float32], %resnetv24_stage2_batchnorm9_running_mean: Tensor[(512), float32], %resnetv24_stage3_batchnorm4_gamma: Tensor[(256), float32], %resnetv24_stage4_batchnorm3_running_mean: Tensor[(2048), float32], %resnetv24_stage3_conv17_weight: Tensor[(256, 256, 3, 3), float32], %resnetv24_batchnorm2_gamma: Tensor[(2048), float32], %resnetv24_stage3_batchnorm15_running_mean: Tensor[(1024), float32], %resnetv24_stage2_conv5_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage3_batchnorm8_running_mean: Tensor[(256), float32], %resnetv24_stage4_batchnorm5_running_mean: Tensor[(512), float32], %resnetv24_stage3_conv11_weight: Tensor[(256, 256, 3, 3), float32], %resnetv24_stage3_batchnorm6_gamma: Tensor[(1024), float32], %resnetv24_stage3_batchnorm1_gamma: Tensor[(256), float32], %resnetv24_stage3_batchnorm10_running_var: Tensor[(256), float32], %resnetv24_stage2_conv8_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage4_conv5_weight: Tensor[(512, 512, 3, 3), float32], %resnetv24_stage2_batchnorm2_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm0_beta: Tensor[(256), float32], %resnetv24_dense0_bias: Tensor[(1000), float32]), %resnetv24_stage3_batchnorm17_running_mean: Tensor[(256), float32], %resnetv24_stage3_conv2_weight: Tensor[(1024, 256, 1, 1), float32], %resnetv24_stage4_batchnorm6_beta: Tensor[(2048), float32], %resnetv24_stage4_batchnorm6_running_var: Tensor[(2048), float32], %resnetv24_stage2_batchnorm1_running_var: Tensor[(128), float32], %resnetv24_stage4_conv7_weight: Tensor[(512, 2048, 1, 1), float32], %resnetv24_stage3_batchnorm5_running_var: Tensor[(256), float32], %resnetv24_stage1_batchnorm1_beta: Tensor[(64), float32], %resnetv24_stage1_batchnorm5_running_mean: Tensor[(64), float32], %resnetv24_stage4_batchnorm1_gamma: Tensor[(512), float32], %resnetv24_stage3_batchnorm5_gamma: Tensor[(256), float32], %resnetv24_stage3_conv18_weight: Tensor[(1024, 256, 1, 1), float32], %resnetv24_stage2_batchnorm3_running_mean: Tensor[(512), float32], %resnetv24_stage4_conv2_weight: Tensor[(2048, 512, 1, 1), float32], %resnetv24_stage1_batchnorm2_gamma: Tensor[(64), float32], %resnetv24_stage1_batchnorm1_running_mean: Tensor[(64), float32], %resnetv24_stage1_batchnorm3_running_mean: Tensor[(256), float32], %resnetv24_stage3_batchnorm15_gamma: Tensor[(1024), float32], %resnetv24_stage1_conv0_weight: Tensor[(64, 64, 1, 1), float32], %resnetv24_stage3_batchnorm8_beta: Tensor[(256), float32], %resnetv24_stage2_batchnorm7_running_mean: Tensor[(128), float32], %call_2: Tensor[(1, 64, 112, 112), float32], %resnetv24_stage4_batchnorm6_gamma: Tensor[(2048), float32], %resnetv24_stage3_batchnorm0_running_mean: Tensor[(512), float32], %resnetv24_stage2_batchnorm9_running_var: Tensor[(512), float32], %resnetv24_stage3_conv12_weight: Tensor[(1024, 256, 1, 1), float32], %resnetv24_stage2_batchnorm3_running_var: Tensor[(512), float32], %resnetv24_stage3_batchnorm2_beta: Tensor[(256), float32], %resnetv24_stage3_batchnorm14_gamma: Tensor[(256), float32], %resnetv24_stage3_batchnorm8_running_var: Tensor[(256), float32], %resnetv24_stage3_batchnorm5_beta: Tensor[(256), float32], %resnetv24_stage3_batchnorm1_running_var: Tensor[(256), float32], %resnetv24_stage3_conv14_weight: Tensor[(256, 256, 3, 3), float32], %resnetv24_stage3_conv16_weight: Tensor[(256, 1024, 1, 1), float32], %resnetv24_stage2_batchnorm8_beta: Tensor[(128), float32], %resnetv24_stage3_batchnorm16_gamma: Tensor[(256), float32], %resnetv24_stage3_batchnorm2_gamma: Tensor[(256), float32], %resnetv24_stage3_batchnorm16_running_var: Tensor[(256), float32], %resnetv24_stage4_conv9_weight: Tensor[(2048, 512, 1, 1), float32], %resnetv24_stage3_batchnorm14_running_mean: Tensor[(256), float32], %resnetv24_stage1_batchnorm5_running_var: Tensor[(64), float32], %resnetv24_stage3_batchnorm12_beta: Tensor[(1024), float32], %resnetv24_stage1_batchnorm7_running_var: Tensor[(64), float32], %resnetv24_stage2_batchnorm11_running_var: Tensor[(128), float32], %resnetv24_stage3_batchnorm9_beta: Tensor[(1024), float32], %resnetv24_stage2_conv10_weight: Tensor[(128, 512, 1, 1), float32], %resnetv24_stage4_batchnorm6_running_mean: Tensor[(2048), float32], %resnetv24_stage3_conv5_weight: Tensor[(256, 256, 3, 3), float32], %resnetv24_stage3_batchnorm2_running_mean: Tensor[(256), float32], %resnetv24_stage4_batchnorm0_beta: Tensor[(1024), float32], %resnetv24_stage2_conv0_weight: Tensor[(128, 256, 1, 1), float32], %resnetv24_stage1_batchnorm8_beta: Tensor[(64), float32], %resnetv24_stage2_batchnorm10_running_var: Tensor[(128), float32], %resnetv24_stage1_batchnorm8_running_mean: Tensor[(64), float32], %resnetv24_stage2_batchnorm9_gamma: Tensor[(512), float32], %resnetv24_stage3_batchnorm17_running_var: Tensor[(256), float32], %resnetv24_stage1_batchnorm3_beta: Tensor[(256), float32], %resnetv24_stage3_batchnorm6_running_mean: Tensor[(1024), float32], %resnetv24_stage4_batchnorm0_gamma: Tensor[(1024), float32], %resnetv24_stage3_batchnorm15_running_var: Tensor[(1024), float32], %resnetv24_stage1_batchnorm6_running_mean: Tensor[(256), float32], %resnetv24_stage2_batchnorm10_gamma: Tensor[(128), float32], %resnetv24_stage3_conv15_weight: Tensor[(1024, 256, 1, 1), float32], %resnetv24_batchnorm1_beta: Tensor[(64), float32], %resnetv24_stage4_batchnorm2_running_var: Tensor[(512), float32], %resnetv24_stage4_batchnorm4_running_var: Tensor[(512), float32], %resnetv24_stage1_batchnorm8_gamma: Tensor[(64), float32], %resnetv24_stage3_batchnorm13_gamma: Tensor[(256), float32], %resnetv24_batchnorm1_running_mean: Tensor[(64), float32], %resnetv24_stage3_conv3_weight: Tensor[(1024, 512, 1, 1), float32], %resnetv24_stage1_conv1_weight: Tensor[(64, 64, 3, 3), float32], %resnetv24_stage1_conv4_weight: Tensor[(64, 256, 1, 1), float32], %resnetv24_stage2_conv9_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage2_batchnorm7_beta: Tensor[(128), float32], %resnetv24_stage3_conv6_weight: Tensor[(1024, 256, 1, 1), float32], %resnetv24_stage2_conv1_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage4_batchnorm0_running_mean: Tensor[(1024), float32], %resnetv24_stage1_batchnorm2_running_var: Tensor[(64), float32], %resnetv24_stage2_conv3_weight: Tensor[(512, 256, 1, 1), float32], %resnetv24_stage2_batchnorm7_running_var: Tensor[(128), float32], %resnetv24_stage2_batchnorm5_running_mean: Tensor[(128), float32], %resnetv24_stage3_batchnorm6_beta: Tensor[(1024), float32], %resnetv24_stage3_conv8_weight: Tensor[(256, 256, 3, 3), float32], %resnetv24_stage2_conv11_weight: Tensor[(128, 128, 3, 3), float32], %resnetv24_stage3_batchnorm0_beta: Tensor[(512), float32], %resnetv24_stage4_batchnorm2_beta: Tensor[(512), float32], %resnetv24_stage2_batchnorm5_beta: Tensor[(128), float32], %resnetv24_stage3_batchnorm10_running_mean: Tensor[(256), float32], %resnetv24_stage3_batchnorm7_running_var: Tensor[(256), float32], %resnetv24_stage1_conv2_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage3_batchnorm0_running_var: Tensor[(512), float32], %resnetv24_stage1_batchnorm0_running_var: Tensor[(64), float32], %resnetv24_stage1_conv5_weight: Tensor[(64, 64, 3, 3), float32], %resnetv24_stage2_conv4_weight: Tensor[(128, 512, 1, 1), float32], %resnetv24_stage3_batchnorm3_beta: Tensor[(1024), float32], %resnetv24_stage2_batchnorm4_beta: Tensor[(128), float32], %resnetv24_stage4_conv4_weight: Tensor[(512, 2048, 1, 1), float32], %resnetv24_stage1_batchnorm3_gamma: Tensor[(256), float32], %resnetv24_stage3_conv7_weight: Tensor[(256, 1024, 1, 1), float32], %resnetv24_stage4_batchnorm4_gamma: Tensor[(512), float32], %resnetv24_stage1_batchnorm6_gamma: Tensor[(256), float32], %resnetv24_batchnorm2_running_var: Tensor[(2048), float32], %resnetv24_stage1_conv8_weight: Tensor[(64, 64, 3, 3), float32], %resnetv24_stage1_batchnorm0_running_mean: Tensor[(64), float32], %resnetv24_stage1_batchnorm4_running_mean: Tensor[(64), float32], %resnetv24_stage2_batchnorm4_running_mean: Tensor[(128), float32], %resnetv24_stage1_batchnorm8_running_var: Tensor[(64), float32], %resnetv24_stage3_batchnorm14_running_var: Tensor[(256), float32], %resnetv24_stage3_batchnorm12_running_var: Tensor[(1024), float32], %resnetv24_stage4_batchnorm0_running_var: Tensor[(1024), float32], %resnetv24_stage4_batchnorm5_running_var: Tensor[(512), float32], %resnetv24_stage2_batchnorm2_running_mean: Tensor[(128), float32], %resnetv24_stage3_batchnorm4_running_var: Tensor[(256), float32], %resnetv24_stage2_batchnorm11_running_mean: Tensor[(128), float32], %resnetv24_stage3_batchnorm14_beta: Tensor[(256), float32], %resnetv24_stage2_batchnorm1_gamma: Tensor[(128), float32], %resnetv24_stage3_conv4_weight: Tensor[(256, 1024, 1, 1), float32], %resnetv24_stage4_conv0_weight: Tensor[(512, 1024, 1, 1), float32], %resnetv24_stage4_conv1_weight: Tensor[(512, 512, 3, 3), float32], %resnetv24_stage1_batchnorm4_beta: Tensor[(64), float32], %resnetv24_stage3_batchnorm7_running_mean: Tensor[(256), float32], %resnetv24_stage3_batchnorm3_gamma: Tensor[(1024), float32], %resnetv24_stage4_batchnorm3_beta: Tensor[(2048), float32], %resnetv24_stage3_batchnorm4_running_mean: Tensor[(256), float32], %resnetv24_stage3_batchnorm2_running_var: Tensor[(256), float32], %resnetv24_stage4_batchnorm1_running_mean: Tensor[(512), float32], %resnetv24_stage3_batchnorm7_gamma: Tensor[(256), float32], %resnetv24_batchnorm1_running_var: Tensor[(64), float32], %resnetv24_stage1_batchnorm7_running_mean: Tensor[(64), float32], %resnetv24_stage2_batchnorm0_gamma: Tensor[(256), float32], %resnetv24_stage2_conv12_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage1_batchnorm2_beta: Tensor[(64), float32], %resnetv24_stage1_conv9_weight: Tensor[(256, 64, 1, 1), float32], %resnetv24_stage1_batchnorm6_beta: Tensor[(256), float32], %resnetv24_stage4_batchnorm1_running_var: Tensor[(512), float32], %resnetv24_stage2_conv2_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage3_batchnorm15_beta: Tensor[(1024), float32], %resnetv24_stage3_batchnorm6_running_var: Tensor[(1024), float32], %resnetv24_stage4_conv8_weight: Tensor[(512, 512, 3, 3), float32], %resnetv24_stage3_batchnorm1_beta: Tensor[(256), float32], %resnetv24_stage3_batchnorm1_running_mean: Tensor[(256), float32], %resnetv24_stage4_batchnorm7_gamma: Tensor[(512), float32], %resnetv24_stage4_batchnorm5_gamma: Tensor[(512), float32], %resnetv24_stage3_batchnorm3_running_mean: Tensor[(1024), float32], %resnetv24_stage2_batchnorm9_beta: Tensor[(512), float32], %resnetv24_stage3_conv10_weight: Tensor[(256, 1024, 1, 1), float32], %resnetv24_stage4_batchnorm3_gamma: Tensor[(2048), float32], %resnetv24_stage3_batchnorm9_running_mean: Tensor[(1024), float32], %resnetv24_stage3_batchnorm17_gamma: Tensor[(256), float32], %resnetv24_stage2_batchnorm2_gamma: Tensor[(128), float32], %resnetv24_stage1_batchnorm5_beta: Tensor[(64), float32], %resnetv24_stage4_batchnorm4_beta: Tensor[(512), float32], %resnetv24_stage4_batchnorm7_running_var: Tensor[(512), float32], %resnetv24_stage3_batchnorm12_running_mean: Tensor[(1024), float32], %resnetv24_stage1_batchnorm7_gamma: Tensor[(64), float32], %resnetv24_stage2_conv6_weight: Tensor[(512, 128, 1, 1), float32], %resnetv24_stage1_batchnorm4_running_var: Tensor[(64), float32], %resnetv24_stage2_conv7_weight: Tensor[(128, 512, 1, 1), float32], %resnetv24_stage4_conv3_weight: Tensor[(2048, 1024, 1, 1), float32], %resnetv24_batchnorm2_beta: Tensor[(2048), float32], %resnetv24_stage1_batchnorm3_running_var: Tensor[(256), float32], %resnetv24_stage4_batchnorm2_gamma: Tensor[(512), float32], %resnetv24_stage2_batchnorm6_gamma: Tensor[(512), float32], %resnetv24_stage1_conv7_weight: Tensor[(64, 256, 1, 1), float32], %resnetv24_stage2_batchnorm8_gamma: Tensor[(128), float32], %resnetv24_stage3_batchnorm13_running_mean: Tensor[(256), float32], %resnetv24_stage4_batchnorm8_running_mean: Tensor[(512), float32], %resnetv24_stage3_batchnorm4_beta: Tensor[(256), float32], %resnetv24_stage2_batchnorm11_gamma: Tensor[(128), float32], %resnetv24_stage3_batchnorm7_beta: Tensor[(256), float32], %resnetv24_stage1_batchnorm7_beta: Tensor[(64), float32], %resnetv24_stage2_batchnorm10_beta: Tensor[(128), float32], %resnetv24_stage1_batchnorm1_gamma: Tensor[(64), float32], %resnetv24_stage2_batchnorm10_running_mean: Tensor[(128), float32], %resnetv24_dense0_weight: Tensor[(1000, 2048), float32], %resnetv24_stage3_batchnorm13_running_var: Tensor[(256), float32], %resnetv24_stage2_batchnorm0_running_mean: Tensor[(256), float32], %resnetv24_stage2_batchnorm1_beta: Tensor[(128), float32], %resnetv24_stage1_batchnorm6_running_var: Tensor[(256), float32] {
  %3 = nn.batch_norm(%2, %resnetv24_batchnorm1_gamma, %resnetv24_batchnorm1_beta, %resnetv24_batchnorm1_running_mean, %resnetv24_batchnorm1_running_var) /* ty=(Tensor[(1, 64, 112, 112), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %4 = %3.0;
  %5 = nn.relu(%4) /* ty=Tensor[(1, 64, 112, 112), float32] */;
  %6 = nn.max_pool2d(%5, pool_size=[3, 3], strides=[2, 2], padding=[1, 1, 1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %7 = nn.batch_norm(%6, %resnetv24_stage1_batchnorm0_gamma, %resnetv24_stage1_batchnorm0_beta, %resnetv24_stage1_batchnorm0_running_mean, %resnetv24_stage1_batchnorm0_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %8 = %7.0;
  %9 = nn.relu(%8) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %10 = nn.conv2d(%9, %resnetv24_stage1_conv0_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %11 = nn.batch_norm(%10, %resnetv24_stage1_batchnorm1_gamma, %resnetv24_stage1_batchnorm1_beta, %resnetv24_stage1_batchnorm1_running_mean, %resnetv24_stage1_batchnorm1_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %12 = %11.0;
  %13 = nn.relu(%12) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %14 = nn.conv2d(%13, %resnetv24_stage1_conv1_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %15 = nn.batch_norm(%14, %resnetv24_stage1_batchnorm2_gamma, %resnetv24_stage1_batchnorm2_beta, %resnetv24_stage1_batchnorm2_running_mean, %resnetv24_stage1_batchnorm2_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %16 = %15.0;
  %17 = nn.relu(%16) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %18 = nn.conv2d(%17, %resnetv24_stage1_conv2_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %19 = nn.conv2d(%9, %resnetv24_stage1_conv3_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %20 = add(%18, %19) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %21 = nn.batch_norm(%20, %resnetv24_stage1_batchnorm3_gamma, %resnetv24_stage1_batchnorm3_beta, %resnetv24_stage1_batchnorm3_running_mean, %resnetv24_stage1_batchnorm3_running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %22 = %21.0;
  %23 = nn.relu(%22) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %24 = nn.conv2d(%23, %resnetv24_stage1_conv4_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %25 = nn.batch_norm(%24, %resnetv24_stage1_batchnorm4_gamma, %resnetv24_stage1_batchnorm4_beta, %resnetv24_stage1_batchnorm4_running_mean, %resnetv24_stage1_batchnorm4_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %26 = %25.0;
  %27 = nn.relu(%26) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %28 = nn.conv2d(%27, %resnetv24_stage1_conv5_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %29 = nn.batch_norm(%28, %resnetv24_stage1_batchnorm5_gamma, %resnetv24_stage1_batchnorm5_beta, %resnetv24_stage1_batchnorm5_running_mean, %resnetv24_stage1_batchnorm5_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %30 = %29.0;
  %31 = nn.relu(%30) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %32 = nn.conv2d(%31, %resnetv24_stage1_conv6_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %33 = add(%32, %20) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %34 = nn.batch_norm(%33, %resnetv24_stage1_batchnorm6_gamma, %resnetv24_stage1_batchnorm6_beta, %resnetv24_stage1_batchnorm6_running_mean, %resnetv24_stage1_batchnorm6_running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %35 = %34.0;
  %36 = nn.relu(%35) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %37 = nn.conv2d(%36, %resnetv24_stage1_conv7_weight, padding=[0, 0, 0, 0], channels=64, kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %38 = nn.batch_norm(%37, %resnetv24_stage1_batchnorm7_gamma, %resnetv24_stage1_batchnorm7_beta, %resnetv24_stage1_batchnorm7_running_mean, %resnetv24_stage1_batchnorm7_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %39 = %38.0;
  %40 = nn.relu(%39) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %41 = nn.conv2d(%40, %resnetv24_stage1_conv8_weight, padding=[1, 1, 1, 1], channels=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %42 = nn.batch_norm(%41, %resnetv24_stage1_batchnorm8_gamma, %resnetv24_stage1_batchnorm8_beta, %resnetv24_stage1_batchnorm8_running_mean, %resnetv24_stage1_batchnorm8_running_var) /* ty=(Tensor[(1, 64, 56, 56), float32], Tensor[(64), float32], Tensor[(64), float32]) */;
  %43 = %42.0;
  %44 = nn.relu(%43) /* ty=Tensor[(1, 64, 56, 56), float32] */;
  %45 = nn.conv2d(%44, %resnetv24_stage1_conv9_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %46 = add(%45, %33) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %47 = nn.batch_norm(%46, %resnetv24_stage2_batchnorm0_gamma, %resnetv24_stage2_batchnorm0_beta, %resnetv24_stage2_batchnorm0_running_mean, %resnetv24_stage2_batchnorm0_running_var) /* ty=(Tensor[(1, 256, 56, 56), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %48 = %47.0;
  %49 = nn.relu(%48) /* ty=Tensor[(1, 256, 56, 56), float32] */;
  %50 = nn.conv2d(%49, %resnetv24_stage2_conv0_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 56, 56), float32] */;
  %51 = nn.batch_norm(%50, %resnetv24_stage2_batchnorm1_gamma, %resnetv24_stage2_batchnorm1_beta, %resnetv24_stage2_batchnorm1_running_mean, %resnetv24_stage2_batchnorm1_running_var) /* ty=(Tensor[(1, 128, 56, 56), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %52 = %51.0;
  %53 = nn.relu(%52) /* ty=Tensor[(1, 128, 56, 56), float32] */;
  %54 = nn.conv2d(%53, %resnetv24_stage2_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %55 = nn.batch_norm(%54, %resnetv24_stage2_batchnorm2_gamma, %resnetv24_stage2_batchnorm2_beta, %resnetv24_stage2_batchnorm2_running_mean, %resnetv24_stage2_batchnorm2_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %56 = %55.0;
  %57 = nn.relu(%56) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %58 = nn.conv2d(%57, %resnetv24_stage2_conv2_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %59 = nn.conv2d(%49, %resnetv24_stage2_conv3_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %60 = add(%58, %59) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %61 = nn.batch_norm(%60, %resnetv24_stage2_batchnorm3_gamma, %resnetv24_stage2_batchnorm3_beta, %resnetv24_stage2_batchnorm3_running_mean, %resnetv24_stage2_batchnorm3_running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %62 = %61.0;
  %63 = nn.relu(%62) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %64 = nn.conv2d(%63, %resnetv24_stage2_conv4_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %65 = nn.batch_norm(%64, %resnetv24_stage2_batchnorm4_gamma, %resnetv24_stage2_batchnorm4_beta, %resnetv24_stage2_batchnorm4_running_mean, %resnetv24_stage2_batchnorm4_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %66 = %65.0;
  %67 = nn.relu(%66) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %68 = nn.conv2d(%67, %resnetv24_stage2_conv5_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %69 = nn.batch_norm(%68, %resnetv24_stage2_batchnorm5_gamma, %resnetv24_stage2_batchnorm5_beta, %resnetv24_stage2_batchnorm5_running_mean, %resnetv24_stage2_batchnorm5_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %70 = %69.0;
  %71 = nn.relu(%70) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %72 = nn.conv2d(%71, %resnetv24_stage2_conv6_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %73 = add(%72, %60) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %74 = nn.batch_norm(%73, %resnetv24_stage2_batchnorm6_gamma, %resnetv24_stage2_batchnorm6_beta, %resnetv24_stage2_batchnorm6_running_mean, %resnetv24_stage2_batchnorm6_running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %75 = %74.0;
  %76 = nn.relu(%75) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %77 = nn.conv2d(%76, %resnetv24_stage2_conv7_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %78 = nn.batch_norm(%77, %resnetv24_stage2_batchnorm7_gamma, %resnetv24_stage2_batchnorm7_beta, %resnetv24_stage2_batchnorm7_running_mean, %resnetv24_stage2_batchnorm7_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %79 = %78.0;
  %80 = nn.relu(%79) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %81 = nn.conv2d(%80, %resnetv24_stage2_conv8_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %82 = nn.batch_norm(%81, %resnetv24_stage2_batchnorm8_gamma, %resnetv24_stage2_batchnorm8_beta, %resnetv24_stage2_batchnorm8_running_mean, %resnetv24_stage2_batchnorm8_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %83 = %82.0;
  %84 = nn.relu(%83) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %85 = nn.conv2d(%84, %resnetv24_stage2_conv9_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %86 = add(%85, %73) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %87 = nn.batch_norm(%86, %resnetv24_stage2_batchnorm9_gamma, %resnetv24_stage2_batchnorm9_beta, %resnetv24_stage2_batchnorm9_running_mean, %resnetv24_stage2_batchnorm9_running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %88 = %87.0;
  %89 = nn.relu(%88) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %90 = nn.conv2d(%89, %resnetv24_stage2_conv10_weight, padding=[0, 0, 0, 0], channels=128, kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %91 = nn.batch_norm(%90, %resnetv24_stage2_batchnorm10_gamma, %resnetv24_stage2_batchnorm10_beta, %resnetv24_stage2_batchnorm10_running_mean, %resnetv24_stage2_batchnorm10_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %92 = %91.0;
  %93 = nn.relu(%92) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %94 = nn.conv2d(%93, %resnetv24_stage2_conv11_weight, padding=[1, 1, 1, 1], channels=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %95 = nn.batch_norm(%94, %resnetv24_stage2_batchnorm11_gamma, %resnetv24_stage2_batchnorm11_beta, %resnetv24_stage2_batchnorm11_running_mean, %resnetv24_stage2_batchnorm11_running_var) /* ty=(Tensor[(1, 128, 28, 28), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %96 = %95.0;
  %97 = nn.relu(%96) /* ty=Tensor[(1, 128, 28, 28), float32] */;
  %98 = nn.conv2d(%97, %resnetv24_stage2_conv12_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %99 = add(%98, %86) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %100 = nn.batch_norm(%99, %resnetv24_stage3_batchnorm0_gamma, %resnetv24_stage3_batchnorm0_beta, %resnetv24_stage3_batchnorm0_running_mean, %resnetv24_stage3_batchnorm0_running_var) /* ty=(Tensor[(1, 512, 28, 28), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %101 = %100.0;
  %102 = nn.relu(%101) /* ty=Tensor[(1, 512, 28, 28), float32] */;
  %103 = nn.conv2d(%102, %resnetv24_stage3_conv0_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 28, 28), float32] */;
  %104 = nn.batch_norm(%103, %resnetv24_stage3_batchnorm1_gamma, %resnetv24_stage3_batchnorm1_beta, %resnetv24_stage3_batchnorm1_running_mean, %resnetv24_stage3_batchnorm1_running_var) /* ty=(Tensor[(1, 256, 28, 28), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %105 = %104.0;
  %106 = nn.relu(%105) /* ty=Tensor[(1, 256, 28, 28), float32] */;
  %107 = nn.conv2d(%106, %resnetv24_stage3_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %108 = nn.batch_norm(%107, %resnetv24_stage3_batchnorm2_gamma, %resnetv24_stage3_batchnorm2_beta, %resnetv24_stage3_batchnorm2_running_mean, %resnetv24_stage3_batchnorm2_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %109 = %108.0;
  %110 = nn.relu(%109) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %111 = nn.conv2d(%110, %resnetv24_stage3_conv2_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %112 = nn.conv2d(%102, %resnetv24_stage3_conv3_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %113 = add(%111, %112) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %114 = nn.batch_norm(%113, %resnetv24_stage3_batchnorm3_gamma, %resnetv24_stage3_batchnorm3_beta, %resnetv24_stage3_batchnorm3_running_mean, %resnetv24_stage3_batchnorm3_running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %115 = %114.0;
  %116 = nn.relu(%115) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %117 = nn.conv2d(%116, %resnetv24_stage3_conv4_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %118 = nn.batch_norm(%117, %resnetv24_stage3_batchnorm4_gamma, %resnetv24_stage3_batchnorm4_beta, %resnetv24_stage3_batchnorm4_running_mean, %resnetv24_stage3_batchnorm4_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %119 = %118.0;
  %120 = nn.relu(%119) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %121 = nn.conv2d(%120, %resnetv24_stage3_conv5_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %122 = nn.batch_norm(%121, %resnetv24_stage3_batchnorm5_gamma, %resnetv24_stage3_batchnorm5_beta, %resnetv24_stage3_batchnorm5_running_mean, %resnetv24_stage3_batchnorm5_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %123 = %122.0;
  %124 = nn.relu(%123) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %125 = nn.conv2d(%124, %resnetv24_stage3_conv6_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %126 = add(%125, %113) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %127 = nn.batch_norm(%126, %resnetv24_stage3_batchnorm6_gamma, %resnetv24_stage3_batchnorm6_beta, %resnetv24_stage3_batchnorm6_running_mean, %resnetv24_stage3_batchnorm6_running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %128 = %127.0;
  %129 = nn.relu(%128) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %130 = nn.conv2d(%129, %resnetv24_stage3_conv7_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %131 = nn.batch_norm(%130, %resnetv24_stage3_batchnorm7_gamma, %resnetv24_stage3_batchnorm7_beta, %resnetv24_stage3_batchnorm7_running_mean, %resnetv24_stage3_batchnorm7_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %132 = %131.0;
  %133 = nn.relu(%132) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %134 = nn.conv2d(%133, %resnetv24_stage3_conv8_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %135 = nn.batch_norm(%134, %resnetv24_stage3_batchnorm8_gamma, %resnetv24_stage3_batchnorm8_beta, %resnetv24_stage3_batchnorm8_running_mean, %resnetv24_stage3_batchnorm8_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %136 = %135.0;
  %137 = nn.relu(%136) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %138 = nn.conv2d(%137, %resnetv24_stage3_conv9_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %139 = add(%138, %126) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %140 = nn.batch_norm(%139, %resnetv24_stage3_batchnorm9_gamma, %resnetv24_stage3_batchnorm9_beta, %resnetv24_stage3_batchnorm9_running_mean, %resnetv24_stage3_batchnorm9_running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %141 = %140.0;
  %142 = nn.relu(%141) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %143 = nn.conv2d(%142, %resnetv24_stage3_conv10_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %144 = nn.batch_norm(%143, %resnetv24_stage3_batchnorm10_gamma, %resnetv24_stage3_batchnorm10_beta, %resnetv24_stage3_batchnorm10_running_mean, %resnetv24_stage3_batchnorm10_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %145 = %144.0;
  %146 = nn.relu(%145) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %147 = nn.conv2d(%146, %resnetv24_stage3_conv11_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %148 = nn.batch_norm(%147, %resnetv24_stage3_batchnorm11_gamma, %resnetv24_stage3_batchnorm11_beta, %resnetv24_stage3_batchnorm11_running_mean, %resnetv24_stage3_batchnorm11_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %149 = %148.0;
  %150 = nn.relu(%149) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %151 = nn.conv2d(%150, %resnetv24_stage3_conv12_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %152 = add(%151, %139) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %153 = nn.batch_norm(%152, %resnetv24_stage3_batchnorm12_gamma, %resnetv24_stage3_batchnorm12_beta, %resnetv24_stage3_batchnorm12_running_mean, %resnetv24_stage3_batchnorm12_running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %154 = %153.0;
  %155 = nn.relu(%154) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %156 = nn.conv2d(%155, %resnetv24_stage3_conv13_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %157 = nn.batch_norm(%156, %resnetv24_stage3_batchnorm13_gamma, %resnetv24_stage3_batchnorm13_beta, %resnetv24_stage3_batchnorm13_running_mean, %resnetv24_stage3_batchnorm13_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %158 = %157.0;
  %159 = nn.relu(%158) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %160 = nn.conv2d(%159, %resnetv24_stage3_conv14_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %161 = nn.batch_norm(%160, %resnetv24_stage3_batchnorm14_gamma, %resnetv24_stage3_batchnorm14_beta, %resnetv24_stage3_batchnorm14_running_mean, %resnetv24_stage3_batchnorm14_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %162 = %161.0;
  %163 = nn.relu(%162) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %164 = nn.conv2d(%163, %resnetv24_stage3_conv15_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %165 = add(%164, %152) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %166 = nn.batch_norm(%165, %resnetv24_stage3_batchnorm15_gamma, %resnetv24_stage3_batchnorm15_beta, %resnetv24_stage3_batchnorm15_running_mean, %resnetv24_stage3_batchnorm15_running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %167 = %166.0;
  %168 = nn.relu(%167) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %169 = nn.conv2d(%168, %resnetv24_stage3_conv16_weight, padding=[0, 0, 0, 0], channels=256, kernel_size=[1, 1]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %170 = nn.batch_norm(%169, %resnetv24_stage3_batchnorm16_gamma, %resnetv24_stage3_batchnorm16_beta, %resnetv24_stage3_batchnorm16_running_mean, %resnetv24_stage3_batchnorm16_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %171 = %170.0;
  %172 = nn.relu(%171) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %173 = nn.conv2d(%172, %resnetv24_stage3_conv17_weight, padding=[1, 1, 1, 1], channels=256, kernel_size=[3, 3]) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %174 = nn.batch_norm(%173, %resnetv24_stage3_batchnorm17_gamma, %resnetv24_stage3_batchnorm17_beta, %resnetv24_stage3_batchnorm17_running_mean, %resnetv24_stage3_batchnorm17_running_var) /* ty=(Tensor[(1, 256, 14, 14), float32], Tensor[(256), float32], Tensor[(256), float32]) */;
  %175 = %174.0;
  %176 = nn.relu(%175) /* ty=Tensor[(1, 256, 14, 14), float32] */;
  %177 = nn.conv2d(%176, %resnetv24_stage3_conv18_weight, padding=[0, 0, 0, 0], channels=1024, kernel_size=[1, 1]) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %178 = add(%177, %165) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %179 = nn.batch_norm(%178, %resnetv24_stage4_batchnorm0_gamma, %resnetv24_stage4_batchnorm0_beta, %resnetv24_stage4_batchnorm0_running_mean, %resnetv24_stage4_batchnorm0_running_var) /* ty=(Tensor[(1, 1024, 14, 14), float32], Tensor[(1024), float32], Tensor[(1024), float32]) */;
  %180 = %179.0;
  %181 = nn.relu(%180) /* ty=Tensor[(1, 1024, 14, 14), float32] */;
  %182 = nn.conv2d(%181, %resnetv24_stage4_conv0_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %183 = nn.batch_norm(%182, %resnetv24_stage4_batchnorm1_gamma, %resnetv24_stage4_batchnorm1_beta, %resnetv24_stage4_batchnorm1_running_mean, %resnetv24_stage4_batchnorm1_running_var) /* ty=(Tensor[(1, 512, 14, 14), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %184 = %183.0;
  %185 = nn.relu(%184) /* ty=Tensor[(1, 512, 14, 14), float32] */;
  %186 = nn.conv2d(%185, %resnetv24_stage4_conv1_weight, strides=[2, 2], padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %187 = nn.batch_norm(%186, %resnetv24_stage4_batchnorm2_gamma, %resnetv24_stage4_batchnorm2_beta, %resnetv24_stage4_batchnorm2_running_mean, %resnetv24_stage4_batchnorm2_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %188 = %187.0;
  %189 = nn.relu(%188) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %190 = nn.conv2d(%189, %resnetv24_stage4_conv2_weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %191 = nn.conv2d(%181, %resnetv24_stage4_conv3_weight, strides=[2, 2], padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %192 = add(%190, %191) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %193 = nn.batch_norm(%192, %resnetv24_stage4_batchnorm3_gamma, %resnetv24_stage4_batchnorm3_beta, %resnetv24_stage4_batchnorm3_running_mean, %resnetv24_stage4_batchnorm3_running_var) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %194 = %193.0;
  %195 = nn.relu(%194) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %196 = nn.conv2d(%195, %resnetv24_stage4_conv4_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %197 = nn.batch_norm(%196, %resnetv24_stage4_batchnorm4_gamma, %resnetv24_stage4_batchnorm4_beta, %resnetv24_stage4_batchnorm4_running_mean, %resnetv24_stage4_batchnorm4_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %198 = %197.0;
  %199 = nn.relu(%198) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %200 = nn.conv2d(%199, %resnetv24_stage4_conv5_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %201 = nn.batch_norm(%200, %resnetv24_stage4_batchnorm5_gamma, %resnetv24_stage4_batchnorm5_beta, %resnetv24_stage4_batchnorm5_running_mean, %resnetv24_stage4_batchnorm5_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %202 = %201.0;
  %203 = nn.relu(%202) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %204 = nn.conv2d(%203, %resnetv24_stage4_conv6_weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %205 = add(%204, %192) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %206 = nn.batch_norm(%205, %resnetv24_stage4_batchnorm6_gamma, %resnetv24_stage4_batchnorm6_beta, %resnetv24_stage4_batchnorm6_running_mean, %resnetv24_stage4_batchnorm6_running_var) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %207 = %206.0;
  %208 = nn.relu(%207) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %209 = nn.conv2d(%208, %resnetv24_stage4_conv7_weight, padding=[0, 0, 0, 0], channels=512, kernel_size=[1, 1]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %210 = nn.batch_norm(%209, %resnetv24_stage4_batchnorm7_gamma, %resnetv24_stage4_batchnorm7_beta, %resnetv24_stage4_batchnorm7_running_mean, %resnetv24_stage4_batchnorm7_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %211 = %210.0;
  %212 = nn.relu(%211) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %213 = nn.conv2d(%212, %resnetv24_stage4_conv8_weight, padding=[1, 1, 1, 1], channels=512, kernel_size=[3, 3]) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %214 = nn.batch_norm(%213, %resnetv24_stage4_batchnorm8_gamma, %resnetv24_stage4_batchnorm8_beta, %resnetv24_stage4_batchnorm8_running_mean, %resnetv24_stage4_batchnorm8_running_var) /* ty=(Tensor[(1, 512, 7, 7), float32], Tensor[(512), float32], Tensor[(512), float32]) */;
  %215 = %214.0;
  %216 = nn.relu(%215) /* ty=Tensor[(1, 512, 7, 7), float32] */;
  %217 = nn.conv2d(%216, %resnetv24_stage4_conv9_weight, padding=[0, 0, 0, 0], channels=2048, kernel_size=[1, 1]) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %218 = add(%217, %205) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %219 = nn.batch_norm(%218, %resnetv24_batchnorm2_gamma, %resnetv24_batchnorm2_beta, %resnetv24_batchnorm2_running_mean, %resnetv24_batchnorm2_running_var) /* ty=(Tensor[(1, 2048, 7, 7), float32], Tensor[(2048), float32], Tensor[(2048), float32]) */;
  %220 = %219.0;
  %221 = nn.relu(%220) /* ty=Tensor[(1, 2048, 7, 7), float32] */;
  %222 = nn.global_avg_pool2d(%221) /* ty=Tensor[(1, 2048, 1, 1), float32] */;
  %223 = reshape(%222, newshape=[0, -1]) /* ty=Tensor[(1, 2048), float32] */;
  %224 = nn.batch_flatten(%223) /* ty=Tensor[(1, 2048), float32] */;
  %225 = nn.dense(%224, %resnetv24_dense0_weight, units=1000) /* ty=Tensor[(1, 1000), float32] */;
  %226 = multiply(1f /* ty=float32 */, %resnetv24_dense0_bias) /* ty=Tensor[(1000), float32] */;
  add(%225, %226) /* ty=Tensor[(1, 1000), float32] */
}